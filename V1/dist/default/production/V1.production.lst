

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Thu Nov 09 12:55:54 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48  0000                     
    49                           ; Version 1.44
    50                           ; Generated 14/09/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F25K80 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	idataBANK0
    85  0013EE                     __pidataBANK0:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _start_stop
    89  0013EE  0001               	dw	1
    90                           
    91                           ;initializer for _state
    92  0013F0  72                 	db	114
    93  0000                     _ANCON1bits	set	3932
    94  0000                     _RCREG1	set	4014
    95  0000                     _PIR1bits	set	3998
    96  0000                     _TXREG1	set	4013
    97  0000                     _TXSTA1bits	set	4012
    98  0000                     _SSPBUF	set	4041
    99  0000                     _PIE1bits	set	3997
   100  0000                     _SSPCON1bits	set	4038
   101  0000                     _SSPSTATbits	set	4039
   102  0000                     _RCSTA1bits	set	4011
   103  0000                     _BAUDCON1	set	4007
   104  0000                     _SPBRG1	set	4015
   105  0000                     _TXSTA1	set	4012
   106  0000                     _INTCON2bits	set	4081
   107  0000                     _RCONbits	set	4048
   108  0000                     _TRISBbits	set	3987
   109  0000                     _TRISC	set	3988
   110  0000                     _INTCON3bits	set	4080
   111  0000                     _INTCONbits	set	4082
   112  0000                     _LATCbits	set	3979
   113  0000                     _RC1IF	set	31989
   114                           
   115                           ; #config settings
   116  0000                     
   117                           	psect	cinit
   118  001148                     __pcinit:
   119                           	opt stack 0
   120  001148                     start_initialization:
   121                           	opt stack 0
   122  001148                     __initialization:
   123                           	opt stack 0
   124                           
   125                           ; Initialize objects allocated to BANK0 (3 bytes)
   126                           ; load TBLPTR registers with __pidataBANK0
   127  001148  0EEE               	movlw	low __pidataBANK0
   128  00114A  6EF6               	movwf	tblptrl,c
   129  00114C  0E13               	movlw	high __pidataBANK0
   130  00114E  6EF7               	movwf	tblptrh,c
   131  001150  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   132  001152  6EF8               	movwf	tblptru,c
   133  001154  0009               	tblrd		*+	;fetch initializer
   134  001156  CFF5 F0F2          	movff	tablat,__pdataBANK0
   135  00115A  0009               	tblrd		*+	;fetch initializer
   136  00115C  CFF5 F0F3          	movff	tablat,__pdataBANK0+1
   137  001160  0009               	tblrd		*+	;fetch initializer
   138  001162  CFF5 F0F4          	movff	tablat,__pdataBANK0+2
   139                           
   140                           ; Clear objects allocated to BANK1 (48 bytes)
   141  001166  EE01  F000         	lfsr	0,__pbssBANK1
   142  00116A  0E30               	movlw	48
   143  00116C                     clear_0:
   144  00116C  6AEE               	clrf	postinc0,c
   145  00116E  06E8               	decf	wreg,f,c
   146  001170  E1FD               	bnz	clear_0
   147                           
   148                           ; Clear objects allocated to BANK0 (76 bytes)
   149  001172  EE00  F060         	lfsr	0,__pbssBANK0
   150  001176  0E4C               	movlw	76
   151  001178                     clear_1:
   152  001178  6AEE               	clrf	postinc0,c
   153  00117A  06E8               	decf	wreg,f,c
   154  00117C  E1FD               	bnz	clear_1
   155                           
   156                           ; Clear objects allocated to COMRAM (38 bytes)
   157  00117E  EE00  F035         	lfsr	0,__pbssCOMRAM
   158  001182  0E26               	movlw	38
   159  001184                     clear_2:
   160  001184  6AEE               	clrf	postinc0,c
   161  001186  06E8               	decf	wreg,f,c
   162  001188  E1FD               	bnz	clear_2
   163  00118A                     end_of_initialization:
   164                           	opt stack 0
   165  00118A                     __end_of__initialization:
   166                           	opt stack 0
   167  00118A  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   168  00118C  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   169  00118E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   170  001190  6EF8               	movwf	tblptru,c
   171  001192  0100               	movlb	0
   172  001194  EFB0  F003         	goto	_main	;jump to C main() function
   173                           tblptru	equ	0xFF8
   174                           tblptrh	equ	0xFF7
   175                           tblptrl	equ	0xFF6
   176                           tablat	equ	0xFF5
   177                           postinc0	equ	0xFEE
   178                           wreg	equ	0xFE8
   179                           
   180                           	psect	bssCOMRAM
   181  000035                     __pbssCOMRAM:
   182                           	opt stack 0
   183  000035                     _CDC_RESULT:
   184                           	opt stack 0
   185  000035                     	ds	24
   186  00004D                     _second_sensor:
   187                           	opt stack 0
   188  00004D                     	ds	2
   189  00004F                     _interrupt_values_cdc2:
   190                           	opt stack 0
   191  00004F                     	ds	6
   192  000055                     _interrupt_values_cdc1:
   193                           	opt stack 0
   194  000055                     	ds	6
   195                           tblptru	equ	0xFF8
   196                           tblptrh	equ	0xFF7
   197                           tblptrl	equ	0xFF6
   198                           tablat	equ	0xFF5
   199                           postinc0	equ	0xFEE
   200                           wreg	equ	0xFE8
   201                           
   202                           	psect	bssBANK0
   203  000060                     __pbssBANK0:
   204                           	opt stack 0
   205  000060                     setup_AD7147@F14884:
   206                           	opt stack 0
   207  000060                     	ds	16
   208  000070                     _num_sensors:
   209                           	opt stack 0
   210  000070                     	ds	2
   211  000072                     _on_off:
   212                           	opt stack 0
   213  000072                     	ds	2
   214  000074                     _cdc:
   215                           	opt stack 0
   216  000074                     	ds	2
   217  000076                     _device_ID:
   218                           	opt stack 0
   219  000076                     	ds	2
   220  000078                     _single_sensor:
   221                           	opt stack 0
   222  000078                     	ds	2
   223  00007A                     _break_loop:
   224                           	opt stack 0
   225  00007A                     	ds	1
   226  00007B                     _indicator:
   227                           	opt stack 0
   228  00007B                     	ds	1
   229  00007C                     _sensor_values:
   230                           	opt stack 0
   231  00007C                     	ds	48
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           tblptrl	equ	0xFF6
   235                           tablat	equ	0xFF5
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           
   239                           	psect	dataBANK0
   240  0000F2                     __pdataBANK0:
   241                           	opt stack 0
   242  0000F2                     _start_stop:
   243                           	opt stack 0
   244  0000F2                     	ds	2
   245  0000F4                     _state:
   246                           	opt stack 0
   247  0000F4                     	ds	1
   248                           tblptru	equ	0xFF8
   249                           tblptrh	equ	0xFF7
   250                           tblptrl	equ	0xFF6
   251                           tablat	equ	0xFF5
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	bssBANK1
   256  000100                     __pbssBANK1:
   257                           	opt stack 0
   258  000100                     _avail_sensors:
   259                           	opt stack 0
   260  000100                     	ds	48
   261                           tblptru	equ	0xFF8
   262                           tblptrh	equ	0xFF7
   263                           tblptrl	equ	0xFF6
   264                           tablat	equ	0xFF5
   265                           postinc0	equ	0xFEE
   266                           wreg	equ	0xFE8
   267                           
   268                           	psect	cstackBANK0
   269  0000AC                     __pcstackBANK0:
   270                           	opt stack 0
   271  0000AC                     ?_w16_r16_spi:
   272                           	opt stack 0
   273  0000AC                     ?_uart_read_unsigned_int:
   274                           	opt stack 0
   275  0000AC                     ?___awdiv:
   276                           	opt stack 0
   277  0000AC                     uart_write_char@data:
   278                           	opt stack 0
   279  0000AC                     get_CDC@cdc:
   280                           	opt stack 0
   281  0000AC                     w32_spi@address:
   282                           	opt stack 0
   283  0000AC                     w16_r16_spi@address:
   284                           	opt stack 0
   285  0000AC                     uart_write_unsigned_int@number:
   286                           	opt stack 0
   287  0000AC                     uart_read_indicator@count:
   288                           	opt stack 0
   289  0000AC                     ___awdiv@dividend:
   290                           	opt stack 0
   291  0000AC                     memset@p1:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x0
   295  0000AC                     	ds	2
   296  0000AE                     ??_w16_r16_spi:
   297  0000AE                     ??_uart_read_unsigned_int:
   298  0000AE                     uart_write_unsigned_int@char1:
   299                           	opt stack 0
   300  0000AE                     get_CDC@state:
   301                           	opt stack 0
   302  0000AE                     w32_spi@data:
   303                           	opt stack 0
   304  0000AE                     ___awdiv@divisor:
   305                           	opt stack 0
   306  0000AE                     memset@c:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x2
   310  0000AE                     	ds	1
   311  0000AF                     uart_write_unsigned_int@char2:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0x3
   315  0000AF                     	ds	1
   316  0000B0                     ??_w32_spi:
   317  0000B0                     ___awdiv@counter:
   318                           	opt stack 0
   319  0000B0                     sensor_CDC@sensor:
   320                           	opt stack 0
   321  0000B0                     w16_r16_spi@p1:
   322                           	opt stack 0
   323  0000B0                     uart_read_unsigned_int@message:
   324                           	opt stack 0
   325  0000B0                     memset@n:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x4
   329  0000B0                     	ds	1
   330  0000B1                     ___awdiv@sign:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0x5
   334  0000B1                     	ds	1
   335  0000B2                     uart_read_unsigned_int@part1:
   336                           	opt stack 0
   337  0000B2                     sensor_CDC@state:
   338                           	opt stack 0
   339  0000B2                     w32_spi@p1:
   340                           	opt stack 0
   341  0000B2                     w16_r16_spi@p2:
   342                           	opt stack 0
   343  0000B2                     ___awdiv@quotient:
   344                           	opt stack 0
   345  0000B2                     memset@p:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x6
   349  0000B2                     	ds	1
   350  0000B3                     uart_read_unsigned_int@part2:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x7
   354  0000B3                     	ds	1
   355  0000B4                     delay_ms@n:
   356                           	opt stack 0
   357  0000B4                     w32_spi@p2:
   358                           	opt stack 0
   359  0000B4                     w16_r16_spi@address_low:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x8
   363  0000B4                     	ds	2
   364  0000B6                     ??_delay_ms:
   365  0000B6                     w32_spi@p3:
   366                           	opt stack 0
   367  0000B6                     w16_r16_spi@address_high:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0xA
   371  0000B6                     	ds	1
   372  0000B7                     delay_ms@j:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0xB
   376  0000B7                     	ds	1
   377  0000B8                     w32_spi@p4:
   378                           	opt stack 0
   379  0000B8                     w16_r16_spi@result:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0xC
   383  0000B8                     	ds	2
   384  0000BA                     w32_spi@address_low:
   385                           	opt stack 0
   386  0000BA                     w16_r16_spi@blank_low:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0xE
   390  0000BA                     	ds	2
   391  0000BC                     w32_spi@address_high:
   392                           	opt stack 0
   393  0000BC                     w16_r16_spi@blank_high:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x10
   397  0000BC                     	ds	2
   398  0000BE                     w32_spi@data_low:
   399                           	opt stack 0
   400  0000BE                     w16_r16_spi@p3:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x12
   404  0000BE                     	ds	2
   405  0000C0                     w32_spi@data_high:
   406                           	opt stack 0
   407  0000C0                     w16_r16_spi@p4:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x14
   411  0000C0                     	ds	2
   412  0000C2                     ?_get_ID:
   413                           	opt stack 0
   414  0000C2                     write_AD7147@RegisterStartAddress:
   415                           	opt stack 0
   416  0000C2                     read_AD7147@DataBuffer:
   417                           	opt stack 0
   418  0000C2                     read_sensor@sensor_values:
   419                           	opt stack 0
   420  0000C2                     get_ID@cdc:
   421                           	opt stack 0
   422  0000C2                     switch_LED@cdc:
   423                           	opt stack 0
   424  0000C2                     blink_LED@cdc:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x16
   428  0000C2                     	ds	2
   429  0000C4                     ??_get_ID:
   430  0000C4                     write_AD7147@NumberOfRegisters:
   431                           	opt stack 0
   432  0000C4                     read_AD7147@RegisterStartAddress:
   433                           	opt stack 0
   434  0000C4                     read_sensor@sensor:
   435                           	opt stack 0
   436  0000C4                     switch_LED@state:
   437                           	opt stack 0
   438  0000C4                     blink_LED@message:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x18
   442  0000C4                     	ds	1
   443  0000C5                     get_ID@result:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x19
   447  0000C5                     	ds	1
   448  0000C6                     ??_read_sensor:
   449  0000C6                     write_AD7147@OutputBuffer:
   450                           	opt stack 0
   451  0000C6                     read_AD7147@NumberOfRegisters:
   452                           	opt stack 0
   453  0000C6                     switch_LED@message:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x1A
   457  0000C6                     	ds	2
   458  0000C8                     write_AD7147@index:
   459                           	opt stack 0
   460  0000C8                     read_AD7147@cdc:
   461                           	opt stack 0
   462  0000C8                     switch_LED@message_160:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x1C
   466  0000C8                     	ds	2
   467  0000CA                     write_AD7147@cdc:
   468                           	opt stack 0
   469  0000CA                     read_AD7147@Register_Values:
   470                           	opt stack 0
   471  0000CA                     read_sensor@register1:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x1E
   475  0000CA                     	ds	2
   476  0000CC                     ??_write_AD7147:
   477  0000CC                     read_AD7147@i:
   478                           	opt stack 0
   479  0000CC                     read_sensor@cdc_sensor:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x20
   483  0000CC                     	ds	2
   484  0000CE                     write_AD7147@Register_Value:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x22
   488  0000CE                     	ds	2
   489  0000D0                     write_AD7147@Data_Value:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x24
   493  0000D0                     	ds	2
   494  0000D2                     write_AD7147@i:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x26
   498  0000D2                     	ds	2
   499  0000D4                     setup_AD7147@DataBuffer:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x28
   503  0000D4                     	ds	2
   504  0000D6                     setup_AD7147@cdc:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x2A
   508  0000D6                     	ds	2
   509  0000D8                     setup_AD7147@StageBuffer:
   510                           	opt stack 0
   511                           
   512                           ; 16 bytes @ 0x2C
   513  0000D8                     	ds	16
   514  0000E8                     ??_main:
   515                           
   516                           ; 1 bytes @ 0x3C
   517  0000E8                     	ds	4
   518  0000EC                     main@index:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x40
   522  0000EC                     	ds	2
   523  0000EE                     main@k:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x42
   527  0000EE                     	ds	2
   528  0000F0                     main@i:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x44
   532  0000F0                     	ds	2
   533                           tblptru	equ	0xFF8
   534                           tblptrh	equ	0xFF7
   535                           tblptrl	equ	0xFF6
   536                           tablat	equ	0xFF5
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           
   540                           	psect	cstackCOMRAM
   541  000001                     __pcstackCOMRAM:
   542                           	opt stack 0
   543  000001                     ?_r16_spi:
   544                           	opt stack 0
   545  000001                     ?i2_w16_r16_spi:
   546                           	opt stack 0
   547  000001                     i2get_CDC@cdc:
   548                           	opt stack 0
   549  000001                     i2w16_r16_spi@address:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x0
   553  000001                     	ds	2
   554  000003                     ??_r16_spi:
   555  000003                     ??i2_w16_r16_spi:
   556  000003                     i2get_CDC@state:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x2
   560  000003                     	ds	2
   561  000005                     r16_spi@blank_low:
   562                           	opt stack 0
   563  000005                     i2w16_r16_spi@p1:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x4
   567  000005                     	ds	2
   568  000007                     r16_spi@blank_high:
   569                           	opt stack 0
   570  000007                     i2w16_r16_spi@p2:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x6
   574  000007                     	ds	2
   575  000009                     r16_spi@p1:
   576                           	opt stack 0
   577  000009                     i2w16_r16_spi@address_low:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x8
   581  000009                     	ds	2
   582  00000B                     r16_spi@p2:
   583                           	opt stack 0
   584  00000B                     i2w16_r16_spi@address_high:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0xA
   588  00000B                     	ds	2
   589  00000D                     r16_spi@result:
   590                           	opt stack 0
   591  00000D                     i2w16_r16_spi@result:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0xC
   595  00000D                     	ds	2
   596  00000F                     i2w16_r16_spi@blank_low:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0xE
   600  00000F                     	ds	2
   601  000011                     i2w16_r16_spi@blank_high:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x10
   605  000011                     	ds	2
   606  000013                     i2w16_r16_spi@p3:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x12
   610  000013                     	ds	2
   611  000015                     i2w16_r16_spi@p4:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x14
   615  000015                     	ds	2
   616  000017                     read_cdc1@sensor_values:
   617                           	opt stack 0
   618  000017                     read_cdc2@sensor_values:
   619                           	opt stack 0
   620  000017                     i2read_AD7147@DataBuffer:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x16
   624  000017                     	ds	2
   625  000019                     read_cdc1@i:
   626                           	opt stack 0
   627  000019                     read_cdc2@i:
   628                           	opt stack 0
   629  000019                     i2read_AD7147@RegisterStartAddress:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x18
   633  000019                     	ds	2
   634  00001B                     i2read_AD7147@NumberOfRegisters:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x1A
   638  00001B                     	ds	2
   639  00001D                     i2read_AD7147@cdc:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x1C
   643  00001D                     	ds	2
   644  00001F                     i2read_AD7147@Register_Values:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x1E
   648  00001F                     	ds	2
   649  000021                     i2read_AD7147@i:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x20
   653  000021                     	ds	2
   654  000023                     ??_ISR:
   655                           
   656                           ; 1 bytes @ 0x22
   657  000023                     	ds	18
   658                           tblptru	equ	0xFF8
   659                           tblptrh	equ	0xFF7
   660                           tblptrl	equ	0xFF6
   661                           tablat	equ	0xFF5
   662                           postinc0	equ	0xFEE
   663                           wreg	equ	0xFE8
   664                           
   665 ;;
   666 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   667 ;;
   668 ;; *************** function _main *****************
   669 ;; Defined at:
   670 ;;		line 39 in file "main.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;  index           2   64[BANK0 ] unsigned int 
   675 ;;  i               2   68[BANK0 ] unsigned int 
   676 ;;  k               2   66[BANK0 ] unsigned int 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   687 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   688 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   689 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   690 ;;Total ram usage:       10 bytes
   691 ;; Hardware stack levels required when called:    6
   692 ;; This function calls:
   693 ;;		_blink_LED
   694 ;;		_delay_ms
   695 ;;		_get_ID
   696 ;;		_init_interrupts
   697 ;;		_memset
   698 ;;		_read_AD7147
   699 ;;		_read_sensor
   700 ;;		_setup_AD7147
   701 ;;		_setup_mcu
   702 ;;		_setup_spi
   703 ;;		_switch_LED
   704 ;;		_uart_read_char
   705 ;;		_uart_read_indicator
   706 ;;		_uart_read_unsigned_int
   707 ;;		_uart_write_char
   708 ;;		_uart_write_unsigned_int
   709 ;; This function is called by:
   710 ;;		Startup code after reset
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714                           	psect	text0
   715  000760                     __ptext0:
   716                           	opt stack 0
   717  000760                     _main:
   718                           	opt stack 25
   719                           
   720                           ;main.c: 41: delay_ms(500);
   721                           
   722                           ;incstack = 0
   723  000760  0E01               	movlw	1
   724  000762  0100               	movlb	0	; () banked
   725  000764  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
   726  000766  0EF4               	movlw	244
   727  000768  6FB4               	movwf	delay_ms@n& (0+255),b
   728  00076A  EC13  F009         	call	_delay_ms	;wreg free
   729                           
   730                           ;main.c: 42: setup_mcu();
   731  00076E  ECF2  F009         	call	_setup_mcu	;wreg free
   732                           
   733                           ;main.c: 43: setup_spi();
   734  000772  ECC6  F009         	call	_setup_spi	;wreg free
   735                           
   736                           ;main.c: 44: setup_AD7147(interrupt_values_cdc1, 1);
   737  000776  0E55               	movlw	low _interrupt_values_cdc1
   738  000778  0100               	movlb	0	; () banked
   739  00077A  6FD4               	movwf	setup_AD7147@DataBuffer& (0+255),b
   740  00077C  0E00               	movlw	high _interrupt_values_cdc1
   741  00077E  6FD5               	movwf	(setup_AD7147@DataBuffer+1)& (0+255),b
   742  000780  0E00               	movlw	0
   743  000782  6FD7               	movwf	(setup_AD7147@cdc+1)& (0+255),b
   744  000784  0E01               	movlw	1
   745  000786  6FD6               	movwf	setup_AD7147@cdc& (0+255),b
   746  000788  EC89  F000         	call	_setup_AD7147	;wreg free
   747                           
   748                           ;main.c: 47: blink_LED(1);
   749  00078C  0E00               	movlw	0
   750  00078E  0100               	movlb	0	; () banked
   751  000790  6FC3               	movwf	(blink_LED@cdc+1)& (0+255),b
   752  000792  0E01               	movlw	1
   753  000794  6FC2               	movwf	blink_LED@cdc& (0+255),b
   754  000796  EC36  F005         	call	_blink_LED	;wreg free
   755                           
   756                           ;main.c: 48: read_AD7147(interrupt_values_cdc1, 0x008, 3, 1);
   757  00079A  0E55               	movlw	low _interrupt_values_cdc1
   758  00079C  0100               	movlb	0	; () banked
   759  00079E  6FC2               	movwf	read_AD7147@DataBuffer& (0+255),b
   760  0007A0  0E00               	movlw	high _interrupt_values_cdc1
   761  0007A2  6FC3               	movwf	(read_AD7147@DataBuffer+1)& (0+255),b
   762  0007A4  0E00               	movlw	0
   763  0007A6  6FC5               	movwf	(read_AD7147@RegisterStartAddress+1)& (0+255),b
   764  0007A8  0E08               	movlw	8
   765  0007AA  6FC4               	movwf	read_AD7147@RegisterStartAddress& (0+255),b
   766  0007AC  0E00               	movlw	0
   767  0007AE  6FC7               	movwf	(read_AD7147@NumberOfRegisters+1)& (0+255),b
   768  0007B0  0E03               	movlw	3
   769  0007B2  6FC6               	movwf	read_AD7147@NumberOfRegisters& (0+255),b
   770  0007B4  0E00               	movlw	0
   771  0007B6  6FC9               	movwf	(read_AD7147@cdc+1)& (0+255),b
   772  0007B8  0E01               	movlw	1
   773  0007BA  6FC8               	movwf	read_AD7147@cdc& (0+255),b
   774  0007BC  EC3E  F007         	call	_read_AD7147	;wreg free
   775                           
   776                           ;main.c: 49: init_interrupts();
   777  0007C0  EC96  F009         	call	_init_interrupts	;wreg free
   778  0007C4                     
   779                           ;main.c: 51: {
   780                           ;main.c: 52: indicator = uart_read_char();
   781  0007C4  ECD1  F009         	call	_uart_read_char	;wreg free
   782  0007C8  0100               	movlb	0	; () banked
   783  0007CA  6F7B               	movwf	_indicator& (0+255),b
   784                           
   785                           ;main.c: 53: switch (state)
   786  0007CC  D141               	goto	l162
   787  0007CE                     
   788                           ; BSR set to: 0
   789                           ;main.c: 59: single_sensor = uart_read_unsigned_int();
   790                           
   791                           ; BSR set to: 0
   792  0007CE  EC54  F009         	call	_uart_read_unsigned_int	;wreg free
   793  0007D2  C0AC  F078         	movff	?_uart_read_unsigned_int,_single_sensor
   794  0007D6  C0AD  F079         	movff	?_uart_read_unsigned_int+1,_single_sensor+1
   795                           
   796                           ;main.c: 60: read_sensor(sensor_values, single_sensor);
   797  0007DA  0E7C               	movlw	low _sensor_values
   798  0007DC  0100               	movlb	0	; () banked
   799  0007DE  6FC2               	movwf	read_sensor@sensor_values& (0+255),b
   800  0007E0  0E00               	movlw	high _sensor_values
   801  0007E2  6FC3               	movwf	(read_sensor@sensor_values+1)& (0+255),b
   802  0007E4  C078  F0C4         	movff	_single_sensor,read_sensor@sensor
   803  0007E8  C079  F0C5         	movff	_single_sensor+1,read_sensor@sensor+1
   804  0007EC  EC96  F005         	call	_read_sensor	;wreg free
   805                           
   806                           ;main.c: 61: uart_write_unsigned_int(sensor_values[single_sensor]);
   807  0007F0  90D8               	bcf	status,0,c
   808  0007F2  0100               	movlb	0	; () banked
   809  0007F4  3578               	rlcf	_single_sensor& (0+255),w,b
   810  0007F6  6ED9               	movwf	fsr2l,c
   811  0007F8  3579               	rlcf	(_single_sensor+1)& (0+255),w,b
   812  0007FA  6EDA               	movwf	fsr2h,c
   813  0007FC  0E7C               	movlw	low _sensor_values
   814  0007FE  26D9               	addwf	fsr2l,f,c
   815  000800  0E00               	movlw	high _sensor_values
   816  000802  22DA               	addwfc	fsr2h,f,c
   817  000804  CFDE F0AC          	movff	postinc2,uart_write_unsigned_int@number
   818  000808  CFDD F0AD          	movff	postdec2,uart_write_unsigned_int@number+1
   819  00080C  ECB8  F009         	call	_uart_write_unsigned_int	;wreg free
   820  000810  D101               	goto	l2503
   821  000812                     
   822                           ; BSR set to: 0
   823                           ;main.c: 65: cdc = uart_read_unsigned_int();
   824                           
   825                           ; BSR set to: 0
   826  000812  EC54  F009         	call	_uart_read_unsigned_int	;wreg free
   827  000816  C0AC  F074         	movff	?_uart_read_unsigned_int,_cdc
   828  00081A  C0AD  F075         	movff	?_uart_read_unsigned_int+1,_cdc+1
   829                           
   830                           ;main.c: 66: blink_LED(cdc);
   831  00081E  C074  F0C2         	movff	_cdc,blink_LED@cdc
   832  000822  C075  F0C3         	movff	_cdc+1,blink_LED@cdc+1
   833  000826  EC36  F005         	call	_blink_LED	;wreg free
   834  00082A  D0F4               	goto	l2503
   835  00082C                     
   836                           ; BSR set to: 0
   837                           ;main.c: 70: cdc = uart_read_unsigned_int();
   838                           
   839                           ; BSR set to: 0
   840  00082C  EC54  F009         	call	_uart_read_unsigned_int	;wreg free
   841  000830  C0AC  F074         	movff	?_uart_read_unsigned_int,_cdc
   842  000834  C0AD  F075         	movff	?_uart_read_unsigned_int+1,_cdc+1
   843                           
   844                           ;main.c: 71: on_off = uart_read_unsigned_int();
   845  000838  EC54  F009         	call	_uart_read_unsigned_int	;wreg free
   846  00083C  C0AC  F072         	movff	?_uart_read_unsigned_int,_on_off
   847  000840  C0AD  F073         	movff	?_uart_read_unsigned_int+1,_on_off+1
   848                           
   849                           ;main.c: 72: switch_LED(cdc, on_off);
   850  000844  C074  F0C2         	movff	_cdc,switch_LED@cdc
   851  000848  C075  F0C3         	movff	_cdc+1,switch_LED@cdc+1
   852  00084C  C072  F0C4         	movff	_on_off,switch_LED@state
   853  000850  C073  F0C5         	movff	_on_off+1,switch_LED@state+1
   854  000854  ECBC  F006         	call	_switch_LED	;wreg free
   855  000858  D0DD               	goto	l2503
   856  00085A                     
   857                           ; BSR set to: 0
   858                           ;main.c: 76: cdc = uart_read_unsigned_int();
   859                           
   860                           ; BSR set to: 0
   861  00085A  EC54  F009         	call	_uart_read_unsigned_int	;wreg free
   862  00085E  C0AC  F074         	movff	?_uart_read_unsigned_int,_cdc
   863  000862  C0AD  F075         	movff	?_uart_read_unsigned_int+1,_cdc+1
   864                           
   865                           ;main.c: 77: device_ID = get_ID(cdc);
   866  000866  C074  F0C2         	movff	_cdc,get_ID@cdc
   867  00086A  C075  F0C3         	movff	_cdc+1,get_ID@cdc+1
   868  00086E  EC75  F008         	call	_get_ID	;wreg free
   869  000872  C0C2  F076         	movff	?_get_ID,_device_ID
   870  000876  C0C3  F077         	movff	?_get_ID+1,_device_ID+1
   871                           
   872                           ;main.c: 78: uart_write_unsigned_int(device_ID);
   873  00087A  C076  F0AC         	movff	_device_ID,uart_write_unsigned_int@number
   874  00087E  C077  F0AD         	movff	_device_ID+1,uart_write_unsigned_int@number+1
   875  000882  ECB8  F009         	call	_uart_write_unsigned_int	;wreg free
   876  000886  D0C6               	goto	l2503
   877  000888                     
   878                           ; BSR set to: 0
   879                           
   880                           ; BSR set to: 0
   881  000888  517B               	movf	_indicator& (0+255),w,b
   882                           
   883                           ; Switch size 1, requested type "space"
   884                           ; Number of cases is 4, Range of values is 98 to 119
   885                           ; switch strategies available:
   886                           ; Name         Instructions Cycles
   887                           ; simple_byte           13     7 (average)
   888                           ;	Chosen strategy is simple_byte
   889  00088A  0A62               	xorlw	98	; case 98
   890  00088C  B4D8               	btfsc	status,2,c
   891  00088E  D79F               	goto	l165
   892  000890  0A04               	xorlw	4	; case 102
   893  000892  B4D8               	btfsc	status,2,c
   894  000894  D7BE               	goto	l167
   895  000896  0A0E               	xorlw	14	; case 104
   896  000898  B4D8               	btfsc	status,2,c
   897  00089A  D7C8               	goto	l168
   898  00089C  0A1F               	xorlw	31	; case 119
   899  00089E  B4D8               	btfsc	status,2,c
   900  0008A0  D7DC               	goto	l169
   901                           
   902                           ; BSR set to: 0
   903                           ;main.c: 82: break;
   904  0008A2  D790               	goto	l161
   905  0008A4                     
   906                           ; BSR set to: 0
   907                           ;main.c: 88: single_sensor = uart_read_unsigned_int();
   908                           
   909                           ; BSR set to: 0
   910  0008A4  EC54  F009         	call	_uart_read_unsigned_int	;wreg free
   911  0008A8  C0AC  F078         	movff	?_uart_read_unsigned_int,_single_sensor
   912  0008AC  C0AD  F079         	movff	?_uart_read_unsigned_int+1,_single_sensor+1
   913                           
   914                           ;main.c: 89: read_sensor(sensor_values, single_sensor);
   915  0008B0  0E7C               	movlw	low _sensor_values
   916  0008B2  0100               	movlb	0	; () banked
   917  0008B4  6FC2               	movwf	read_sensor@sensor_values& (0+255),b
   918  0008B6  0E00               	movlw	high _sensor_values
   919  0008B8  6FC3               	movwf	(read_sensor@sensor_values+1)& (0+255),b
   920  0008BA  C078  F0C4         	movff	_single_sensor,read_sensor@sensor
   921  0008BE  C079  F0C5         	movff	_single_sensor+1,read_sensor@sensor+1
   922  0008C2  EC96  F005         	call	_read_sensor	;wreg free
   923                           
   924                           ;main.c: 90: uart_write_unsigned_int(sensor_values[single_sensor]);
   925  0008C6  90D8               	bcf	status,0,c
   926  0008C8  0100               	movlb	0	; () banked
   927  0008CA  3578               	rlcf	_single_sensor& (0+255),w,b
   928  0008CC  6ED9               	movwf	fsr2l,c
   929  0008CE  3579               	rlcf	(_single_sensor+1)& (0+255),w,b
   930  0008D0  6EDA               	movwf	fsr2h,c
   931  0008D2  0E7C               	movlw	low _sensor_values
   932  0008D4  26D9               	addwf	fsr2l,f,c
   933  0008D6  0E00               	movlw	high _sensor_values
   934  0008D8  22DA               	addwfc	fsr2h,f,c
   935  0008DA  CFDE F0AC          	movff	postinc2,uart_write_unsigned_int@number
   936  0008DE  CFDD F0AD          	movff	postdec2,uart_write_unsigned_int@number+1
   937  0008E2  ECB8  F009         	call	_uart_write_unsigned_int	;wreg free
   938                           
   939                           ;main.c: 91: break;
   940  0008E6  D76E               	goto	l161
   941  0008E8                     
   942                           ;main.c: 94: {
   943                           ;main.c: 95: uart_write_char('s');
   944  0008E8  0E73               	movlw	115
   945  0008EA  ECE5  F009         	call	_uart_write_char
   946                           
   947                           ;main.c: 96: for(unsigned int i = 0; i<24; i++)
   948  0008EE  0E00               	movlw	0
   949  0008F0  0100               	movlb	0	; () banked
   950  0008F2  6FF1               	movwf	(main@i+1)& (0+255),b
   951  0008F4  0E00               	movlw	0
   952  0008F6  6FF0               	movwf	main@i& (0+255),b
   953  0008F8                     l2457:
   954                           
   955                           ; BSR set to: 0
   956  0008F8  51F1               	movf	(main@i+1)& (0+255),w,b
   957  0008FA  E124               	bnz	l2469
   958  0008FC  0E18               	movlw	24
   959  0008FE  5DF0               	subwf	main@i& (0+255),w,b
   960  000900  B0D8               	btfsc	status,0,c
   961  000902  D020               	goto	u1240
   962                           
   963                           ; BSR set to: 0
   964                           ;main.c: 97: {
   965                           ;main.c: 98: if(avail_sensors[i] == 1)
   966                           
   967                           ; BSR set to: 0
   968                           
   969                           ; BSR set to: 0
   970  000904  90D8               	bcf	status,0,c
   971  000906  35F0               	rlcf	main@i& (0+255),w,b
   972  000908  6ED9               	movwf	fsr2l,c
   973  00090A  35F1               	rlcf	(main@i+1)& (0+255),w,b
   974  00090C  6EDA               	movwf	fsr2h,c
   975  00090E  0E00               	movlw	low _avail_sensors
   976  000910  26D9               	addwf	fsr2l,f,c
   977  000912  0E01               	movlw	high _avail_sensors
   978  000914  22DA               	addwfc	fsr2h,f,c
   979  000916  04DE               	decf	postinc2,w,c
   980  000918  10DE               	iorwf	postinc2,w,c
   981  00091A  A4D8               	btfss	status,2,c
   982  00091C  D00F               	goto	l180
   983                           
   984                           ; BSR set to: 0
   985                           ;main.c: 99: {
   986                           ;main.c: 100: uart_write_unsigned_int(sensor_values[i]);
   987  00091E  90D8               	bcf	status,0,c
   988  000920  35F0               	rlcf	main@i& (0+255),w,b
   989  000922  6ED9               	movwf	fsr2l,c
   990  000924  35F1               	rlcf	(main@i+1)& (0+255),w,b
   991  000926  6EDA               	movwf	fsr2h,c
   992  000928  0E7C               	movlw	low _sensor_values
   993  00092A  26D9               	addwf	fsr2l,f,c
   994  00092C  0E00               	movlw	high _sensor_values
   995  00092E  22DA               	addwfc	fsr2h,f,c
   996  000930  CFDE F0AC          	movff	postinc2,uart_write_unsigned_int@number
   997  000934  CFDD F0AD          	movff	postdec2,uart_write_unsigned_int@number+1
   998  000938  ECB8  F009         	call	_uart_write_unsigned_int	;wreg free
   999  00093C                     l180:
  1000  00093C  0100               	movlb	0	; () banked
  1001  00093E  4BF0               	infsnz	main@i& (0+255),f,b
  1002  000940  2BF1               	incf	(main@i+1)& (0+255),f,b
  1003  000942  D7DA               	goto	l2457
  1004  000944                     u1240:
  1005  000944                     l2469:
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;main.c: 101: }
  1009                           ;main.c: 102: }
  1010                           ;main.c: 103: break_loop = uart_read_indicator();
  1011  000944  ECF0  F008         	call	_uart_read_indicator	;wreg free
  1012  000948  0100               	movlb	0	; () banked
  1013  00094A  6F7A               	movwf	_break_loop& (0+255),b
  1014                           
  1015                           ; BSR set to: 0
  1016                           ;main.c: 104: if(break_loop == 'z')
  1017  00094C  0E7A               	movlw	122
  1018  00094E  197A               	xorwf	_break_loop& (0+255),w,b
  1019  000950  A4D8               	btfss	status,2,c
  1020  000952  D006               	goto	l181
  1021                           
  1022                           ; BSR set to: 0
  1023                           ;main.c: 105: {
  1024                           ;main.c: 106: start_stop = 0;
  1025  000954  0E00               	movlw	0
  1026  000956  6FF3               	movwf	(_start_stop+1)& (0+255),b
  1027  000958  0E00               	movlw	0
  1028  00095A  6FF2               	movwf	_start_stop& (0+255),b
  1029                           
  1030                           ;main.c: 107: state = 'r';
  1031  00095C  0E72               	movlw	114
  1032  00095E  6FF4               	movwf	_state& (0+255),b
  1033  000960                     l181:
  1034                           
  1035                           ; BSR set to: 0
  1036                           
  1037                           ; BSR set to: 0
  1038  000960  0100               	movlb	0	; () banked
  1039  000962  05F2               	decf	_start_stop& (0+255),w,b
  1040  000964  11F3               	iorwf	(_start_stop+1)& (0+255),w,b
  1041  000966  B4D8               	btfsc	status,2,c
  1042  000968  D7BF               	goto	l177
  1043                           
  1044                           ; BSR set to: 0
  1045                           ;main.c: 108: }
  1046                           ;main.c: 109: }
  1047                           ;main.c: 110: start_stop = 1;
  1048                           
  1049                           ; BSR set to: 0
  1050  00096A  0E00               	movlw	0
  1051  00096C  6FF3               	movwf	(_start_stop+1)& (0+255),b
  1052  00096E  0E01               	movlw	1
  1053  000970  6FF2               	movwf	_start_stop& (0+255),b
  1054                           
  1055                           ;main.c: 111: break;
  1056  000972  D728               	goto	l161
  1057  000974                     L1:
  1058  000974  6FF4               	movwf	_state& (0+255),b
  1059                           
  1060                           ; BSR set to: 0
  1061                           ;main.c: 115: }
  1062                           
  1063                           ;main.c: 114: break;
  1064  000976  D726               	goto	l161
  1065  000978                     
  1066                           ; BSR set to: 0
  1067                           
  1068                           ; BSR set to: 0
  1069  000978  517B               	movf	_indicator& (0+255),w,b
  1070                           
  1071                           ; Switch size 1, requested type "space"
  1072                           ; Number of cases is 2, Range of values is 117 to 118
  1073                           ; switch strategies available:
  1074                           ; Name         Instructions Cycles
  1075                           ; simple_byte            7     4 (average)
  1076                           ;	Chosen strategy is simple_byte
  1077  00097A  0A75               	xorlw	117	; case 117
  1078  00097C  B4D8               	btfsc	status,2,c
  1079  00097E  D792               	goto	l173
  1080  000980  0A03               	xorlw	3	; case 118
  1081  000982  B4D8               	btfsc	status,2,c
  1082  000984  D7ED               	goto	l181
  1083  000986  D057               	goto	l199
  1084  000988                     
  1085                           ; BSR set to: 0
  1086                           ;main.c: 122: memset(avail_sensors, 0, 24*sizeof(avail_sensors[0]));
  1087                           
  1088                           ; BSR set to: 0
  1089  000988  0E00               	movlw	low _avail_sensors
  1090  00098A  6FAC               	movwf	memset@p1& (0+255),b
  1091  00098C  0E01               	movlw	high _avail_sensors
  1092  00098E  6FAD               	movwf	(memset@p1+1)& (0+255),b
  1093  000990  0E00               	movlw	0
  1094  000992  6FAF               	movwf	(memset@c+1)& (0+255),b
  1095  000994  0E00               	movlw	0
  1096  000996  6FAE               	movwf	memset@c& (0+255),b
  1097  000998  0E00               	movlw	0
  1098  00099A  6FB1               	movwf	(memset@n+1)& (0+255),b
  1099  00099C  0E30               	movlw	48
  1100  00099E  6FB0               	movwf	memset@n& (0+255),b
  1101  0009A0  EC6C  F009         	call	_memset	;wreg free
  1102                           
  1103                           ;main.c: 123: num_sensors = uart_read_unsigned_int();
  1104  0009A4  EC54  F009         	call	_uart_read_unsigned_int	;wreg free
  1105  0009A8  C0AC  F070         	movff	?_uart_read_unsigned_int,_num_sensors
  1106  0009AC  C0AD  F071         	movff	?_uart_read_unsigned_int+1,_num_sensors+1
  1107                           
  1108                           ;main.c: 124: for(unsigned int k = 0; k < num_sensors; k++)
  1109  0009B0  0E00               	movlw	0
  1110  0009B2  0100               	movlb	0	; () banked
  1111  0009B4  6FEF               	movwf	(main@k+1)& (0+255),b
  1112  0009B6  0E00               	movlw	0
  1113  0009B8  6FEE               	movwf	main@k& (0+255),b
  1114  0009BA  D022               	goto	l187
  1115  0009BC                     
  1116                           ; BSR set to: 0
  1117                           ;main.c: 125: {
  1118                           ;main.c: 126: unsigned int index = uart_read_unsigned_int();
  1119                           
  1120                           ; BSR set to: 0
  1121  0009BC  EC54  F009         	call	_uart_read_unsigned_int	;wreg free
  1122  0009C0  C0AC  F0EC         	movff	?_uart_read_unsigned_int,main@index
  1123  0009C4  C0AD  F0ED         	movff	?_uart_read_unsigned_int+1,main@index+1
  1124                           
  1125                           ;main.c: 127: avail_sensors[index-1] = 1;
  1126  0009C8  0EFE               	movlw	254
  1127  0009CA  0100               	movlb	0	; () banked
  1128  0009CC  6FE8               	movwf	??_main& (0+255),b
  1129  0009CE  0EFF               	movlw	255
  1130  0009D0  6FE9               	movwf	(??_main+1)& (0+255),b
  1131  0009D2  C0EC  F0EA         	movff	main@index,??_main+2
  1132  0009D6  C0ED  F0EB         	movff	main@index+1,??_main+3
  1133  0009DA  90D8               	bcf	status,0,c
  1134  0009DC  37EA               	rlcf	(??_main+2)& (0+255),f,b
  1135  0009DE  37EB               	rlcf	(??_main+3)& (0+255),f,b
  1136  0009E0  51E8               	movf	??_main& (0+255),w,b
  1137  0009E2  27EA               	addwf	(??_main+2)& (0+255),f,b
  1138  0009E4  51E9               	movf	(??_main+1)& (0+255),w,b
  1139  0009E6  23EB               	addwfc	(??_main+3)& (0+255),f,b
  1140  0009E8  0E00               	movlw	low _avail_sensors
  1141  0009EA  25EA               	addwf	(??_main+2)& (0+255),w,b
  1142  0009EC  6ED9               	movwf	fsr2l,c
  1143  0009EE  0E01               	movlw	high _avail_sensors
  1144  0009F0  21EB               	addwfc	(??_main+3)& (0+255),w,b
  1145  0009F2  6EDA               	movwf	fsr2h,c
  1146  0009F4  0E01               	movlw	1
  1147  0009F6  6EDE               	movwf	postinc2,c
  1148  0009F8  0E00               	movlw	0
  1149  0009FA  6EDD               	movwf	postdec2,c
  1150                           
  1151                           ; BSR set to: 0
  1152  0009FC  4BEE               	infsnz	main@k& (0+255),f,b
  1153  0009FE  2BEF               	incf	(main@k+1)& (0+255),f,b
  1154  000A00                     l187:
  1155                           
  1156                           ; BSR set to: 0
  1157                           
  1158                           ; BSR set to: 0
  1159  000A00  5170               	movf	_num_sensors& (0+255),w,b
  1160  000A02  5DEE               	subwf	main@k& (0+255),w,b
  1161  000A04  5171               	movf	(_num_sensors+1)& (0+255),w,b
  1162  000A06  59EF               	subwfb	(main@k+1)& (0+255),w,b
  1163  000A08  A0D8               	btfss	status,0,c
  1164  000A0A  D7D8               	goto	l188
  1165                           
  1166                           ; BSR set to: 0
  1167  000A0C  D014               	goto	l199
  1168  000A0E                     
  1169                           ; BSR set to: 0
  1170                           ;main.c: 132: uart_write_char('e');
  1171                           
  1172                           ; BSR set to: 0
  1173  000A0E  0E65               	movlw	101
  1174  000A10  ECE5  F009         	call	_uart_write_char
  1175  000A14                     l2503:
  1176                           
  1177                           ;main.c: 133: state = 'r';
  1178  000A14  0E72               	movlw	114
  1179  000A16  0100               	movlb	0	; () banked
  1180  000A18  D7AD               	goto	L1
  1181  000A1A                     
  1182                           ; BSR set to: 0
  1183                           
  1184                           ; BSR set to: 0
  1185  000A1A  517B               	movf	_indicator& (0+255),w,b
  1186                           
  1187                           ; Switch size 1, requested type "space"
  1188                           ; Number of cases is 2, Range of values is 101 to 110
  1189                           ; switch strategies available:
  1190                           ; Name         Instructions Cycles
  1191                           ; simple_byte            7     4 (average)
  1192                           ;	Chosen strategy is simple_byte
  1193  000A1C  0A65               	xorlw	101	; case 101
  1194  000A1E  B4D8               	btfsc	status,2,c
  1195  000A20  D7F6               	goto	l191
  1196  000A22  0A0B               	xorlw	11	; case 110
  1197  000A24  B4D8               	btfsc	status,2,c
  1198  000A26  D7B0               	goto	l186
  1199                           
  1200                           ; BSR set to: 0
  1201                           ;main.c: 138: break;
  1202  000A28  D6CD               	goto	l161
  1203  000A2A                     
  1204                           ; BSR set to: 0
  1205                           ;main.c: 144: state = 's';
  1206                           
  1207                           ; BSR set to: 0
  1208  000A2A  0E73               	movlw	115
  1209  000A2C  D7A3               	goto	L1
  1210  000A2E                     
  1211                           ; BSR set to: 0
  1212                           ;main.c: 147: state = 'c';
  1213                           
  1214                           ; BSR set to: 0
  1215  000A2E  0E63               	movlw	99
  1216  000A30  D7A1               	goto	L1
  1217  000A32                     
  1218                           ; BSR set to: 0
  1219                           ;main.c: 150: state = 'p';
  1220                           
  1221                           ; BSR set to: 0
  1222  000A32  0E70               	movlw	112
  1223  000A34  D79F               	goto	L1
  1224  000A36                     l199:
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;main.c: 153: state = 'r';
  1228                           
  1229                           ; BSR set to: 0
  1230  000A36  0E72               	movlw	114
  1231  000A38  D79D               	goto	L1
  1232  000A3A                     
  1233                           ; BSR set to: 0
  1234                           
  1235                           ; BSR set to: 0
  1236  000A3A  517B               	movf	_indicator& (0+255),w,b
  1237                           
  1238                           ; Switch size 1, requested type "space"
  1239                           ; Number of cases is 3, Range of values is 99 to 115
  1240                           ; switch strategies available:
  1241                           ; Name         Instructions Cycles
  1242                           ; simple_byte           10     6 (average)
  1243                           ;	Chosen strategy is simple_byte
  1244  000A3C  0A63               	xorlw	99	; case 99
  1245  000A3E  B4D8               	btfsc	status,2,c
  1246  000A40  D7F6               	goto	l197
  1247  000A42  0A13               	xorlw	19	; case 112
  1248  000A44  B4D8               	btfsc	status,2,c
  1249  000A46  D7F5               	goto	l198
  1250  000A48  0A03               	xorlw	3	; case 115
  1251  000A4A  B4D8               	btfsc	status,2,c
  1252  000A4C  D7EE               	goto	l195
  1253  000A4E  D7F3               	goto	l199
  1254  000A50                     l162:
  1255                           
  1256                           ; BSR set to: 0
  1257                           
  1258                           ; BSR set to: 0
  1259  000A50  51F4               	movf	_state& (0+255),w,b
  1260                           
  1261                           ; Switch size 1, requested type "space"
  1262                           ; Number of cases is 4, Range of values is 99 to 115
  1263                           ; switch strategies available:
  1264                           ; Name         Instructions Cycles
  1265                           ; simple_byte           13     7 (average)
  1266                           ;	Chosen strategy is simple_byte
  1267  000A52  0A63               	xorlw	99	; case 99
  1268  000A54  B4D8               	btfsc	status,2,c
  1269  000A56  D790               	goto	l172
  1270  000A58  0A13               	xorlw	19	; case 112
  1271  000A5A  B4D8               	btfsc	status,2,c
  1272  000A5C  D7DE               	goto	l185
  1273  000A5E  0A02               	xorlw	2	; case 114
  1274  000A60  B4D8               	btfsc	status,2,c
  1275  000A62  D7EB               	goto	l194
  1276  000A64  0A01               	xorlw	1	; case 115
  1277  000A66  B4D8               	btfsc	status,2,c
  1278  000A68  D70F               	goto	l164
  1279                           
  1280                           ; BSR set to: 0
  1281                           
  1282                           ; BSR set to: 0
  1283  000A6A  D6AC               	goto	l161
  1284  000A6C                     __end_of_main:
  1285                           	opt stack 0
  1286                           tblptru	equ	0xFF8
  1287                           tblptrh	equ	0xFF7
  1288                           tblptrl	equ	0xFF6
  1289                           tablat	equ	0xFF5
  1290                           postinc0	equ	0xFEE
  1291                           wreg	equ	0xFE8
  1292                           postinc2	equ	0xFDE
  1293                           postdec2	equ	0xFDD
  1294                           fsr2h	equ	0xFDA
  1295                           fsr2l	equ	0xFD9
  1296                           status	equ	0xFD8
  1297                           
  1298 ;; *************** function _uart_write_unsigned_int *****************
  1299 ;; Defined at:
  1300 ;;		line 39 in file "uart.c"
  1301 ;; Parameters:    Size  Location     Type
  1302 ;;  number          2    0[BANK0 ] unsigned int 
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;  char2           1    3[BANK0 ] unsigned char 
  1305 ;;  char1           1    2[BANK0 ] unsigned char 
  1306 ;; Return value:  Size  Location     Type
  1307 ;;                  1    wreg      void 
  1308 ;; Registers used:
  1309 ;;		wreg, status,2
  1310 ;; Tracked objects:
  1311 ;;		On entry : 0/0
  1312 ;;		On exit  : 0/0
  1313 ;;		Unchanged: 0/0
  1314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1315 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1316 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1318 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1319 ;;Total ram usage:        4 bytes
  1320 ;; Hardware stack levels used:    1
  1321 ;; Hardware stack levels required when called:    3
  1322 ;; This function calls:
  1323 ;;		Nothing
  1324 ;; This function is called by:
  1325 ;;		_main
  1326 ;;		_uart_send_sensors
  1327 ;; This function uses a non-reentrant model
  1328 ;;
  1329                           
  1330                           	psect	text1
  1331  001370                     __ptext1:
  1332                           	opt stack 0
  1333  001370                     _uart_write_unsigned_int:
  1334                           	opt stack 27
  1335                           
  1336                           ;uart.c: 41: char char1 = number & 0xFF;
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;incstack = 0
  1340  001370  C0AC  F0AE         	movff	uart_write_unsigned_int@number,uart_write_unsigned_int@char1
  1341                           
  1342                           ;uart.c: 42: char char2 = number >> 8;
  1343  001374  0100               	movlb	0	; () banked
  1344  001376  51AD               	movf	(uart_write_unsigned_int@number+1)& (0+255),w,b
  1345  001378  6FAF               	movwf	uart_write_unsigned_int@char2& (0+255),b
  1346  00137A                     
  1347                           ; BSR set to: 0
  1348  00137A  A2AC               	btfss	4012,1,c	;volatile
  1349  00137C  D7FE               	goto	l347
  1350                           
  1351                           ;uart.c: 45: TXREG1 = char1;
  1352  00137E  C0AE  FFAD         	movff	uart_write_unsigned_int@char1,4013	;volatile
  1353  001382  A2AC               	btfss	4012,1,c	;volatile
  1354  001384  D7FE               	goto	l350
  1355                           
  1356                           ;uart.c: 47: TXREG1 = char2;
  1357  001386  C0AF  FFAD         	movff	uart_write_unsigned_int@char2,4013	;volatile
  1358  00138A  0012               	return		;funcret
  1359  00138C                     __end_of_uart_write_unsigned_int:
  1360                           	opt stack 0
  1361                           tblptru	equ	0xFF8
  1362                           tblptrh	equ	0xFF7
  1363                           tblptrl	equ	0xFF6
  1364                           tablat	equ	0xFF5
  1365                           postinc0	equ	0xFEE
  1366                           wreg	equ	0xFE8
  1367                           postinc2	equ	0xFDE
  1368                           postdec2	equ	0xFDD
  1369                           fsr2h	equ	0xFDA
  1370                           fsr2l	equ	0xFD9
  1371                           status	equ	0xFD8
  1372                           
  1373 ;; *************** function _uart_write_char *****************
  1374 ;; Defined at:
  1375 ;;		line 24 in file "uart.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;  data            1    wreg     unsigned char 
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;  data            1    0[BANK0 ] unsigned char 
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  1    wreg      void 
  1382 ;; Registers used:
  1383 ;;		wreg
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1390 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1392 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1393 ;;Total ram usage:        1 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; Hardware stack levels required when called:    3
  1396 ;; This function calls:
  1397 ;;		Nothing
  1398 ;; This function is called by:
  1399 ;;		_main
  1400 ;;		_uart_write_string
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           	psect	text2
  1405  0013CA                     __ptext2:
  1406                           	opt stack 0
  1407  0013CA                     _uart_write_char:
  1408                           	opt stack 27
  1409                           
  1410                           ;incstack = 0
  1411                           ;uart_write_char@data stored from wreg
  1412  0013CA  0100               	movlb	0	; () banked
  1413  0013CC  6FAC               	movwf	uart_write_char@data& (0+255),b
  1414  0013CE                     
  1415                           ;uart.c: 26: while(!TXSTA1bits.TRMT);
  1416  0013CE  A2AC               	btfss	4012,1,c	;volatile
  1417  0013D0  D7FE               	goto	l2321
  1418                           
  1419                           ;uart.c: 28: TXREG1 = data;
  1420  0013D2  C0AC  FFAD         	movff	uart_write_char@data,4013	;volatile
  1421  0013D6  0012               	return		;funcret
  1422  0013D8                     __end_of_uart_write_char:
  1423                           	opt stack 0
  1424                           tblptru	equ	0xFF8
  1425                           tblptrh	equ	0xFF7
  1426                           tblptrl	equ	0xFF6
  1427                           tablat	equ	0xFF5
  1428                           postinc0	equ	0xFEE
  1429                           wreg	equ	0xFE8
  1430                           postinc2	equ	0xFDE
  1431                           postdec2	equ	0xFDD
  1432                           fsr2h	equ	0xFDA
  1433                           fsr2l	equ	0xFD9
  1434                           status	equ	0xFD8
  1435                           
  1436 ;; *************** function _uart_read_unsigned_int *****************
  1437 ;; Defined at:
  1438 ;;		line 131 in file "uart.c"
  1439 ;; Parameters:    Size  Location     Type
  1440 ;;		None
  1441 ;; Auto vars:     Size  Location     Type
  1442 ;;  message         2    4[BANK0 ] unsigned int 
  1443 ;;  part2           1    7[BANK0 ] unsigned char 
  1444 ;;  part1           1    6[BANK0 ] unsigned char 
  1445 ;; Return value:  Size  Location     Type
  1446 ;;                  2    0[BANK0 ] unsigned int 
  1447 ;; Registers used:
  1448 ;;		wreg, status,2, status,0, cstack
  1449 ;; Tracked objects:
  1450 ;;		On entry : 0/0
  1451 ;;		On exit  : 0/0
  1452 ;;		Unchanged: 0/0
  1453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1454 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1455 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1456 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1457 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1458 ;;Total ram usage:        8 bytes
  1459 ;; Hardware stack levels used:    1
  1460 ;; Hardware stack levels required when called:    4
  1461 ;; This function calls:
  1462 ;;		_uart_read_char
  1463 ;; This function is called by:
  1464 ;;		_main
  1465 ;; This function uses a non-reentrant model
  1466 ;;
  1467                           
  1468                           	psect	text3
  1469  0012A8                     __ptext3:
  1470                           	opt stack 0
  1471  0012A8                     _uart_read_unsigned_int:
  1472                           	opt stack 26
  1473                           
  1474                           ;uart.c: 133: unsigned char part1 = uart_read_char();
  1475                           
  1476                           ;incstack = 0
  1477  0012A8  ECD1  F009         	call	_uart_read_char	;wreg free
  1478  0012AC  0100               	movlb	0	; () banked
  1479  0012AE  6FB2               	movwf	uart_read_unsigned_int@part1& (0+255),b
  1480                           
  1481                           ;uart.c: 134: unsigned char part2 = uart_read_char();
  1482  0012B0  ECD1  F009         	call	_uart_read_char	;wreg free
  1483  0012B4  0100               	movlb	0	; () banked
  1484  0012B6  6FB3               	movwf	uart_read_unsigned_int@part2& (0+255),b
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;uart.c: 135: unsigned int message = (unsigned int)((part1 << 8) | part2);
  1488  0012B8  51B3               	movf	uart_read_unsigned_int@part2& (0+255),w,b
  1489  0012BA  C0B2  F0AE         	movff	uart_read_unsigned_int@part1,??_uart_read_unsigned_int
  1490  0012BE  6BAF               	clrf	(??_uart_read_unsigned_int+1)& (0+255),b
  1491  0012C0  C0AE  F0AF         	movff	??_uart_read_unsigned_int,??_uart_read_unsigned_int+1
  1492  0012C4  6BAE               	clrf	??_uart_read_unsigned_int& (0+255),b
  1493  0012C6  11AE               	iorwf	??_uart_read_unsigned_int& (0+255),w,b
  1494  0012C8  6FB0               	movwf	uart_read_unsigned_int@message& (0+255),b
  1495  0012CA  51AF               	movf	(??_uart_read_unsigned_int+1)& (0+255),w,b
  1496  0012CC  6FB1               	movwf	(uart_read_unsigned_int@message+1)& (0+255),b
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;uart.c: 136: return message;
  1500  0012CE  C0B0  F0AC         	movff	uart_read_unsigned_int@message,?_uart_read_unsigned_int
  1501  0012D2  C0B1  F0AD         	movff	uart_read_unsigned_int@message+1,?_uart_read_unsigned_int+1
  1502  0012D6  0012               	return	
  1503  0012D8                     __end_of_uart_read_unsigned_int:
  1504                           	opt stack 0
  1505                           tblptru	equ	0xFF8
  1506                           tblptrh	equ	0xFF7
  1507                           tblptrl	equ	0xFF6
  1508                           tablat	equ	0xFF5
  1509                           postinc0	equ	0xFEE
  1510                           wreg	equ	0xFE8
  1511                           postinc2	equ	0xFDE
  1512                           postdec2	equ	0xFDD
  1513                           fsr2h	equ	0xFDA
  1514                           fsr2l	equ	0xFD9
  1515                           status	equ	0xFD8
  1516                           
  1517 ;; *************** function _uart_read_char *****************
  1518 ;; Defined at:
  1519 ;;		line 94 in file "uart.c"
  1520 ;; Parameters:    Size  Location     Type
  1521 ;;		None
  1522 ;; Auto vars:     Size  Location     Type
  1523 ;;		None
  1524 ;; Return value:  Size  Location     Type
  1525 ;;                  1    wreg      unsigned char 
  1526 ;; Registers used:
  1527 ;;		wreg, status,2
  1528 ;; Tracked objects:
  1529 ;;		On entry : 0/0
  1530 ;;		On exit  : 0/0
  1531 ;;		Unchanged: 0/0
  1532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1537 ;;Total ram usage:        0 bytes
  1538 ;; Hardware stack levels used:    1
  1539 ;; Hardware stack levels required when called:    3
  1540 ;; This function calls:
  1541 ;;		Nothing
  1542 ;; This function is called by:
  1543 ;;		_main
  1544 ;;		_uart_read_unsigned_int
  1545 ;; This function uses a non-reentrant model
  1546 ;;
  1547                           
  1548                           	psect	text4
  1549  0013A2                     __ptext4:
  1550                           	opt stack 0
  1551  0013A2                     _uart_read_char:
  1552                           	opt stack 26
  1553                           
  1554                           ;uart.c: 96: while(PIR1bits.RC1IF == 0)
  1555                           
  1556                           ; BSR set to: 0
  1557                           ;incstack = 0
  1558  0013A2  D005               	goto	l387
  1559  0013A4                     l386:
  1560                           
  1561                           ;uart.c: 97: {
  1562                           ;uart.c: 98: if(RCSTA1bits.OERR == 1)
  1563  0013A4  A2AB               	btfss	4011,1,c	;volatile
  1564  0013A6  D003               	goto	l387
  1565                           
  1566                           ;uart.c: 99: {
  1567                           ;uart.c: 100: RCSTA1bits.OERR = 0;
  1568  0013A8  92AB               	bcf	4011,1,c	;volatile
  1569                           
  1570                           ;uart.c: 101: RCSTA1bits.CREN = 0;
  1571  0013AA  98AB               	bcf	4011,4,c	;volatile
  1572                           
  1573                           ;uart.c: 102: RCSTA1bits.CREN = 1;
  1574  0013AC  88AB               	bsf	4011,4,c	;volatile
  1575  0013AE                     l387:
  1576  0013AE  AA9E               	btfss	3998,5,c	;volatile
  1577  0013B0  D7F9               	goto	l386
  1578                           
  1579                           ;uart.c: 103: }
  1580                           ;uart.c: 104: }
  1581                           ;uart.c: 105: return RCREG1;
  1582  0013B2  50AE               	movf	4014,w,c	;volatile
  1583  0013B4  0012               	return	
  1584  0013B6                     __end_of_uart_read_char:
  1585                           	opt stack 0
  1586                           tblptru	equ	0xFF8
  1587                           tblptrh	equ	0xFF7
  1588                           tblptrl	equ	0xFF6
  1589                           tablat	equ	0xFF5
  1590                           postinc0	equ	0xFEE
  1591                           wreg	equ	0xFE8
  1592                           postinc2	equ	0xFDE
  1593                           postdec2	equ	0xFDD
  1594                           fsr2h	equ	0xFDA
  1595                           fsr2l	equ	0xFD9
  1596                           status	equ	0xFD8
  1597                           
  1598 ;; *************** function _uart_read_indicator *****************
  1599 ;; Defined at:
  1600 ;;		line 108 in file "uart.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;		None
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;  count           2    0[BANK0 ] unsigned int 
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      unsigned char 
  1607 ;; Registers used:
  1608 ;;		wreg, status,2, status,0
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1615 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1617 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1618 ;;Total ram usage:        2 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    3
  1621 ;; This function calls:
  1622 ;;		Nothing
  1623 ;; This function is called by:
  1624 ;;		_main
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           	psect	text5
  1629  0011E0                     __ptext5:
  1630                           	opt stack 0
  1631  0011E0                     _uart_read_indicator:
  1632                           	opt stack 27
  1633                           
  1634                           ;uart.c: 110: unsigned int count = 0;
  1635                           
  1636                           ;incstack = 0
  1637  0011E0  0E00               	movlw	0
  1638  0011E2  0100               	movlb	0	; () banked
  1639  0011E4  6FAD               	movwf	(uart_read_indicator@count+1)& (0+255),b
  1640  0011E6  0E00               	movlw	0
  1641  0011E8  6FAC               	movwf	uart_read_indicator@count& (0+255),b
  1642                           
  1643                           ;uart.c: 111: while(PIR1bits.RC1IF == 0 && count < 5)
  1644  0011EA  D00B               	goto	l392
  1645  0011EC                     l393:
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;uart.c: 112: {
  1649                           ;uart.c: 113: if(RCSTA1bits.OERR == 1)
  1650  0011EC  A2AB               	btfss	4011,1,c	;volatile
  1651  0011EE  D003               	goto	l394
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;uart.c: 114: {
  1655                           ;uart.c: 115: RCSTA1bits.OERR = 0;
  1656  0011F0  92AB               	bcf	4011,1,c	;volatile
  1657                           
  1658                           ;uart.c: 116: RCSTA1bits.CREN = 0;
  1659  0011F2  98AB               	bcf	4011,4,c	;volatile
  1660                           
  1661                           ;uart.c: 117: RCSTA1bits.CREN = 1;
  1662  0011F4  88AB               	bsf	4011,4,c	;volatile
  1663  0011F6                     l394:
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;uart.c: 118: }
  1667                           ;uart.c: 119: count = count + 1;
  1668                           
  1669                           ; BSR set to: 0
  1670  0011F6  0E01               	movlw	1
  1671  0011F8  25AC               	addwf	uart_read_indicator@count& (0+255),w,b
  1672  0011FA  6FAC               	movwf	uart_read_indicator@count& (0+255),b
  1673  0011FC  0E00               	movlw	0
  1674  0011FE  21AD               	addwfc	(uart_read_indicator@count+1)& (0+255),w,b
  1675  001200  6FAD               	movwf	(uart_read_indicator@count+1)& (0+255),b
  1676  001202                     l392:
  1677                           
  1678                           ; BSR set to: 0
  1679                           
  1680                           ; BSR set to: 0
  1681  001202  BA9E               	btfsc	3998,5,c	;volatile
  1682  001204  D006               	goto	u1120
  1683                           
  1684                           ; BSR set to: 0
  1685  001206  51AD               	movf	(uart_read_indicator@count+1)& (0+255),w,b
  1686  001208  E104               	bnz	l2335
  1687  00120A  0E05               	movlw	5
  1688  00120C  5DAC               	subwf	uart_read_indicator@count& (0+255),w,b
  1689  00120E  A0D8               	btfss	status,0,c
  1690  001210  D7ED               	goto	l393
  1691  001212                     u1120:
  1692  001212                     l2335:
  1693                           
  1694                           ; BSR set to: 0
  1695                           ;uart.c: 120: }
  1696                           ;uart.c: 121: if(count >= 5)
  1697  001212  51AD               	movf	(uart_read_indicator@count+1)& (0+255),w,b
  1698  001214  E104               	bnz	u1130
  1699  001216  0E05               	movlw	5
  1700  001218  5DAC               	subwf	uart_read_indicator@count& (0+255),w,b
  1701  00121A  A0D8               	btfss	status,0,c
  1702  00121C  D002               	goto	l398
  1703  00121E                     u1130:
  1704                           
  1705                           ; BSR set to: 0
  1706                           ;uart.c: 122: {
  1707                           ;uart.c: 123: return 0;
  1708  00121E  0E00               	movlw	0
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;uart.c: 124: }
  1712                           
  1713                           ; BSR set to: 0
  1714  001220  0012               	return	
  1715  001222                     l398:
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;uart.c: 125: else
  1719                           ;uart.c: 126: {
  1720                           ;uart.c: 127: return RCREG1;
  1721                           
  1722                           ; BSR set to: 0
  1723  001222  50AE               	movf	4014,w,c	;volatile
  1724                           
  1725                           ; BSR set to: 0
  1726  001224  0012               	return	
  1727  001226                     __end_of_uart_read_indicator:
  1728                           	opt stack 0
  1729                           tblptru	equ	0xFF8
  1730                           tblptrh	equ	0xFF7
  1731                           tblptrl	equ	0xFF6
  1732                           tablat	equ	0xFF5
  1733                           postinc0	equ	0xFEE
  1734                           wreg	equ	0xFE8
  1735                           postinc2	equ	0xFDE
  1736                           postdec2	equ	0xFDD
  1737                           fsr2h	equ	0xFDA
  1738                           fsr2l	equ	0xFD9
  1739                           status	equ	0xFD8
  1740                           
  1741 ;; *************** function _switch_LED *****************
  1742 ;; Defined at:
  1743 ;;		line 313 in file "AD7147.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;  cdc             2   22[BANK0 ] unsigned int 
  1746 ;;  state           2   24[BANK0 ] unsigned int 
  1747 ;; Auto vars:     Size  Location     Type
  1748 ;;  message         2   28[BANK0 ] unsigned int 
  1749 ;;  message         2   26[BANK0 ] unsigned int 
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      void 
  1752 ;; Registers used:
  1753 ;;		wreg, status,2, status,0, cstack
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1759 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1760 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1762 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1763 ;;Total ram usage:        8 bytes
  1764 ;; Hardware stack levels used:    1
  1765 ;; Hardware stack levels required when called:    5
  1766 ;; This function calls:
  1767 ;;		_delay_ms
  1768 ;;		_get_CDC
  1769 ;;		_w32_spi
  1770 ;; This function is called by:
  1771 ;;		_main
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           	psect	text6
  1776  000D78                     __ptext6:
  1777                           	opt stack 0
  1778  000D78                     _switch_LED:
  1779                           	opt stack 25
  1780                           
  1781                           ;AD7147.c: 315: get_CDC(cdc,0);
  1782                           
  1783                           ; BSR set to: 0
  1784                           ;incstack = 0
  1785  000D78  C0C2  F0AC         	movff	switch_LED@cdc,get_CDC@cdc
  1786  000D7C  C0C3  F0AD         	movff	switch_LED@cdc+1,get_CDC@cdc+1
  1787  000D80  0E00               	movlw	0
  1788  000D82  0100               	movlb	0	; () banked
  1789  000D84  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  1790  000D86  0E00               	movlw	0
  1791  000D88  6FAE               	movwf	get_CDC@state& (0+255),b
  1792  000D8A  EC84  F009         	call	_get_CDC	;wreg free
  1793                           
  1794                           ;AD7147.c: 316: if (state==1)
  1795  000D8E  0100               	movlb	0	; () banked
  1796  000D90  05C4               	decf	switch_LED@state& (0+255),w,b
  1797  000D92  11C5               	iorwf	(switch_LED@state+1)& (0+255),w,b
  1798  000D94  A4D8               	btfss	status,2,c
  1799  000D96  D00F               	goto	l69
  1800                           
  1801                           ; BSR set to: 0
  1802                           ;AD7147.c: 317: {
  1803                           ;AD7147.c: 318: unsigned int message = 0b0010000000000000;
  1804  000D98  0E20               	movlw	32
  1805  000D9A  6FC7               	movwf	(switch_LED@message+1)& (0+255),b
  1806  000D9C  0E00               	movlw	0
  1807  000D9E  6FC6               	movwf	switch_LED@message& (0+255),b
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;AD7147.c: 319: w32_spi((0xE000 + 0x005),message);
  1811  000DA0  0EE0               	movlw	224
  1812  000DA2  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  1813  000DA4  0E05               	movlw	5
  1814  000DA6  6FAC               	movwf	w32_spi@address& (0+255),b
  1815  000DA8  C0C6  F0AE         	movff	switch_LED@message,w32_spi@data
  1816  000DAC  C0C7  F0AF         	movff	switch_LED@message+1,w32_spi@data+1
  1817  000DB0  EC39  F008         	call	_w32_spi	;wreg free
  1818                           
  1819                           ;AD7147.c: 320: }
  1820  000DB4  D00F               	goto	l70
  1821  000DB6                     l69:
  1822                           
  1823                           ;AD7147.c: 321: else
  1824                           ;AD7147.c: 322: {
  1825                           ;AD7147.c: 323: unsigned int message = 0b0011000000000000;
  1826  000DB6  0E30               	movlw	48
  1827  000DB8  0100               	movlb	0	; () banked
  1828  000DBA  6FC9               	movwf	(switch_LED@message_160+1)& (0+255),b
  1829  000DBC  0E00               	movlw	0
  1830  000DBE  6FC8               	movwf	switch_LED@message_160& (0+255),b
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;AD7147.c: 324: w32_spi((0xE000 + 0x005),message);
  1834  000DC0  0EE0               	movlw	224
  1835  000DC2  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  1836  000DC4  0E05               	movlw	5
  1837  000DC6  6FAC               	movwf	w32_spi@address& (0+255),b
  1838  000DC8  C0C8  F0AE         	movff	switch_LED@message_160,w32_spi@data
  1839  000DCC  C0C9  F0AF         	movff	switch_LED@message_160+1,w32_spi@data+1
  1840  000DD0  EC39  F008         	call	_w32_spi	;wreg free
  1841  000DD4                     l70:
  1842                           
  1843                           ;AD7147.c: 325: }
  1844                           ;AD7147.c: 326: delay_ms(10);
  1845  000DD4  0E00               	movlw	0
  1846  000DD6  0100               	movlb	0	; () banked
  1847  000DD8  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  1848  000DDA  0E0A               	movlw	10
  1849  000DDC  6FB4               	movwf	delay_ms@n& (0+255),b
  1850  000DDE  EC13  F009         	call	_delay_ms	;wreg free
  1851                           
  1852                           ;AD7147.c: 327: get_CDC(cdc,1);
  1853  000DE2  C0C2  F0AC         	movff	switch_LED@cdc,get_CDC@cdc
  1854  000DE6  C0C3  F0AD         	movff	switch_LED@cdc+1,get_CDC@cdc+1
  1855  000DEA  0E00               	movlw	0
  1856  000DEC  0100               	movlb	0	; () banked
  1857  000DEE  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  1858  000DF0  0E01               	movlw	1
  1859  000DF2  6FAE               	movwf	get_CDC@state& (0+255),b
  1860  000DF4  EC84  F009         	call	_get_CDC	;wreg free
  1861  000DF8  0012               	return		;funcret
  1862  000DFA                     __end_of_switch_LED:
  1863                           	opt stack 0
  1864                           tblptru	equ	0xFF8
  1865                           tblptrh	equ	0xFF7
  1866                           tblptrl	equ	0xFF6
  1867                           tablat	equ	0xFF5
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           postinc2	equ	0xFDE
  1871                           postdec2	equ	0xFDD
  1872                           fsr2h	equ	0xFDA
  1873                           fsr2l	equ	0xFD9
  1874                           status	equ	0xFD8
  1875                           
  1876 ;; *************** function _setup_spi *****************
  1877 ;; Defined at:
  1878 ;;		line 4 in file "spi.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;		None
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;		None
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  1    wreg      void 
  1885 ;; Registers used:
  1886 ;;		None
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1896 ;;Total ram usage:        0 bytes
  1897 ;; Hardware stack levels used:    1
  1898 ;; Hardware stack levels required when called:    3
  1899 ;; This function calls:
  1900 ;;		Nothing
  1901 ;; This function is called by:
  1902 ;;		_main
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text7
  1907  00138C                     __ptext7:
  1908                           	opt stack 0
  1909  00138C                     _setup_spi:
  1910                           	opt stack 27
  1911                           
  1912                           ;spi.c: 6: SSPSTATbits.SMP = 0;
  1913                           
  1914                           ;incstack = 0
  1915  00138C  9EC7               	bcf	4039,7,c	;volatile
  1916                           
  1917                           ;spi.c: 7: SSPSTATbits.CKE = 0;
  1918  00138E  9CC7               	bcf	4039,6,c	;volatile
  1919                           
  1920                           ;spi.c: 9: SSPCON1bits.WCOL = 0;
  1921  001390  9EC6               	bcf	4038,7,c	;volatile
  1922                           
  1923                           ;spi.c: 10: SSPCON1bits.CKP = 1;
  1924  001392  88C6               	bsf	4038,4,c	;volatile
  1925                           
  1926                           ;spi.c: 12: SSPCON1bits.SSPM3 = 0;
  1927  001394  96C6               	bcf	4038,3,c	;volatile
  1928                           
  1929                           ;spi.c: 13: SSPCON1bits.SSPM2 = 0;
  1930  001396  94C6               	bcf	4038,2,c	;volatile
  1931                           
  1932                           ;spi.c: 14: SSPCON1bits.SSPM1 = 1;
  1933  001398  82C6               	bsf	4038,1,c	;volatile
  1934                           
  1935                           ;spi.c: 15: SSPCON1bits.SSPM0 = 0;
  1936  00139A  90C6               	bcf	4038,0,c	;volatile
  1937                           
  1938                           ;spi.c: 17: PIE1bits.SSPIE = 0;
  1939  00139C  969D               	bcf	3997,3,c	;volatile
  1940                           
  1941                           ;spi.c: 19: SSPCON1bits.SSPEN = 1;
  1942  00139E  8AC6               	bsf	4038,5,c	;volatile
  1943  0013A0  0012               	return		;funcret
  1944  0013A2                     __end_of_setup_spi:
  1945                           	opt stack 0
  1946                           tblptru	equ	0xFF8
  1947                           tblptrh	equ	0xFF7
  1948                           tblptrl	equ	0xFF6
  1949                           tablat	equ	0xFF5
  1950                           postinc0	equ	0xFEE
  1951                           wreg	equ	0xFE8
  1952                           postinc2	equ	0xFDE
  1953                           postdec2	equ	0xFDD
  1954                           fsr2h	equ	0xFDA
  1955                           fsr2l	equ	0xFD9
  1956                           status	equ	0xFD8
  1957                           
  1958 ;; *************** function _setup_mcu *****************
  1959 ;; Defined at:
  1960 ;;		line 6 in file "micro_setup.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;		None
  1963 ;; Auto vars:     Size  Location     Type
  1964 ;;		None
  1965 ;; Return value:  Size  Location     Type
  1966 ;;                  1    wreg      void 
  1967 ;; Registers used:
  1968 ;;		wreg, status,2, cstack
  1969 ;; Tracked objects:
  1970 ;;		On entry : 0/0
  1971 ;;		On exit  : 0/0
  1972 ;;		Unchanged: 0/0
  1973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1978 ;;Total ram usage:        0 bytes
  1979 ;; Hardware stack levels used:    1
  1980 ;; Hardware stack levels required when called:    4
  1981 ;; This function calls:
  1982 ;;		_init_uart
  1983 ;;		_setup_port
  1984 ;; This function is called by:
  1985 ;;		_main
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988                           
  1989                           	psect	text8
  1990  0013E4                     __ptext8:
  1991                           	opt stack 0
  1992  0013E4                     _setup_mcu:
  1993                           	opt stack 26
  1994                           
  1995                           ;micro_setup.c: 8: setup_port();
  1996                           
  1997                           ;incstack = 0
  1998  0013E4  ECEC  F009         	call	_setup_port	;wreg free
  1999                           
  2000                           ;micro_setup.c: 9: init_uart();
  2001  0013E8  ECDB  F009         	call	_init_uart	;wreg free
  2002  0013EC  0012               	return		;funcret
  2003  0013EE                     __end_of_setup_mcu:
  2004                           	opt stack 0
  2005                           tblptru	equ	0xFF8
  2006                           tblptrh	equ	0xFF7
  2007                           tblptrl	equ	0xFF6
  2008                           tablat	equ	0xFF5
  2009                           postinc0	equ	0xFEE
  2010                           wreg	equ	0xFE8
  2011                           postinc2	equ	0xFDE
  2012                           postdec2	equ	0xFDD
  2013                           fsr2h	equ	0xFDA
  2014                           fsr2l	equ	0xFD9
  2015                           status	equ	0xFD8
  2016                           
  2017 ;; *************** function _setup_port *****************
  2018 ;; Defined at:
  2019 ;;		line 12 in file "micro_setup.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;		None
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;		None
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  1    wreg      void 
  2026 ;; Registers used:
  2027 ;;		wreg, status,2
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2037 ;;Total ram usage:        0 bytes
  2038 ;; Hardware stack levels used:    1
  2039 ;; Hardware stack levels required when called:    3
  2040 ;; This function calls:
  2041 ;;		Nothing
  2042 ;; This function is called by:
  2043 ;;		_setup_mcu
  2044 ;; This function uses a non-reentrant model
  2045 ;;
  2046                           
  2047                           	psect	text9
  2048  0013D8                     __ptext9:
  2049                           	opt stack 0
  2050  0013D8                     _setup_port:
  2051                           	opt stack 26
  2052                           
  2053                           ;micro_setup.c: 16: TRISC = 0b10010000;
  2054                           
  2055                           ;incstack = 0
  2056  0013D8  0E90               	movlw	144
  2057  0013DA  6E94               	movwf	3988,c	;volatile
  2058                           
  2059                           ;micro_setup.c: 17: LATCbits.LATC1=1;
  2060  0013DC  828B               	bsf	3979,1,c	;volatile
  2061                           
  2062                           ;micro_setup.c: 18: LATCbits.LATC0=1;
  2063  0013DE  808B               	bsf	3979,0,c	;volatile
  2064                           
  2065                           ;micro_setup.c: 19: LATCbits.LATC2=1;
  2066  0013E0  848B               	bsf	3979,2,c	;volatile
  2067  0013E2  0012               	return		;funcret
  2068  0013E4                     __end_of_setup_port:
  2069                           	opt stack 0
  2070                           tblptru	equ	0xFF8
  2071                           tblptrh	equ	0xFF7
  2072                           tblptrl	equ	0xFF6
  2073                           tablat	equ	0xFF5
  2074                           postinc0	equ	0xFEE
  2075                           wreg	equ	0xFE8
  2076                           postinc2	equ	0xFDE
  2077                           postdec2	equ	0xFDD
  2078                           fsr2h	equ	0xFDA
  2079                           fsr2l	equ	0xFD9
  2080                           status	equ	0xFD8
  2081                           
  2082 ;; *************** function _init_uart *****************
  2083 ;; Defined at:
  2084 ;;		line 47 in file "micro_setup.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;		None
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;		None
  2089 ;; Return value:  Size  Location     Type
  2090 ;;                  1    wreg      void 
  2091 ;; Registers used:
  2092 ;;		wreg, status,2
  2093 ;; Tracked objects:
  2094 ;;		On entry : 0/0
  2095 ;;		On exit  : 0/0
  2096 ;;		Unchanged: 0/0
  2097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2102 ;;Total ram usage:        0 bytes
  2103 ;; Hardware stack levels used:    1
  2104 ;; Hardware stack levels required when called:    3
  2105 ;; This function calls:
  2106 ;;		Nothing
  2107 ;; This function is called by:
  2108 ;;		_setup_mcu
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           	psect	text10
  2113  0013B6                     __ptext10:
  2114                           	opt stack 0
  2115  0013B6                     _init_uart:
  2116                           	opt stack 26
  2117                           
  2118                           ;micro_setup.c: 49: TXSTA1 = 0b00100000;
  2119                           
  2120                           ;incstack = 0
  2121  0013B6  0E20               	movlw	32
  2122  0013B8  6EAC               	movwf	4012,c	;volatile
  2123                           
  2124                           ;micro_setup.c: 61: SPBRG1 = 12;
  2125  0013BA  0E0C               	movlw	12
  2126  0013BC  6EAF               	movwf	4015,c	;volatile
  2127                           
  2128                           ;micro_setup.c: 63: BAUDCON1 = 0b00000000;
  2129  0013BE  0E00               	movlw	0
  2130  0013C0  6EA7               	movwf	4007,c	;volatile
  2131                           
  2132                           ;micro_setup.c: 83: RCSTA1bits.SPEN=1;
  2133  0013C2  8EAB               	bsf	4011,7,c	;volatile
  2134                           
  2135                           ;micro_setup.c: 84: RCSTA1bits.RX9=0;
  2136  0013C4  9CAB               	bcf	4011,6,c	;volatile
  2137                           
  2138                           ;micro_setup.c: 85: RCSTA1bits.CREN=1;
  2139  0013C6  88AB               	bsf	4011,4,c	;volatile
  2140  0013C8  0012               	return		;funcret
  2141  0013CA                     __end_of_init_uart:
  2142                           	opt stack 0
  2143                           tblptru	equ	0xFF8
  2144                           tblptrh	equ	0xFF7
  2145                           tblptrl	equ	0xFF6
  2146                           tablat	equ	0xFF5
  2147                           postinc0	equ	0xFEE
  2148                           wreg	equ	0xFE8
  2149                           postinc2	equ	0xFDE
  2150                           postdec2	equ	0xFDD
  2151                           fsr2h	equ	0xFDA
  2152                           fsr2l	equ	0xFD9
  2153                           status	equ	0xFD8
  2154                           
  2155 ;; *************** function _setup_AD7147 *****************
  2156 ;; Defined at:
  2157 ;;		line 6 in file "AD7147.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;  DataBuffer      2   40[BANK0 ] PTR unsigned int 
  2160 ;;		 -> interrupt_values_cdc1(6), 
  2161 ;;  cdc             2   42[BANK0 ] unsigned int 
  2162 ;; Auto vars:     Size  Location     Type
  2163 ;;  StageBuffer    16   44[BANK0 ] unsigned int [8]
  2164 ;; Return value:  Size  Location     Type
  2165 ;;                  1    wreg      void 
  2166 ;; Registers used:
  2167 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2168 ;; Tracked objects:
  2169 ;;		On entry : 0/0
  2170 ;;		On exit  : 0/0
  2171 ;;		Unchanged: 0/0
  2172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2173 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2174 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2176 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2177 ;;Total ram usage:       20 bytes
  2178 ;; Hardware stack levels used:    1
  2179 ;; Hardware stack levels required when called:    5
  2180 ;; This function calls:
  2181 ;;		_read_AD7147
  2182 ;;		_write_AD7147
  2183 ;; This function is called by:
  2184 ;;		_main
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           	psect	text11
  2189  000112                     __ptext11:
  2190                           	opt stack 0
  2191  000112                     _setup_AD7147:
  2192                           	opt stack 25
  2193                           
  2194                           ;AD7147.c: 8: unsigned int StageBuffer[8] = {0};
  2195                           
  2196                           ;incstack = 0
  2197  000112  EE20  F060         	lfsr	2,setup_AD7147@F14884
  2198  000116  EE10  F0D8         	lfsr	1,setup_AD7147@StageBuffer
  2199  00011A  0E0F               	movlw	15
  2200  00011C                     u991:
  2201  00011C  CFDB FFE3          	movff	plusw2,plusw1
  2202  000120  06E8               	decf	wreg,f,c
  2203  000122  E2FC               	bc	u991
  2204                           
  2205                           ;AD7147.c: 23: StageBuffer[0] = 0xFFFE;
  2206  000124  0EFF               	movlw	255
  2207  000126  0100               	movlb	0	; () banked
  2208  000128  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2209  00012A  0EFE               	movlw	254
  2210  00012C  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;AD7147.c: 24: StageBuffer[1] = 0x1FFF;
  2214  00012E  0E1F               	movlw	31
  2215  000130  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2216  000132  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;AD7147.c: 25: StageBuffer[2] = 0x0100;
  2220  000134  0E01               	movlw	1
  2221  000136  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2222  000138  0E00               	movlw	0
  2223  00013A  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2224                           
  2225                           ; BSR set to: 0
  2226                           ;AD7147.c: 26: StageBuffer[3] = 0x2121;
  2227  00013C  0E21               	movlw	33
  2228  00013E  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2229  000140  0E21               	movlw	33
  2230  000142  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;AD7147.c: 27: StageBuffer[4] = 500;
  2234  000144  0E01               	movlw	1
  2235  000146  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2236  000148  0EF4               	movlw	244
  2237  00014A  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;AD7147.c: 28: StageBuffer[5] = 500;
  2241  00014C  0E01               	movlw	1
  2242  00014E  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2243  000150  0EF4               	movlw	244
  2244  000152  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;AD7147.c: 29: StageBuffer[6] = 600;
  2248  000154  0E02               	movlw	2
  2249  000156  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2250  000158  0E58               	movlw	88
  2251  00015A  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;AD7147.c: 30: StageBuffer[7] = 600;
  2255  00015C  0E02               	movlw	2
  2256  00015E  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2257  000160  0E58               	movlw	88
  2258  000162  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;AD7147.c: 31: write_AD7147(0x080, 8, StageBuffer, 0, cdc);
  2262  000164  0E00               	movlw	0
  2263  000166  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2264  000168  0E80               	movlw	128
  2265  00016A  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2266  00016C  0E00               	movlw	0
  2267  00016E  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2268  000170  0E08               	movlw	8
  2269  000172  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2270  000174  0ED8               	movlw	low setup_AD7147@StageBuffer
  2271  000176  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2272  000178  0E00               	movlw	high setup_AD7147@StageBuffer
  2273  00017A  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2274  00017C  0E00               	movlw	0
  2275  00017E  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2276  000180  0E00               	movlw	0
  2277  000182  6FC8               	movwf	write_AD7147@index& (0+255),b
  2278  000184  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2279  000188  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2280  00018C  ECE7  F005         	call	_write_AD7147	;wreg free
  2281                           
  2282                           ;AD7147.c: 36: StageBuffer[0]=0xFFFB;
  2283  000190  0EFF               	movlw	255
  2284  000192  0100               	movlb	0	; () banked
  2285  000194  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2286  000196  0EFB               	movlw	251
  2287  000198  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;AD7147.c: 37: StageBuffer[1]=0x1FFF;
  2291  00019A  0E1F               	movlw	31
  2292  00019C  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2293  00019E  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;AD7147.c: 38: StageBuffer[2]=0x0100;
  2297  0001A0  0E01               	movlw	1
  2298  0001A2  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2299  0001A4  0E00               	movlw	0
  2300  0001A6  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;AD7147.c: 39: StageBuffer[3]=0x2121;
  2304  0001A8  0E21               	movlw	33
  2305  0001AA  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2306  0001AC  0E21               	movlw	33
  2307  0001AE  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2308                           
  2309                           ; BSR set to: 0
  2310                           ;AD7147.c: 40: StageBuffer[4]=500;
  2311  0001B0  0E01               	movlw	1
  2312  0001B2  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2313  0001B4  0EF4               	movlw	244
  2314  0001B6  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;AD7147.c: 41: StageBuffer[5]=500;
  2318  0001B8  0E01               	movlw	1
  2319  0001BA  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2320  0001BC  0EF4               	movlw	244
  2321  0001BE  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;AD7147.c: 42: StageBuffer[6]=600;
  2325  0001C0  0E02               	movlw	2
  2326  0001C2  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2327  0001C4  0E58               	movlw	88
  2328  0001C6  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;AD7147.c: 43: StageBuffer[7]=600;
  2332  0001C8  0E02               	movlw	2
  2333  0001CA  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2334  0001CC  0E58               	movlw	88
  2335  0001CE  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;AD7147.c: 44: write_AD7147(0x088, 8, StageBuffer, 0, cdc);
  2339  0001D0  0E00               	movlw	0
  2340  0001D2  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2341  0001D4  0E88               	movlw	136
  2342  0001D6  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2343  0001D8  0E00               	movlw	0
  2344  0001DA  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2345  0001DC  0E08               	movlw	8
  2346  0001DE  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2347  0001E0  0ED8               	movlw	low setup_AD7147@StageBuffer
  2348  0001E2  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2349  0001E4  0E00               	movlw	high setup_AD7147@StageBuffer
  2350  0001E6  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2351  0001E8  0E00               	movlw	0
  2352  0001EA  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2353  0001EC  0E00               	movlw	0
  2354  0001EE  6FC8               	movwf	write_AD7147@index& (0+255),b
  2355  0001F0  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2356  0001F4  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2357  0001F8  ECE7  F005         	call	_write_AD7147	;wreg free
  2358                           
  2359                           ;AD7147.c: 49: StageBuffer[0]=0xFFEF;
  2360  0001FC  0EFF               	movlw	255
  2361  0001FE  0100               	movlb	0	; () banked
  2362  000200  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2363  000202  0EEF               	movlw	239
  2364  000204  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;AD7147.c: 50: StageBuffer[1]=0x1FFF;
  2368  000206  0E1F               	movlw	31
  2369  000208  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2370  00020A  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;AD7147.c: 51: StageBuffer[2]=0x0100;
  2374  00020C  0E01               	movlw	1
  2375  00020E  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2376  000210  0E00               	movlw	0
  2377  000212  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2378                           
  2379                           ; BSR set to: 0
  2380                           ;AD7147.c: 52: StageBuffer[3]=0x2121;
  2381  000214  0E21               	movlw	33
  2382  000216  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2383  000218  0E21               	movlw	33
  2384  00021A  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;AD7147.c: 53: StageBuffer[4]=500;
  2388  00021C  0E01               	movlw	1
  2389  00021E  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2390  000220  0EF4               	movlw	244
  2391  000222  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2392                           
  2393                           ; BSR set to: 0
  2394                           ;AD7147.c: 54: StageBuffer[5]=500;
  2395  000224  0E01               	movlw	1
  2396  000226  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2397  000228  0EF4               	movlw	244
  2398  00022A  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2399                           
  2400                           ; BSR set to: 0
  2401                           ;AD7147.c: 55: StageBuffer[6]=600;
  2402  00022C  0E02               	movlw	2
  2403  00022E  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2404  000230  0E58               	movlw	88
  2405  000232  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2406                           
  2407                           ; BSR set to: 0
  2408                           ;AD7147.c: 56: StageBuffer[7]=600;
  2409  000234  0E02               	movlw	2
  2410  000236  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2411  000238  0E58               	movlw	88
  2412  00023A  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2413                           
  2414                           ; BSR set to: 0
  2415                           ;AD7147.c: 57: write_AD7147(0x090, 8, StageBuffer, 0, cdc);
  2416  00023C  0E00               	movlw	0
  2417  00023E  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2418  000240  0E90               	movlw	144
  2419  000242  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2420  000244  0E00               	movlw	0
  2421  000246  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2422  000248  0E08               	movlw	8
  2423  00024A  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2424  00024C  0ED8               	movlw	low setup_AD7147@StageBuffer
  2425  00024E  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2426  000250  0E00               	movlw	high setup_AD7147@StageBuffer
  2427  000252  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2428  000254  0E00               	movlw	0
  2429  000256  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2430  000258  0E00               	movlw	0
  2431  00025A  6FC8               	movwf	write_AD7147@index& (0+255),b
  2432  00025C  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2433  000260  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2434  000264  ECE7  F005         	call	_write_AD7147	;wreg free
  2435                           
  2436                           ;AD7147.c: 62: StageBuffer[0]=0xFEFF;
  2437  000268  0EFE               	movlw	254
  2438  00026A  0100               	movlb	0	; () banked
  2439  00026C  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2440  00026E  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;AD7147.c: 63: StageBuffer[1]=0x1FFF;
  2444  000270  0E1F               	movlw	31
  2445  000272  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2446  000274  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;AD7147.c: 64: StageBuffer[2]=0x0100;
  2450  000276  0E01               	movlw	1
  2451  000278  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2452  00027A  0E00               	movlw	0
  2453  00027C  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;AD7147.c: 65: StageBuffer[3]=0x2121;
  2457  00027E  0E21               	movlw	33
  2458  000280  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2459  000282  0E21               	movlw	33
  2460  000284  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2461                           
  2462                           ; BSR set to: 0
  2463                           ;AD7147.c: 66: StageBuffer[4]=500;
  2464  000286  0E01               	movlw	1
  2465  000288  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2466  00028A  0EF4               	movlw	244
  2467  00028C  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;AD7147.c: 67: StageBuffer[5]=500;
  2471  00028E  0E01               	movlw	1
  2472  000290  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2473  000292  0EF4               	movlw	244
  2474  000294  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;AD7147.c: 68: StageBuffer[6]=600;
  2478  000296  0E02               	movlw	2
  2479  000298  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2480  00029A  0E58               	movlw	88
  2481  00029C  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;AD7147.c: 69: StageBuffer[7]=600;
  2485  00029E  0E02               	movlw	2
  2486  0002A0  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2487  0002A2  0E58               	movlw	88
  2488  0002A4  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;AD7147.c: 70: write_AD7147(0x098, 8, StageBuffer, 0, cdc);
  2492  0002A6  0E00               	movlw	0
  2493  0002A8  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2494  0002AA  0E98               	movlw	152
  2495  0002AC  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2496  0002AE  0E00               	movlw	0
  2497  0002B0  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2498  0002B2  0E08               	movlw	8
  2499  0002B4  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2500  0002B6  0ED8               	movlw	low setup_AD7147@StageBuffer
  2501  0002B8  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2502  0002BA  0E00               	movlw	high setup_AD7147@StageBuffer
  2503  0002BC  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2504  0002BE  0E00               	movlw	0
  2505  0002C0  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2506  0002C2  0E00               	movlw	0
  2507  0002C4  6FC8               	movwf	write_AD7147@index& (0+255),b
  2508  0002C6  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2509  0002CA  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2510  0002CE  ECE7  F005         	call	_write_AD7147	;wreg free
  2511                           
  2512                           ;AD7147.c: 75: StageBuffer[0]=0xFFFF;
  2513  0002D2  0100               	movlb	0	; () banked
  2514  0002D4  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2515  0002D6  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;AD7147.c: 76: StageBuffer[1]=0x3FFF;
  2519  0002D8  0E3F               	movlw	63
  2520  0002DA  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2521  0002DC  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;AD7147.c: 77: StageBuffer[2]=0x0000;
  2525  0002DE  0E00               	movlw	0
  2526  0002E0  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2527  0002E2  0E00               	movlw	0
  2528  0002E4  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;AD7147.c: 78: StageBuffer[3]=0x2626;
  2532  0002E6  0E26               	movlw	38
  2533  0002E8  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2534  0002EA  0E26               	movlw	38
  2535  0002EC  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;AD7147.c: 79: StageBuffer[4]=4000;
  2539  0002EE  0E0F               	movlw	15
  2540  0002F0  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2541  0002F2  0EA0               	movlw	160
  2542  0002F4  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;AD7147.c: 80: StageBuffer[5]=2500;
  2546  0002F6  0E09               	movlw	9
  2547  0002F8  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2548  0002FA  0EC4               	movlw	196
  2549  0002FC  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;AD7147.c: 81: StageBuffer[6]=4000;
  2553  0002FE  0E0F               	movlw	15
  2554  000300  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2555  000302  0EA0               	movlw	160
  2556  000304  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;AD7147.c: 82: StageBuffer[7]=4000;
  2560  000306  0E0F               	movlw	15
  2561  000308  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2562  00030A  0EA0               	movlw	160
  2563  00030C  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;AD7147.c: 83: write_AD7147(0x0A0, 8, StageBuffer,0, cdc);
  2567  00030E  0E00               	movlw	0
  2568  000310  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2569  000312  0EA0               	movlw	160
  2570  000314  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2571  000316  0E00               	movlw	0
  2572  000318  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2573  00031A  0E08               	movlw	8
  2574  00031C  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2575  00031E  0ED8               	movlw	low setup_AD7147@StageBuffer
  2576  000320  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2577  000322  0E00               	movlw	high setup_AD7147@StageBuffer
  2578  000324  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2579  000326  0E00               	movlw	0
  2580  000328  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2581  00032A  0E00               	movlw	0
  2582  00032C  6FC8               	movwf	write_AD7147@index& (0+255),b
  2583  00032E  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2584  000332  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2585  000336  ECE7  F005         	call	_write_AD7147	;wreg free
  2586                           
  2587                           ;AD7147.c: 88: StageBuffer[0]=0xFFFF;
  2588  00033A  0100               	movlb	0	; () banked
  2589  00033C  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2590  00033E  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;AD7147.c: 89: StageBuffer[1]=0x3FFF;
  2594  000340  0E3F               	movlw	63
  2595  000342  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2596  000344  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;AD7147.c: 90: StageBuffer[2]=0x0000;
  2600  000346  0E00               	movlw	0
  2601  000348  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2602  00034A  0E00               	movlw	0
  2603  00034C  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;AD7147.c: 91: StageBuffer[3]=0x2626;
  2607  00034E  0E26               	movlw	38
  2608  000350  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2609  000352  0E26               	movlw	38
  2610  000354  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;AD7147.c: 92: StageBuffer[4]=4000;
  2614  000356  0E0F               	movlw	15
  2615  000358  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2616  00035A  0EA0               	movlw	160
  2617  00035C  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2618                           
  2619                           ; BSR set to: 0
  2620                           ;AD7147.c: 93: StageBuffer[5]=2500;
  2621  00035E  0E09               	movlw	9
  2622  000360  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2623  000362  0EC4               	movlw	196
  2624  000364  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;AD7147.c: 94: StageBuffer[6]=4000;
  2628  000366  0E0F               	movlw	15
  2629  000368  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2630  00036A  0EA0               	movlw	160
  2631  00036C  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;AD7147.c: 95: StageBuffer[7]=4000;
  2635  00036E  0E0F               	movlw	15
  2636  000370  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2637  000372  0EA0               	movlw	160
  2638  000374  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;AD7147.c: 96: write_AD7147(0x0A8, 8, StageBuffer,0, cdc);
  2642  000376  0E00               	movlw	0
  2643  000378  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2644  00037A  0EA8               	movlw	168
  2645  00037C  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2646  00037E  0E00               	movlw	0
  2647  000380  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2648  000382  0E08               	movlw	8
  2649  000384  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2650  000386  0ED8               	movlw	low setup_AD7147@StageBuffer
  2651  000388  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2652  00038A  0E00               	movlw	high setup_AD7147@StageBuffer
  2653  00038C  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2654  00038E  0E00               	movlw	0
  2655  000390  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2656  000392  0E00               	movlw	0
  2657  000394  6FC8               	movwf	write_AD7147@index& (0+255),b
  2658  000396  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2659  00039A  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2660  00039E  ECE7  F005         	call	_write_AD7147	;wreg free
  2661                           
  2662                           ;AD7147.c: 101: StageBuffer[0]=0xFFFF;
  2663  0003A2  0100               	movlb	0	; () banked
  2664  0003A4  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2665  0003A6  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;AD7147.c: 102: StageBuffer[1]=0x3FFF;
  2669  0003A8  0E3F               	movlw	63
  2670  0003AA  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2671  0003AC  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;AD7147.c: 103: StageBuffer[2]=0x0000;
  2675  0003AE  0E00               	movlw	0
  2676  0003B0  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2677  0003B2  0E00               	movlw	0
  2678  0003B4  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;AD7147.c: 104: StageBuffer[3]=0x2626;
  2682  0003B6  0E26               	movlw	38
  2683  0003B8  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2684  0003BA  0E26               	movlw	38
  2685  0003BC  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;AD7147.c: 105: StageBuffer[4]=4000;
  2689  0003BE  0E0F               	movlw	15
  2690  0003C0  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2691  0003C2  0EA0               	movlw	160
  2692  0003C4  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;AD7147.c: 106: StageBuffer[5]=2500;
  2696  0003C6  0E09               	movlw	9
  2697  0003C8  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2698  0003CA  0EC4               	movlw	196
  2699  0003CC  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2700                           
  2701                           ; BSR set to: 0
  2702                           ;AD7147.c: 107: StageBuffer[6]=4000;
  2703  0003CE  0E0F               	movlw	15
  2704  0003D0  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2705  0003D2  0EA0               	movlw	160
  2706  0003D4  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;AD7147.c: 108: StageBuffer[7]=4000;
  2710  0003D6  0E0F               	movlw	15
  2711  0003D8  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2712  0003DA  0EA0               	movlw	160
  2713  0003DC  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;AD7147.c: 109: write_AD7147(0x0B0, 8, StageBuffer, 0, cdc);
  2717  0003DE  0E00               	movlw	0
  2718  0003E0  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2719  0003E2  0EB0               	movlw	176
  2720  0003E4  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2721  0003E6  0E00               	movlw	0
  2722  0003E8  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2723  0003EA  0E08               	movlw	8
  2724  0003EC  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2725  0003EE  0ED8               	movlw	low setup_AD7147@StageBuffer
  2726  0003F0  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2727  0003F2  0E00               	movlw	high setup_AD7147@StageBuffer
  2728  0003F4  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2729  0003F6  0E00               	movlw	0
  2730  0003F8  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2731  0003FA  0E00               	movlw	0
  2732  0003FC  6FC8               	movwf	write_AD7147@index& (0+255),b
  2733  0003FE  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2734  000402  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2735  000406  ECE7  F005         	call	_write_AD7147	;wreg free
  2736                           
  2737                           ;AD7147.c: 114: StageBuffer[0]=0xFFFF;
  2738  00040A  0100               	movlb	0	; () banked
  2739  00040C  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2740  00040E  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;AD7147.c: 115: StageBuffer[1]=0x3FFF;
  2744  000410  0E3F               	movlw	63
  2745  000412  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2746  000414  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;AD7147.c: 116: StageBuffer[2]=0x0000;
  2750  000416  0E00               	movlw	0
  2751  000418  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2752  00041A  0E00               	movlw	0
  2753  00041C  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;AD7147.c: 117: StageBuffer[3]=0x2626;
  2757  00041E  0E26               	movlw	38
  2758  000420  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2759  000422  0E26               	movlw	38
  2760  000424  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;AD7147.c: 118: StageBuffer[4]=4000;
  2764  000426  0E0F               	movlw	15
  2765  000428  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2766  00042A  0EA0               	movlw	160
  2767  00042C  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;AD7147.c: 119: StageBuffer[5]=2500;
  2771  00042E  0E09               	movlw	9
  2772  000430  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2773  000432  0EC4               	movlw	196
  2774  000434  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;AD7147.c: 120: StageBuffer[6]=4000;
  2778  000436  0E0F               	movlw	15
  2779  000438  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2780  00043A  0EA0               	movlw	160
  2781  00043C  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;AD7147.c: 121: StageBuffer[7]=4000;
  2785  00043E  0E0F               	movlw	15
  2786  000440  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2787  000442  0EA0               	movlw	160
  2788  000444  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;AD7147.c: 122: write_AD7147(0x0B8, 8, StageBuffer, 0, cdc);
  2792  000446  0E00               	movlw	0
  2793  000448  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2794  00044A  0EB8               	movlw	184
  2795  00044C  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2796  00044E  0E00               	movlw	0
  2797  000450  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2798  000452  0E08               	movlw	8
  2799  000454  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2800  000456  0ED8               	movlw	low setup_AD7147@StageBuffer
  2801  000458  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2802  00045A  0E00               	movlw	high setup_AD7147@StageBuffer
  2803  00045C  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2804  00045E  0E00               	movlw	0
  2805  000460  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2806  000462  0E00               	movlw	0
  2807  000464  6FC8               	movwf	write_AD7147@index& (0+255),b
  2808  000466  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2809  00046A  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2810  00046E  ECE7  F005         	call	_write_AD7147	;wreg free
  2811                           
  2812                           ;AD7147.c: 127: StageBuffer[0]=0xFFFF;
  2813  000472  0100               	movlb	0	; () banked
  2814  000474  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2815  000476  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;AD7147.c: 128: StageBuffer[1]=0x3FFF;
  2819  000478  0E3F               	movlw	63
  2820  00047A  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2821  00047C  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;AD7147.c: 129: StageBuffer[2]=0x0000;
  2825  00047E  0E00               	movlw	0
  2826  000480  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2827  000482  0E00               	movlw	0
  2828  000484  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;AD7147.c: 130: StageBuffer[3]=0x2626;
  2832  000486  0E26               	movlw	38
  2833  000488  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2834  00048A  0E26               	movlw	38
  2835  00048C  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;AD7147.c: 131: StageBuffer[4]=4000;
  2839  00048E  0E0F               	movlw	15
  2840  000490  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2841  000492  0EA0               	movlw	160
  2842  000494  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2843                           
  2844                           ; BSR set to: 0
  2845                           ;AD7147.c: 132: StageBuffer[5]=2500;
  2846  000496  0E09               	movlw	9
  2847  000498  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2848  00049A  0EC4               	movlw	196
  2849  00049C  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;AD7147.c: 133: StageBuffer[6]=4000;
  2853  00049E  0E0F               	movlw	15
  2854  0004A0  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2855  0004A2  0EA0               	movlw	160
  2856  0004A4  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;AD7147.c: 134: StageBuffer[7]=4000;
  2860  0004A6  0E0F               	movlw	15
  2861  0004A8  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2862  0004AA  0EA0               	movlw	160
  2863  0004AC  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;AD7147.c: 135: write_AD7147(0x0C0, 8, StageBuffer, 0, cdc);
  2867  0004AE  0E00               	movlw	0
  2868  0004B0  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2869  0004B2  0EC0               	movlw	192
  2870  0004B4  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2871  0004B6  0E00               	movlw	0
  2872  0004B8  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2873  0004BA  0E08               	movlw	8
  2874  0004BC  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2875  0004BE  0ED8               	movlw	low setup_AD7147@StageBuffer
  2876  0004C0  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2877  0004C2  0E00               	movlw	high setup_AD7147@StageBuffer
  2878  0004C4  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2879  0004C6  0E00               	movlw	0
  2880  0004C8  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2881  0004CA  0E00               	movlw	0
  2882  0004CC  6FC8               	movwf	write_AD7147@index& (0+255),b
  2883  0004CE  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2884  0004D2  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2885  0004D6  ECE7  F005         	call	_write_AD7147	;wreg free
  2886                           
  2887                           ;AD7147.c: 140: StageBuffer[0]=0xFFFF;
  2888  0004DA  0100               	movlb	0	; () banked
  2889  0004DC  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2890  0004DE  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;AD7147.c: 141: StageBuffer[1]=0x3FFF;
  2894  0004E0  0E3F               	movlw	63
  2895  0004E2  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2896  0004E4  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;AD7147.c: 142: StageBuffer[2]=0x0000;
  2900  0004E6  0E00               	movlw	0
  2901  0004E8  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2902  0004EA  0E00               	movlw	0
  2903  0004EC  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;AD7147.c: 143: StageBuffer[3]=0x2626;
  2907  0004EE  0E26               	movlw	38
  2908  0004F0  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2909  0004F2  0E26               	movlw	38
  2910  0004F4  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;AD7147.c: 144: StageBuffer[4]=4000;
  2914  0004F6  0E0F               	movlw	15
  2915  0004F8  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2916  0004FA  0EA0               	movlw	160
  2917  0004FC  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;AD7147.c: 145: StageBuffer[5]=2500;
  2921  0004FE  0E09               	movlw	9
  2922  000500  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2923  000502  0EC4               	movlw	196
  2924  000504  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;AD7147.c: 146: StageBuffer[6]=4000;
  2928  000506  0E0F               	movlw	15
  2929  000508  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2930  00050A  0EA0               	movlw	160
  2931  00050C  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;AD7147.c: 147: StageBuffer[7]=4000;
  2935  00050E  0E0F               	movlw	15
  2936  000510  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2937  000512  0EA0               	movlw	160
  2938  000514  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2939                           
  2940                           ; BSR set to: 0
  2941                           ;AD7147.c: 148: write_AD7147(0x0C8, 8, StageBuffer, 0, cdc);
  2942  000516  0E00               	movlw	0
  2943  000518  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2944  00051A  0EC8               	movlw	200
  2945  00051C  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2946  00051E  0E00               	movlw	0
  2947  000520  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2948  000522  0E08               	movlw	8
  2949  000524  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2950  000526  0ED8               	movlw	low setup_AD7147@StageBuffer
  2951  000528  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2952  00052A  0E00               	movlw	high setup_AD7147@StageBuffer
  2953  00052C  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2954  00052E  0E00               	movlw	0
  2955  000530  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2956  000532  0E00               	movlw	0
  2957  000534  6FC8               	movwf	write_AD7147@index& (0+255),b
  2958  000536  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2959  00053A  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2960  00053E  ECE7  F005         	call	_write_AD7147	;wreg free
  2961                           
  2962                           ;AD7147.c: 153: StageBuffer[0]=0xFFFF;
  2963  000542  0100               	movlb	0	; () banked
  2964  000544  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2965  000546  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;AD7147.c: 154: StageBuffer[1]=0x3FFF;
  2969  000548  0E3F               	movlw	63
  2970  00054A  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2971  00054C  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;AD7147.c: 155: StageBuffer[2]=0x0000;
  2975  00054E  0E00               	movlw	0
  2976  000550  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2977  000552  0E00               	movlw	0
  2978  000554  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;AD7147.c: 156: StageBuffer[3]=0x2626;
  2982  000556  0E26               	movlw	38
  2983  000558  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2984  00055A  0E26               	movlw	38
  2985  00055C  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;AD7147.c: 157: StageBuffer[4]=4000;
  2989  00055E  0E0F               	movlw	15
  2990  000560  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2991  000562  0EA0               	movlw	160
  2992  000564  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;AD7147.c: 158: StageBuffer[5]=2500;
  2996  000566  0E09               	movlw	9
  2997  000568  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2998  00056A  0EC4               	movlw	196
  2999  00056C  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;AD7147.c: 159: StageBuffer[6]=4000;
  3003  00056E  0E0F               	movlw	15
  3004  000570  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3005  000572  0EA0               	movlw	160
  3006  000574  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;AD7147.c: 160: StageBuffer[7]=4000;
  3010  000576  0E0F               	movlw	15
  3011  000578  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3012  00057A  0EA0               	movlw	160
  3013  00057C  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;AD7147.c: 161: write_AD7147(0x0D0, 8, StageBuffer, 0, cdc);
  3017  00057E  0E00               	movlw	0
  3018  000580  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3019  000582  0ED0               	movlw	208
  3020  000584  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3021  000586  0E00               	movlw	0
  3022  000588  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3023  00058A  0E08               	movlw	8
  3024  00058C  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3025  00058E  0ED8               	movlw	low setup_AD7147@StageBuffer
  3026  000590  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3027  000592  0E00               	movlw	high setup_AD7147@StageBuffer
  3028  000594  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3029  000596  0E00               	movlw	0
  3030  000598  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3031  00059A  0E00               	movlw	0
  3032  00059C  6FC8               	movwf	write_AD7147@index& (0+255),b
  3033  00059E  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3034  0005A2  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3035  0005A6  ECE7  F005         	call	_write_AD7147	;wreg free
  3036                           
  3037                           ;AD7147.c: 166: StageBuffer[0]=0xFFFF;
  3038  0005AA  0100               	movlb	0	; () banked
  3039  0005AC  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  3040  0005AE  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;AD7147.c: 167: StageBuffer[1]=0x3FFF;
  3044  0005B0  0E3F               	movlw	63
  3045  0005B2  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  3046  0005B4  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;AD7147.c: 168: StageBuffer[2]=0x0000;
  3050  0005B6  0E00               	movlw	0
  3051  0005B8  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3052  0005BA  0E00               	movlw	0
  3053  0005BC  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;AD7147.c: 169: StageBuffer[3]=0x2626;
  3057  0005BE  0E26               	movlw	38
  3058  0005C0  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  3059  0005C2  0E26               	movlw	38
  3060  0005C4  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;AD7147.c: 170: StageBuffer[4]=4000;
  3064  0005C6  0E0F               	movlw	15
  3065  0005C8  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  3066  0005CA  0EA0               	movlw	160
  3067  0005CC  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;AD7147.c: 171: StageBuffer[5]=2500;
  3071  0005CE  0E09               	movlw	9
  3072  0005D0  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  3073  0005D2  0EC4               	movlw	196
  3074  0005D4  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;AD7147.c: 172: StageBuffer[6]=4000;
  3078  0005D6  0E0F               	movlw	15
  3079  0005D8  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3080  0005DA  0EA0               	movlw	160
  3081  0005DC  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;AD7147.c: 173: StageBuffer[7]=4000;
  3085  0005DE  0E0F               	movlw	15
  3086  0005E0  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3087  0005E2  0EA0               	movlw	160
  3088  0005E4  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;AD7147.c: 174: write_AD7147(0x0D8, 8, StageBuffer, 0, cdc);
  3092  0005E6  0E00               	movlw	0
  3093  0005E8  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3094  0005EA  0ED8               	movlw	216
  3095  0005EC  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3096  0005EE  0E00               	movlw	0
  3097  0005F0  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3098  0005F2  0E08               	movlw	8
  3099  0005F4  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3100  0005F6  0ED8               	movlw	low setup_AD7147@StageBuffer
  3101  0005F8  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3102  0005FA  0E00               	movlw	high setup_AD7147@StageBuffer
  3103  0005FC  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3104  0005FE  0E00               	movlw	0
  3105  000600  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3106  000602  0E00               	movlw	0
  3107  000604  6FC8               	movwf	write_AD7147@index& (0+255),b
  3108  000606  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3109  00060A  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3110  00060E  ECE7  F005         	call	_write_AD7147	;wreg free
  3111                           
  3112                           ;AD7147.c: 181: StageBuffer[0] = 0x00B2;
  3113  000612  0E00               	movlw	0
  3114  000614  0100               	movlb	0	; () banked
  3115  000616  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  3116  000618  0EB2               	movlw	178
  3117  00061A  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;AD7147.c: 182: write_AD7147(0x000, 1, StageBuffer, 0, cdc);
  3121  00061C  0E00               	movlw	0
  3122  00061E  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3123  000620  0E00               	movlw	0
  3124  000622  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3125  000624  0E00               	movlw	0
  3126  000626  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3127  000628  0E01               	movlw	1
  3128  00062A  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3129  00062C  0ED8               	movlw	low setup_AD7147@StageBuffer
  3130  00062E  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3131  000630  0E00               	movlw	high setup_AD7147@StageBuffer
  3132  000632  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3133  000634  0E00               	movlw	0
  3134  000636  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3135  000638  0E00               	movlw	0
  3136  00063A  6FC8               	movwf	write_AD7147@index& (0+255),b
  3137  00063C  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3138  000640  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3139  000644  ECE7  F005         	call	_write_AD7147	;wreg free
  3140                           
  3141                           ;AD7147.c: 185: read_AD7147(DataBuffer, 0x008, 3, cdc);
  3142  000648  C0D4  F0C2         	movff	setup_AD7147@DataBuffer,read_AD7147@DataBuffer
  3143  00064C  C0D5  F0C3         	movff	setup_AD7147@DataBuffer+1,read_AD7147@DataBuffer+1
  3144  000650  0E00               	movlw	0
  3145  000652  0100               	movlb	0	; () banked
  3146  000654  6FC5               	movwf	(read_AD7147@RegisterStartAddress+1)& (0+255),b
  3147  000656  0E08               	movlw	8
  3148  000658  6FC4               	movwf	read_AD7147@RegisterStartAddress& (0+255),b
  3149  00065A  0E00               	movlw	0
  3150  00065C  6FC7               	movwf	(read_AD7147@NumberOfRegisters+1)& (0+255),b
  3151  00065E  0E03               	movlw	3
  3152  000660  6FC6               	movwf	read_AD7147@NumberOfRegisters& (0+255),b
  3153  000662  C0D6  F0C8         	movff	setup_AD7147@cdc,read_AD7147@cdc
  3154  000666  C0D7  F0C9         	movff	setup_AD7147@cdc+1,read_AD7147@cdc+1
  3155  00066A  EC3E  F007         	call	_read_AD7147	;wreg free
  3156                           
  3157                           ;AD7147.c: 187: StageBuffer[2] = 0x3230;
  3158  00066E  0E32               	movlw	50
  3159  000670  0100               	movlb	0	; () banked
  3160  000672  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3161  000674  0E30               	movlw	48
  3162  000676  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;AD7147.c: 188: StageBuffer[3] = 0x0819;
  3166  000678  0E08               	movlw	8
  3167  00067A  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  3168  00067C  0E19               	movlw	25
  3169  00067E  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;AD7147.c: 189: StageBuffer[4] = 0x0832;
  3173  000680  0E08               	movlw	8
  3174  000682  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  3175  000684  0E32               	movlw	50
  3176  000686  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;AD7147.c: 190: StageBuffer[5] = 0x0000;
  3180  000688  0E00               	movlw	0
  3181  00068A  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  3182  00068C  0E00               	movlw	0
  3183  00068E  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;AD7147.c: 191: StageBuffer[6] = 0x0000;
  3187  000690  0E00               	movlw	0
  3188  000692  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3189  000694  0E00               	movlw	0
  3190  000696  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;AD7147.c: 192: StageBuffer[7] = 0x0008;
  3194  000698  0E00               	movlw	0
  3195  00069A  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3196  00069C  0E08               	movlw	8
  3197  00069E  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;AD7147.c: 193: write_AD7147(0x002, 6, StageBuffer, 2, cdc);
  3201  0006A0  0E00               	movlw	0
  3202  0006A2  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3203  0006A4  0E02               	movlw	2
  3204  0006A6  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3205  0006A8  0E00               	movlw	0
  3206  0006AA  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3207  0006AC  0E06               	movlw	6
  3208  0006AE  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3209  0006B0  0ED8               	movlw	low setup_AD7147@StageBuffer
  3210  0006B2  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3211  0006B4  0E00               	movlw	high setup_AD7147@StageBuffer
  3212  0006B6  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3213  0006B8  0E00               	movlw	0
  3214  0006BA  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3215  0006BC  0E02               	movlw	2
  3216  0006BE  6FC8               	movwf	write_AD7147@index& (0+255),b
  3217  0006C0  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3218  0006C4  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3219  0006C8  ECE7  F005         	call	_write_AD7147	;wreg free
  3220                           
  3221                           ;AD7147.c: 196: StageBuffer[1] = 0x000F;
  3222  0006CC  0E00               	movlw	0
  3223  0006CE  0100               	movlb	0	; () banked
  3224  0006D0  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  3225  0006D2  0E0F               	movlw	15
  3226  0006D4  6FDA               	movwf	(setup_AD7147@StageBuffer+2)& (0+255),b
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;AD7147.c: 197: write_AD7147(0x001, 1, StageBuffer, 1, cdc);
  3230  0006D6  0E00               	movlw	0
  3231  0006D8  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3232  0006DA  0E01               	movlw	1
  3233  0006DC  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3234  0006DE  0E00               	movlw	0
  3235  0006E0  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3236  0006E2  0E01               	movlw	1
  3237  0006E4  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3238  0006E6  0ED8               	movlw	low setup_AD7147@StageBuffer
  3239  0006E8  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3240  0006EA  0E00               	movlw	high setup_AD7147@StageBuffer
  3241  0006EC  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3242  0006EE  0E00               	movlw	0
  3243  0006F0  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3244  0006F2  0E01               	movlw	1
  3245  0006F4  6FC8               	movwf	write_AD7147@index& (0+255),b
  3246  0006F6  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3247  0006FA  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3248  0006FE  ECE7  F005         	call	_write_AD7147	;wreg free
  3249                           
  3250                           ;AD7147.c: 200: StageBuffer[2] = 0x4000;
  3251  000702  0E40               	movlw	64
  3252  000704  0100               	movlb	0	; () banked
  3253  000706  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3254  000708  0E00               	movlw	0
  3255  00070A  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;AD7147.c: 201: write_AD7147(0x002, 1, StageBuffer, 2, cdc);
  3259  00070C  0E00               	movlw	0
  3260  00070E  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3261  000710  0E02               	movlw	2
  3262  000712  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3263  000714  0E00               	movlw	0
  3264  000716  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3265  000718  0E01               	movlw	1
  3266  00071A  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3267  00071C  0ED8               	movlw	low setup_AD7147@StageBuffer
  3268  00071E  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3269  000720  0E00               	movlw	high setup_AD7147@StageBuffer
  3270  000722  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3271  000724  0E00               	movlw	0
  3272  000726  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3273  000728  0E02               	movlw	2
  3274  00072A  6FC8               	movwf	write_AD7147@index& (0+255),b
  3275  00072C  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3276  000730  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3277  000734  ECE7  F005         	call	_write_AD7147	;wreg free
  3278                           
  3279                           ;AD7147.c: 204: read_AD7147(DataBuffer, 0x008, 3, cdc);
  3280  000738  C0D4  F0C2         	movff	setup_AD7147@DataBuffer,read_AD7147@DataBuffer
  3281  00073C  C0D5  F0C3         	movff	setup_AD7147@DataBuffer+1,read_AD7147@DataBuffer+1
  3282  000740  0E00               	movlw	0
  3283  000742  0100               	movlb	0	; () banked
  3284  000744  6FC5               	movwf	(read_AD7147@RegisterStartAddress+1)& (0+255),b
  3285  000746  0E08               	movlw	8
  3286  000748  6FC4               	movwf	read_AD7147@RegisterStartAddress& (0+255),b
  3287  00074A  0E00               	movlw	0
  3288  00074C  6FC7               	movwf	(read_AD7147@NumberOfRegisters+1)& (0+255),b
  3289  00074E  0E03               	movlw	3
  3290  000750  6FC6               	movwf	read_AD7147@NumberOfRegisters& (0+255),b
  3291  000752  C0D6  F0C8         	movff	setup_AD7147@cdc,read_AD7147@cdc
  3292  000756  C0D7  F0C9         	movff	setup_AD7147@cdc+1,read_AD7147@cdc+1
  3293  00075A  EC3E  F007         	call	_read_AD7147	;wreg free
  3294  00075E  0012               	return		;funcret
  3295  000760                     __end_of_setup_AD7147:
  3296                           	opt stack 0
  3297                           tblptru	equ	0xFF8
  3298                           tblptrh	equ	0xFF7
  3299                           tblptrl	equ	0xFF6
  3300                           tablat	equ	0xFF5
  3301                           postinc0	equ	0xFEE
  3302                           wreg	equ	0xFE8
  3303                           plusw1	equ	0xFE3
  3304                           postinc2	equ	0xFDE
  3305                           postdec2	equ	0xFDD
  3306                           plusw2	equ	0xFDB
  3307                           fsr2h	equ	0xFDA
  3308                           fsr2l	equ	0xFD9
  3309                           status	equ	0xFD8
  3310                           
  3311 ;; *************** function _write_AD7147 *****************
  3312 ;; Defined at:
  3313 ;;		line 208 in file "AD7147.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  RegisterStar    2   22[BANK0 ] unsigned int 
  3316 ;;  NumberOfRegi    2   24[BANK0 ] unsigned int 
  3317 ;;  OutputBuffer    2   26[BANK0 ] PTR unsigned int 
  3318 ;;		 -> setup_AD7147@StageBuffer(16), 
  3319 ;;  index           2   28[BANK0 ] unsigned int 
  3320 ;;  cdc             2   30[BANK0 ] unsigned int 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  i               2   38[BANK0 ] unsigned int 
  3323 ;;  Data_Value      2   36[BANK0 ] unsigned int 
  3324 ;;  Register_Val    2   34[BANK0 ] unsigned int 
  3325 ;; Return value:  Size  Location     Type
  3326 ;;                  1    wreg      void 
  3327 ;; Registers used:
  3328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3329 ;; Tracked objects:
  3330 ;;		On entry : 0/0
  3331 ;;		On exit  : 0/0
  3332 ;;		Unchanged: 0/0
  3333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3334 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3335 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3337 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3338 ;;Total ram usage:       18 bytes
  3339 ;; Hardware stack levels used:    1
  3340 ;; Hardware stack levels required when called:    4
  3341 ;; This function calls:
  3342 ;;		_get_CDC
  3343 ;;		_w32_spi
  3344 ;; This function is called by:
  3345 ;;		_setup_AD7147
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348                           
  3349                           	psect	text12
  3350  000BCE                     __ptext12:
  3351                           	opt stack 0
  3352  000BCE                     _write_AD7147:
  3353                           	opt stack 25
  3354                           
  3355                           ;AD7147.c: 210: get_CDC(cdc,0);
  3356                           
  3357                           ;incstack = 0
  3358  000BCE  C0CA  F0AC         	movff	write_AD7147@cdc,get_CDC@cdc
  3359  000BD2  C0CB  F0AD         	movff	write_AD7147@cdc+1,get_CDC@cdc+1
  3360  000BD6  0E00               	movlw	0
  3361  000BD8  0100               	movlb	0	; () banked
  3362  000BDA  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3363  000BDC  0E00               	movlw	0
  3364  000BDE  6FAE               	movwf	get_CDC@state& (0+255),b
  3365  000BE0  EC84  F009         	call	_get_CDC	;wreg free
  3366                           
  3367                           ;AD7147.c: 211: unsigned int Register_Value = 0xE000 + RegisterStartAddress;
  3368  000BE4  0E00               	movlw	0
  3369  000BE6  0100               	movlb	0	; () banked
  3370  000BE8  25C2               	addwf	write_AD7147@RegisterStartAddress& (0+255),w,b
  3371  000BEA  6FCE               	movwf	write_AD7147@Register_Value& (0+255),b
  3372  000BEC  0EE0               	movlw	224
  3373  000BEE  21C3               	addwfc	(write_AD7147@RegisterStartAddress+1)& (0+255),w,b
  3374  000BF0  6FCF               	movwf	(write_AD7147@Register_Value+1)& (0+255),b
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;AD7147.c: 212: unsigned int Data_Value = 0;
  3378  000BF2  0E00               	movlw	0
  3379  000BF4  6FD1               	movwf	(write_AD7147@Data_Value+1)& (0+255),b
  3380  000BF6  0E00               	movlw	0
  3381  000BF8  6FD0               	movwf	write_AD7147@Data_Value& (0+255),b
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;AD7147.c: 213: for (unsigned int i=0; i<NumberOfRegisters; i++)
  3385  000BFA  0E00               	movlw	0
  3386  000BFC  6FD3               	movwf	(write_AD7147@i+1)& (0+255),b
  3387  000BFE  0E00               	movlw	0
  3388  000C00  6FD2               	movwf	write_AD7147@i& (0+255),b
  3389  000C02  D022               	goto	l26
  3390  000C04                     
  3391                           ; BSR set to: 0
  3392                           ;AD7147.c: 214: {
  3393                           ;AD7147.c: 215: Data_Value = OutputBuffer[index+i];
  3394                           
  3395                           ; BSR set to: 0
  3396  000C04  51D2               	movf	write_AD7147@i& (0+255),w,b
  3397  000C06  25C8               	addwf	write_AD7147@index& (0+255),w,b
  3398  000C08  6FCC               	movwf	??_write_AD7147& (0+255),b
  3399  000C0A  51D3               	movf	(write_AD7147@i+1)& (0+255),w,b
  3400  000C0C  21C9               	addwfc	(write_AD7147@index+1)& (0+255),w,b
  3401  000C0E  6FCD               	movwf	(??_write_AD7147+1)& (0+255),b
  3402  000C10  90D8               	bcf	status,0,c
  3403  000C12  37CC               	rlcf	??_write_AD7147& (0+255),f,b
  3404  000C14  37CD               	rlcf	(??_write_AD7147+1)& (0+255),f,b
  3405  000C16  51CC               	movf	??_write_AD7147& (0+255),w,b
  3406  000C18  25C6               	addwf	write_AD7147@OutputBuffer& (0+255),w,b
  3407  000C1A  6ED9               	movwf	fsr2l,c
  3408  000C1C  51CD               	movf	(??_write_AD7147+1)& (0+255),w,b
  3409  000C1E  21C7               	addwfc	(write_AD7147@OutputBuffer+1)& (0+255),w,b
  3410  000C20  6EDA               	movwf	fsr2h,c
  3411  000C22  CFDE F0D0          	movff	postinc2,write_AD7147@Data_Value
  3412  000C26  CFDD F0D1          	movff	postdec2,write_AD7147@Data_Value+1
  3413                           
  3414                           ; BSR set to: 0
  3415                           ;AD7147.c: 216: w32_spi(Register_Value+i,Data_Value);
  3416  000C2A  51D2               	movf	write_AD7147@i& (0+255),w,b
  3417  000C2C  25CE               	addwf	write_AD7147@Register_Value& (0+255),w,b
  3418  000C2E  6FAC               	movwf	w32_spi@address& (0+255),b
  3419  000C30  51D3               	movf	(write_AD7147@i+1)& (0+255),w,b
  3420  000C32  21CF               	addwfc	(write_AD7147@Register_Value+1)& (0+255),w,b
  3421  000C34  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  3422  000C36  C0D0  F0AE         	movff	write_AD7147@Data_Value,w32_spi@data
  3423  000C3A  C0D1  F0AF         	movff	write_AD7147@Data_Value+1,w32_spi@data+1
  3424  000C3E  EC39  F008         	call	_w32_spi	;wreg free
  3425  000C42  0100               	movlb	0	; () banked
  3426  000C44  4BD2               	infsnz	write_AD7147@i& (0+255),f,b
  3427  000C46  2BD3               	incf	(write_AD7147@i+1)& (0+255),f,b
  3428  000C48                     l26:
  3429                           
  3430                           ; BSR set to: 0
  3431                           
  3432                           ; BSR set to: 0
  3433  000C48  51C4               	movf	write_AD7147@NumberOfRegisters& (0+255),w,b
  3434  000C4A  5DD2               	subwf	write_AD7147@i& (0+255),w,b
  3435  000C4C  51C5               	movf	(write_AD7147@NumberOfRegisters+1)& (0+255),w,b
  3436  000C4E  59D3               	subwfb	(write_AD7147@i+1)& (0+255),w,b
  3437  000C50  A0D8               	btfss	status,0,c
  3438  000C52  D7D8               	goto	l27
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;AD7147.c: 217: }
  3442                           ;AD7147.c: 218: get_CDC(cdc,1);
  3443                           
  3444                           ; BSR set to: 0
  3445  000C54  C0CA  F0AC         	movff	write_AD7147@cdc,get_CDC@cdc
  3446  000C58  C0CB  F0AD         	movff	write_AD7147@cdc+1,get_CDC@cdc+1
  3447  000C5C  0E00               	movlw	0
  3448  000C5E  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3449  000C60  0E01               	movlw	1
  3450  000C62  6FAE               	movwf	get_CDC@state& (0+255),b
  3451  000C64  EC84  F009         	call	_get_CDC	;wreg free
  3452  000C68  0012               	return		;funcret
  3453  000C6A                     __end_of_write_AD7147:
  3454                           	opt stack 0
  3455                           tblptru	equ	0xFF8
  3456                           tblptrh	equ	0xFF7
  3457                           tblptrl	equ	0xFF6
  3458                           tablat	equ	0xFF5
  3459                           postinc0	equ	0xFEE
  3460                           wreg	equ	0xFE8
  3461                           plusw1	equ	0xFE3
  3462                           postinc2	equ	0xFDE
  3463                           postdec2	equ	0xFDD
  3464                           plusw2	equ	0xFDB
  3465                           fsr2h	equ	0xFDA
  3466                           fsr2l	equ	0xFD9
  3467                           status	equ	0xFD8
  3468                           
  3469 ;; *************** function _read_AD7147 *****************
  3470 ;; Defined at:
  3471 ;;		line 221 in file "AD7147.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;  DataBuffer      2   22[BANK0 ] PTR unsigned int 
  3474 ;;		 -> interrupt_values_cdc2(6), interrupt_values_cdc1(6), 
  3475 ;;  RegisterStar    2   24[BANK0 ] unsigned int 
  3476 ;;  NumberOfRegi    2   26[BANK0 ] unsigned int 
  3477 ;;  cdc             2   28[BANK0 ] unsigned int 
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;  i               2   32[BANK0 ] unsigned int 
  3480 ;;  Register_Val    2   30[BANK0 ] unsigned int 
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  1    wreg      void 
  3483 ;; Registers used:
  3484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3490 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3491 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3493 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3494 ;;Total ram usage:       12 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    4
  3497 ;; This function calls:
  3498 ;;		_get_CDC
  3499 ;;		_w16_r16_spi
  3500 ;; This function is called by:
  3501 ;;		_setup_AD7147
  3502 ;;		_main
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text13
  3507  000E7C                     __ptext13:
  3508                           	opt stack 0
  3509  000E7C                     _read_AD7147:
  3510                           	opt stack 25
  3511                           
  3512                           ;AD7147.c: 223: get_CDC(cdc,0);
  3513                           
  3514                           ;incstack = 0
  3515  000E7C  C0C8  F0AC         	movff	read_AD7147@cdc,get_CDC@cdc
  3516  000E80  C0C9  F0AD         	movff	read_AD7147@cdc+1,get_CDC@cdc+1
  3517  000E84  0E00               	movlw	0
  3518  000E86  0100               	movlb	0	; () banked
  3519  000E88  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3520  000E8A  0E00               	movlw	0
  3521  000E8C  6FAE               	movwf	get_CDC@state& (0+255),b
  3522  000E8E  EC84  F009         	call	_get_CDC	;wreg free
  3523                           
  3524                           ;AD7147.c: 224: unsigned int Register_Values = 0xE400 + RegisterStartAddress;
  3525  000E92  0E00               	movlw	0
  3526  000E94  0100               	movlb	0	; () banked
  3527  000E96  25C4               	addwf	read_AD7147@RegisterStartAddress& (0+255),w,b
  3528  000E98  6FCA               	movwf	read_AD7147@Register_Values& (0+255),b
  3529  000E9A  0EE4               	movlw	228
  3530  000E9C  21C5               	addwfc	(read_AD7147@RegisterStartAddress+1)& (0+255),w,b
  3531  000E9E  6FCB               	movwf	(read_AD7147@Register_Values+1)& (0+255),b
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;AD7147.c: 225: for (unsigned int i=0; i<NumberOfRegisters; i++)
  3535  000EA0  0E00               	movlw	0
  3536  000EA2  6FCD               	movwf	(read_AD7147@i+1)& (0+255),b
  3537  000EA4  0E00               	movlw	0
  3538  000EA6  6FCC               	movwf	read_AD7147@i& (0+255),b
  3539  000EA8  D018               	goto	l32
  3540  000EAA                     
  3541                           ; BSR set to: 0
  3542                           ;AD7147.c: 226: {
  3543                           ;AD7147.c: 227: DataBuffer[i]=w16_r16_spi(Register_Values+i);
  3544                           
  3545                           ; BSR set to: 0
  3546  000EAA  51CC               	movf	read_AD7147@i& (0+255),w,b
  3547  000EAC  25CA               	addwf	read_AD7147@Register_Values& (0+255),w,b
  3548  000EAE  6FAC               	movwf	w16_r16_spi@address& (0+255),b
  3549  000EB0  51CD               	movf	(read_AD7147@i+1)& (0+255),w,b
  3550  000EB2  21CB               	addwfc	(read_AD7147@Register_Values+1)& (0+255),w,b
  3551  000EB4  6FAD               	movwf	(w16_r16_spi@address+1)& (0+255),b
  3552  000EB6  EC35  F006         	call	_w16_r16_spi	;wreg free
  3553  000EBA  90D8               	bcf	status,0,c
  3554  000EBC  0100               	movlb	0	; () banked
  3555  000EBE  35CC               	rlcf	read_AD7147@i& (0+255),w,b
  3556  000EC0  6ED9               	movwf	fsr2l,c
  3557  000EC2  35CD               	rlcf	(read_AD7147@i+1)& (0+255),w,b
  3558  000EC4  6EDA               	movwf	fsr2h,c
  3559  000EC6  51C2               	movf	read_AD7147@DataBuffer& (0+255),w,b
  3560  000EC8  26D9               	addwf	fsr2l,f,c
  3561  000ECA  51C3               	movf	(read_AD7147@DataBuffer+1)& (0+255),w,b
  3562  000ECC  22DA               	addwfc	fsr2h,f,c
  3563  000ECE  C0AC  FFDE         	movff	?_w16_r16_spi,postinc2
  3564  000ED2  C0AD  FFDD         	movff	?_w16_r16_spi+1,postdec2
  3565                           
  3566                           ; BSR set to: 0
  3567  000ED6  4BCC               	infsnz	read_AD7147@i& (0+255),f,b
  3568  000ED8  2BCD               	incf	(read_AD7147@i+1)& (0+255),f,b
  3569  000EDA                     l32:
  3570                           
  3571                           ; BSR set to: 0
  3572                           
  3573                           ; BSR set to: 0
  3574  000EDA  51C6               	movf	read_AD7147@NumberOfRegisters& (0+255),w,b
  3575  000EDC  5DCC               	subwf	read_AD7147@i& (0+255),w,b
  3576  000EDE  51C7               	movf	(read_AD7147@NumberOfRegisters+1)& (0+255),w,b
  3577  000EE0  59CD               	subwfb	(read_AD7147@i+1)& (0+255),w,b
  3578  000EE2  A0D8               	btfss	status,0,c
  3579  000EE4  D7E2               	goto	l33
  3580                           
  3581                           ; BSR set to: 0
  3582                           ;AD7147.c: 228: }
  3583                           ;AD7147.c: 229: get_CDC(cdc,1);
  3584                           
  3585                           ; BSR set to: 0
  3586  000EE6  C0C8  F0AC         	movff	read_AD7147@cdc,get_CDC@cdc
  3587  000EEA  C0C9  F0AD         	movff	read_AD7147@cdc+1,get_CDC@cdc+1
  3588  000EEE  0E00               	movlw	0
  3589  000EF0  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3590  000EF2  0E01               	movlw	1
  3591  000EF4  6FAE               	movwf	get_CDC@state& (0+255),b
  3592  000EF6  EC84  F009         	call	_get_CDC	;wreg free
  3593  000EFA  0012               	return		;funcret
  3594  000EFC                     __end_of_read_AD7147:
  3595                           	opt stack 0
  3596                           tblptru	equ	0xFF8
  3597                           tblptrh	equ	0xFF7
  3598                           tblptrl	equ	0xFF6
  3599                           tablat	equ	0xFF5
  3600                           postinc0	equ	0xFEE
  3601                           wreg	equ	0xFE8
  3602                           plusw1	equ	0xFE3
  3603                           postinc2	equ	0xFDE
  3604                           postdec2	equ	0xFDD
  3605                           plusw2	equ	0xFDB
  3606                           fsr2h	equ	0xFDA
  3607                           fsr2l	equ	0xFD9
  3608                           status	equ	0xFD8
  3609                           
  3610 ;; *************** function _read_sensor *****************
  3611 ;; Defined at:
  3612 ;;		line 232 in file "AD7147.c"
  3613 ;; Parameters:    Size  Location     Type
  3614 ;;  sensor_value    2   22[BANK0 ] PTR unsigned int 
  3615 ;;		 -> sensor_values(48), 
  3616 ;;  sensor          2   24[BANK0 ] unsigned int 
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;  cdc_sensor      2   32[BANK0 ] unsigned int 
  3619 ;;  register1       2   30[BANK0 ] unsigned int 
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  1    wreg      void 
  3622 ;; Registers used:
  3623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3629 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3630 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3631 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3632 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3633 ;;Total ram usage:       12 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:    5
  3636 ;; This function calls:
  3637 ;;		_sensor_CDC
  3638 ;;		_w16_r16_spi
  3639 ;; This function is called by:
  3640 ;;		_main
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           	psect	text14
  3645  000B2C                     __ptext14:
  3646                           	opt stack 0
  3647  000B2C                     _read_sensor:
  3648                           	opt stack 25
  3649                           
  3650                           ;AD7147.c: 234: unsigned int cdc_sensor = 0;
  3651                           
  3652                           ;incstack = 0
  3653  000B2C  0E00               	movlw	0
  3654  000B2E  0100               	movlb	0	; () banked
  3655  000B30  6FCD               	movwf	(read_sensor@cdc_sensor+1)& (0+255),b
  3656  000B32  0E00               	movlw	0
  3657  000B34  6FCC               	movwf	read_sensor@cdc_sensor& (0+255),b
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;AD7147.c: 235: if (sensor > 12)
  3661  000B36  51C5               	movf	(read_sensor@sensor+1)& (0+255),w,b
  3662  000B38  E104               	bnz	u1000
  3663  000B3A  0E0D               	movlw	13
  3664  000B3C  5DC4               	subwf	read_sensor@sensor& (0+255),w,b
  3665  000B3E  A0D8               	btfss	status,0,c
  3666  000B40  D007               	goto	l38
  3667  000B42                     u1000:
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;AD7147.c: 236: {
  3671                           ;AD7147.c: 237: cdc_sensor = sensor - 12;
  3672  000B42  0EF4               	movlw	244
  3673  000B44  25C4               	addwf	read_sensor@sensor& (0+255),w,b
  3674  000B46  6FCC               	movwf	read_sensor@cdc_sensor& (0+255),b
  3675  000B48  0EFF               	movlw	255
  3676  000B4A  21C5               	addwfc	(read_sensor@sensor+1)& (0+255),w,b
  3677  000B4C  6FCD               	movwf	(read_sensor@cdc_sensor+1)& (0+255),b
  3678                           
  3679                           ;AD7147.c: 238: }
  3680  000B4E  D004               	goto	l39
  3681  000B50                     l38:
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;AD7147.c: 239: else
  3685                           ;AD7147.c: 240: {
  3686                           ;AD7147.c: 241: cdc_sensor = sensor;
  3687  000B50  C0C4  F0CC         	movff	read_sensor@sensor,read_sensor@cdc_sensor
  3688  000B54  C0C5  F0CD         	movff	read_sensor@sensor+1,read_sensor@cdc_sensor+1
  3689  000B58                     l39:
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;AD7147.c: 242: }
  3693                           ;AD7147.c: 243: unsigned int register1 = 0xE400 + 0x00A + cdc_sensor;
  3694                           
  3695                           ; BSR set to: 0
  3696  000B58  0E0A               	movlw	10
  3697  000B5A  25CC               	addwf	read_sensor@cdc_sensor& (0+255),w,b
  3698  000B5C  6FCA               	movwf	read_sensor@register1& (0+255),b
  3699  000B5E  0EE4               	movlw	228
  3700  000B60  21CD               	addwfc	(read_sensor@cdc_sensor+1)& (0+255),w,b
  3701  000B62  6FCB               	movwf	(read_sensor@register1+1)& (0+255),b
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;AD7147.c: 244: sensor_CDC(sensor, 0);
  3705  000B64  C0C4  F0B0         	movff	read_sensor@sensor,sensor_CDC@sensor
  3706  000B68  C0C5  F0B1         	movff	read_sensor@sensor+1,sensor_CDC@sensor+1
  3707  000B6C  0E00               	movlw	0
  3708  000B6E  6FB3               	movwf	(sensor_CDC@state+1)& (0+255),b
  3709  000B70  0E00               	movlw	0
  3710  000B72  6FB2               	movwf	sensor_CDC@state& (0+255),b
  3711  000B74  EC36  F009         	call	_sensor_CDC	;wreg free
  3712                           
  3713                           ;AD7147.c: 245: sensor_values[sensor-1] = w16_r16_spi(register1);
  3714  000B78  C0CA  F0AC         	movff	read_sensor@register1,w16_r16_spi@address
  3715  000B7C  C0CB  F0AD         	movff	read_sensor@register1+1,w16_r16_spi@address+1
  3716  000B80  EC35  F006         	call	_w16_r16_spi	;wreg free
  3717  000B84  0EFE               	movlw	254
  3718  000B86  0100               	movlb	0	; () banked
  3719  000B88  6FC6               	movwf	??_read_sensor& (0+255),b
  3720  000B8A  0EFF               	movlw	255
  3721  000B8C  6FC7               	movwf	(??_read_sensor+1)& (0+255),b
  3722  000B8E  C0C4  F0C8         	movff	read_sensor@sensor,??_read_sensor+2
  3723  000B92  C0C5  F0C9         	movff	read_sensor@sensor+1,??_read_sensor+3
  3724  000B96  90D8               	bcf	status,0,c
  3725  000B98  37C8               	rlcf	(??_read_sensor+2)& (0+255),f,b
  3726  000B9A  37C9               	rlcf	(??_read_sensor+3)& (0+255),f,b
  3727  000B9C  51C6               	movf	??_read_sensor& (0+255),w,b
  3728  000B9E  27C8               	addwf	(??_read_sensor+2)& (0+255),f,b
  3729  000BA0  51C7               	movf	(??_read_sensor+1)& (0+255),w,b
  3730  000BA2  23C9               	addwfc	(??_read_sensor+3)& (0+255),f,b
  3731  000BA4  51C8               	movf	(??_read_sensor+2)& (0+255),w,b
  3732  000BA6  25C2               	addwf	read_sensor@sensor_values& (0+255),w,b
  3733  000BA8  6ED9               	movwf	fsr2l,c
  3734  000BAA  51C9               	movf	(??_read_sensor+3)& (0+255),w,b
  3735  000BAC  21C3               	addwfc	(read_sensor@sensor_values+1)& (0+255),w,b
  3736  000BAE  6EDA               	movwf	fsr2h,c
  3737  000BB0  C0AC  FFDE         	movff	?_w16_r16_spi,postinc2
  3738  000BB4  C0AD  FFDD         	movff	?_w16_r16_spi+1,postdec2
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;AD7147.c: 246: sensor_CDC(sensor, 1);
  3742  000BB8  C0C4  F0B0         	movff	read_sensor@sensor,sensor_CDC@sensor
  3743  000BBC  C0C5  F0B1         	movff	read_sensor@sensor+1,sensor_CDC@sensor+1
  3744  000BC0  0E00               	movlw	0
  3745  000BC2  6FB3               	movwf	(sensor_CDC@state+1)& (0+255),b
  3746  000BC4  0E01               	movlw	1
  3747  000BC6  6FB2               	movwf	sensor_CDC@state& (0+255),b
  3748  000BC8  EC36  F009         	call	_sensor_CDC	;wreg free
  3749  000BCC  0012               	return		;funcret
  3750  000BCE                     __end_of_read_sensor:
  3751                           	opt stack 0
  3752                           tblptru	equ	0xFF8
  3753                           tblptrh	equ	0xFF7
  3754                           tblptrl	equ	0xFF6
  3755                           tablat	equ	0xFF5
  3756                           postinc0	equ	0xFEE
  3757                           wreg	equ	0xFE8
  3758                           plusw1	equ	0xFE3
  3759                           postinc2	equ	0xFDE
  3760                           postdec2	equ	0xFDD
  3761                           plusw2	equ	0xFDB
  3762                           fsr2h	equ	0xFDA
  3763                           fsr2l	equ	0xFD9
  3764                           status	equ	0xFD8
  3765                           
  3766 ;; *************** function _sensor_CDC *****************
  3767 ;; Defined at:
  3768 ;;		line 291 in file "AD7147.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;  sensor          2    4[BANK0 ] unsigned int 
  3771 ;;  state           2    6[BANK0 ] unsigned int 
  3772 ;; Auto vars:     Size  Location     Type
  3773 ;;		None
  3774 ;; Return value:  Size  Location     Type
  3775 ;;                  1    wreg      void 
  3776 ;; Registers used:
  3777 ;;		wreg, status,2, status,0, cstack
  3778 ;; Tracked objects:
  3779 ;;		On entry : 0/0
  3780 ;;		On exit  : 0/0
  3781 ;;		Unchanged: 0/0
  3782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3783 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3786 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3787 ;;Total ram usage:        4 bytes
  3788 ;; Hardware stack levels used:    1
  3789 ;; Hardware stack levels required when called:    4
  3790 ;; This function calls:
  3791 ;;		_get_CDC
  3792 ;; This function is called by:
  3793 ;;		_read_sensor
  3794 ;;		_read_sensors
  3795 ;; This function uses a non-reentrant model
  3796 ;;
  3797                           
  3798                           	psect	text15
  3799  00126C                     __ptext15:
  3800                           	opt stack 0
  3801  00126C                     _sensor_CDC:
  3802                           	opt stack 25
  3803                           
  3804                           ;AD7147.c: 295: if (sensor > 12)
  3805                           
  3806                           ;incstack = 0
  3807  00126C  0100               	movlb	0	; () banked
  3808  00126E  51B1               	movf	(sensor_CDC@sensor+1)& (0+255),w,b
  3809  001270  E104               	bnz	u870
  3810  001272  0E0D               	movlw	13
  3811  001274  5DB0               	subwf	sensor_CDC@sensor& (0+255),w,b
  3812  001276  A0D8               	btfss	status,0,c
  3813  001278  D00B               	goto	l61
  3814  00127A                     u870:
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;AD7147.c: 296: {
  3818                           ;AD7147.c: 297: get_CDC(2,state);
  3819  00127A  0E00               	movlw	0
  3820  00127C  6FAD               	movwf	(get_CDC@cdc+1)& (0+255),b
  3821  00127E  0E02               	movlw	2
  3822  001280  6FAC               	movwf	get_CDC@cdc& (0+255),b
  3823  001282  C0B2  F0AE         	movff	sensor_CDC@state,get_CDC@state
  3824  001286  C0B3  F0AF         	movff	sensor_CDC@state+1,get_CDC@state+1
  3825  00128A  EC84  F009         	call	_get_CDC	;wreg free
  3826                           
  3827                           ;AD7147.c: 298: }
  3828  00128E  0012               	return	
  3829  001290                     l61:
  3830                           
  3831                           ;AD7147.c: 299: else
  3832                           ;AD7147.c: 300: {
  3833                           ;AD7147.c: 301: get_CDC(1,state);
  3834  001290  0E00               	movlw	0
  3835  001292  0100               	movlb	0	; () banked
  3836  001294  6FAD               	movwf	(get_CDC@cdc+1)& (0+255),b
  3837  001296  0E01               	movlw	1
  3838  001298  6FAC               	movwf	get_CDC@cdc& (0+255),b
  3839  00129A  C0B2  F0AE         	movff	sensor_CDC@state,get_CDC@state
  3840  00129E  C0B3  F0AF         	movff	sensor_CDC@state+1,get_CDC@state+1
  3841  0012A2  EC84  F009         	call	_get_CDC	;wreg free
  3842  0012A6  0012               	return	
  3843  0012A8                     __end_of_sensor_CDC:
  3844                           	opt stack 0
  3845                           tblptru	equ	0xFF8
  3846                           tblptrh	equ	0xFF7
  3847                           tblptrl	equ	0xFF6
  3848                           tablat	equ	0xFF5
  3849                           postinc0	equ	0xFEE
  3850                           wreg	equ	0xFE8
  3851                           plusw1	equ	0xFE3
  3852                           postinc2	equ	0xFDE
  3853                           postdec2	equ	0xFDD
  3854                           plusw2	equ	0xFDB
  3855                           fsr2h	equ	0xFDA
  3856                           fsr2l	equ	0xFD9
  3857                           status	equ	0xFD8
  3858                           
  3859 ;; *************** function _memset *****************
  3860 ;; Defined at:
  3861 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\memset.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;  p1              2    0[BANK0 ] PTR void 
  3864 ;;		 -> avail_sensors(48), 
  3865 ;;  c               2    2[BANK0 ] int 
  3866 ;;  n               2    4[BANK0 ] unsigned int 
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;  p               2    6[BANK0 ] PTR unsigned char 
  3869 ;;		 -> avail_sensors(48), 
  3870 ;; Return value:  Size  Location     Type
  3871 ;;                  2    0[BANK0 ] PTR void 
  3872 ;; Registers used:
  3873 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3874 ;; Tracked objects:
  3875 ;;		On entry : 0/0
  3876 ;;		On exit  : 0/0
  3877 ;;		Unchanged: 0/0
  3878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3879 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3880 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3882 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3883 ;;Total ram usage:        8 bytes
  3884 ;; Hardware stack levels used:    1
  3885 ;; Hardware stack levels required when called:    3
  3886 ;; This function calls:
  3887 ;;		Nothing
  3888 ;; This function is called by:
  3889 ;;		_main
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893                           	psect	text16
  3894  0012D8                     __ptext16:
  3895                           	opt stack 0
  3896  0012D8                     _memset:
  3897                           	opt stack 27
  3898                           
  3899                           ;incstack = 0
  3900  0012D8  C0AC  F0B2         	movff	memset@p1,memset@p
  3901  0012DC  C0AD  F0B3         	movff	memset@p1+1,memset@p+1
  3902  0012E0  D009               	goto	l837
  3903  0012E2                     l2349:
  3904  0012E2  C0B2  FFD9         	movff	memset@p,fsr2l
  3905  0012E6  C0B3  FFDA         	movff	memset@p+1,fsr2h
  3906  0012EA  C0AE  FFDF         	movff	memset@c,indf2
  3907  0012EE  0100               	movlb	0	; () banked
  3908  0012F0  4BB2               	infsnz	memset@p& (0+255),f,b
  3909  0012F2  2BB3               	incf	(memset@p+1)& (0+255),f,b
  3910  0012F4                     l837:
  3911                           
  3912                           ; BSR set to: 0
  3913  0012F4  0100               	movlb	0	; () banked
  3914  0012F6  07B0               	decf	memset@n& (0+255),f,b
  3915  0012F8  A0D8               	btfss	status,0,c
  3916  0012FA  07B1               	decf	(memset@n+1)& (0+255),f,b
  3917  0012FC  29B0               	incf	memset@n& (0+255),w,b
  3918  0012FE  E1F1               	bnz	l2349
  3919  001300  29B1               	incf	(memset@n+1)& (0+255),w,b
  3920  001302  B4D8               	btfsc	status,2,c
  3921  001304  0012               	return	
  3922  001306  D7ED               	goto	l838
  3923  001308                     __end_of_memset:
  3924                           	opt stack 0
  3925                           tblptru	equ	0xFF8
  3926                           tblptrh	equ	0xFF7
  3927                           tblptrl	equ	0xFF6
  3928                           tablat	equ	0xFF5
  3929                           postinc0	equ	0xFEE
  3930                           wreg	equ	0xFE8
  3931                           plusw1	equ	0xFE3
  3932                           indf2	equ	0xFDF
  3933                           postinc2	equ	0xFDE
  3934                           postdec2	equ	0xFDD
  3935                           plusw2	equ	0xFDB
  3936                           fsr2h	equ	0xFDA
  3937                           fsr2l	equ	0xFD9
  3938                           status	equ	0xFD8
  3939                           
  3940 ;; *************** function _init_interrupts *****************
  3941 ;; Defined at:
  3942 ;;		line 21 in file "micro_setup.c"
  3943 ;; Parameters:    Size  Location     Type
  3944 ;;		None
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;		None
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  1    wreg      void 
  3949 ;; Registers used:
  3950 ;;		None
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3960 ;;Total ram usage:        0 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    3
  3963 ;; This function calls:
  3964 ;;		Nothing
  3965 ;; This function is called by:
  3966 ;;		_main
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           	psect	text17
  3971  00132C                     __ptext17:
  3972                           	opt stack 0
  3973  00132C                     _init_interrupts:
  3974                           	opt stack 27
  3975                           
  3976                           ;micro_setup.c: 23: ANCON1bits.ANSEL10 = 0;
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;incstack = 0
  3980  00132C  010F               	movlb	15	; () banked
  3981  00132E  955C               	bcf	92,2,b	;volatile
  3982                           
  3983                           ;micro_setup.c: 24: ANCON1bits.ANSEL8 = 0;
  3984  001330  915C               	bcf	92,0,b	;volatile
  3985                           
  3986                           ;micro_setup.c: 25: TRISBbits.TRISB0 = 1;
  3987  001332  8093               	bsf	3987,0,c	;volatile
  3988                           
  3989                           ;micro_setup.c: 26: TRISBbits.TRISB1 = 1;
  3990  001334  8293               	bsf	3987,1,c	;volatile
  3991                           
  3992                           ;micro_setup.c: 28: RCONbits.IPEN = 1;
  3993  001336  8ED0               	bsf	4048,7,c	;volatile
  3994                           
  3995                           ;micro_setup.c: 32: INTCONbits.INT0IE = 1;
  3996  001338  88F2               	bsf	intcon,4,c	;volatile
  3997                           
  3998                           ;micro_setup.c: 33: INTCON2bits.INTEDG0 = 0;
  3999  00133A  9CF1               	bcf	intcon2,6,c	;volatile
  4000                           
  4001                           ;micro_setup.c: 34: INTCONbits.INT0IF = 0;
  4002  00133C  92F2               	bcf	intcon,1,c	;volatile
  4003                           
  4004                           ;micro_setup.c: 37: INTCON3bits.INT1P = 1;
  4005  00133E  8CF0               	bsf	intcon3,6,c	;volatile
  4006                           
  4007                           ;micro_setup.c: 38: INTCON3bits.INT1IE = 1;
  4008  001340  86F0               	bsf	intcon3,3,c	;volatile
  4009                           
  4010                           ;micro_setup.c: 39: INTCON2bits.INTEDG1 = 0;
  4011  001342  9AF1               	bcf	intcon2,5,c	;volatile
  4012                           
  4013                           ;micro_setup.c: 40: INTCON3bits.INT1IF = 0;
  4014  001344  90F0               	bcf	intcon3,0,c	;volatile
  4015                           
  4016                           ;micro_setup.c: 42: INTCONbits.PEIE = 1;
  4017  001346  8CF2               	bsf	intcon,6,c	;volatile
  4018                           
  4019                           ;micro_setup.c: 43: INTCONbits.GIE = 1;
  4020  001348  8EF2               	bsf	intcon,7,c	;volatile
  4021                           
  4022                           ;micro_setup.c: 45: (INTCONbits.GIE = 1);
  4023  00134A  8EF2               	bsf	intcon,7,c	;volatile
  4024                           
  4025                           ; BSR set to: 15
  4026  00134C  0012               	return		;funcret
  4027  00134E                     __end_of_init_interrupts:
  4028                           	opt stack 0
  4029                           tblptru	equ	0xFF8
  4030                           tblptrh	equ	0xFF7
  4031                           tblptrl	equ	0xFF6
  4032                           tablat	equ	0xFF5
  4033                           intcon	equ	0xFF2
  4034                           intcon2	equ	0xFF1
  4035                           intcon3	equ	0xFF0
  4036                           postinc0	equ	0xFEE
  4037                           wreg	equ	0xFE8
  4038                           plusw1	equ	0xFE3
  4039                           indf2	equ	0xFDF
  4040                           postinc2	equ	0xFDE
  4041                           postdec2	equ	0xFDD
  4042                           plusw2	equ	0xFDB
  4043                           fsr2h	equ	0xFDA
  4044                           fsr2l	equ	0xFD9
  4045                           status	equ	0xFD8
  4046                           
  4047 ;; *************** function _get_ID *****************
  4048 ;; Defined at:
  4049 ;;		line 305 in file "AD7147.c"
  4050 ;; Parameters:    Size  Location     Type
  4051 ;;  cdc             2   22[BANK0 ] unsigned int 
  4052 ;; Auto vars:     Size  Location     Type
  4053 ;;  result          2   25[BANK0 ] unsigned int 
  4054 ;; Return value:  Size  Location     Type
  4055 ;;                  2   22[BANK0 ] unsigned int 
  4056 ;; Registers used:
  4057 ;;		wreg, status,2, status,0, cstack
  4058 ;; Tracked objects:
  4059 ;;		On entry : 0/0
  4060 ;;		On exit  : 0/0
  4061 ;;		Unchanged: 0/0
  4062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4063 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4064 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4065 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4066 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4067 ;;Total ram usage:        5 bytes
  4068 ;; Hardware stack levels used:    1
  4069 ;; Hardware stack levels required when called:    4
  4070 ;; This function calls:
  4071 ;;		_get_CDC
  4072 ;;		_w16_r16_spi
  4073 ;; This function is called by:
  4074 ;;		_main
  4075 ;; This function uses a non-reentrant model
  4076 ;;
  4077                           
  4078                           	psect	text18
  4079  0010EA                     __ptext18:
  4080                           	opt stack 0
  4081  0010EA                     _get_ID:
  4082                           	opt stack 26
  4083                           
  4084                           ;AD7147.c: 307: get_CDC(cdc,0);
  4085                           
  4086                           ; BSR set to: 15
  4087                           ;incstack = 0
  4088  0010EA  C0C2  F0AC         	movff	get_ID@cdc,get_CDC@cdc
  4089  0010EE  C0C3  F0AD         	movff	get_ID@cdc+1,get_CDC@cdc+1
  4090  0010F2  0E00               	movlw	0
  4091  0010F4  0100               	movlb	0	; () banked
  4092  0010F6  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4093  0010F8  0E00               	movlw	0
  4094  0010FA  6FAE               	movwf	get_CDC@state& (0+255),b
  4095  0010FC  EC84  F009         	call	_get_CDC	;wreg free
  4096                           
  4097                           ;AD7147.c: 308: unsigned int result = (w16_r16_spi(0xE400 + 0x017) & 0b1111111111110000)
      +                           >> 4;
  4098  001100  0EE4               	movlw	228
  4099  001102  0100               	movlb	0	; () banked
  4100  001104  6FAD               	movwf	(w16_r16_spi@address+1)& (0+255),b
  4101  001106  0E17               	movlw	23
  4102  001108  6FAC               	movwf	w16_r16_spi@address& (0+255),b
  4103  00110A  EC35  F006         	call	_w16_r16_spi	;wreg free
  4104  00110E  0E04               	movlw	4
  4105  001110  0100               	movlb	0	; () banked
  4106  001112  6FC4               	movwf	??_get_ID& (0+255),b
  4107  001114                     u1055:
  4108  001114  90D8               	bcf	status,0,c
  4109  001116  33AD               	rrcf	(?_w16_r16_spi+1)& (0+255),f,b
  4110  001118  33AC               	rrcf	?_w16_r16_spi& (0+255),f,b
  4111  00111A  2FC4               	decfsz	??_get_ID& (0+255),f,b
  4112  00111C  D7FB               	goto	u1055
  4113  00111E  0EFF               	movlw	255
  4114  001120  15AC               	andwf	?_w16_r16_spi& (0+255),w,b
  4115  001122  6FC5               	movwf	get_ID@result& (0+255),b
  4116  001124  0E0F               	movlw	15
  4117  001126  15AD               	andwf	(?_w16_r16_spi+1)& (0+255),w,b
  4118  001128  6FC6               	movwf	(get_ID@result+1)& (0+255),b
  4119                           
  4120                           ;AD7147.c: 309: get_CDC(cdc,1);
  4121  00112A  C0C2  F0AC         	movff	get_ID@cdc,get_CDC@cdc
  4122  00112E  C0C3  F0AD         	movff	get_ID@cdc+1,get_CDC@cdc+1
  4123  001132  0E00               	movlw	0
  4124  001134  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4125  001136  0E01               	movlw	1
  4126  001138  6FAE               	movwf	get_CDC@state& (0+255),b
  4127  00113A  EC84  F009         	call	_get_CDC	;wreg free
  4128                           
  4129                           ;AD7147.c: 310: return result;
  4130  00113E  C0C5  F0C2         	movff	get_ID@result,?_get_ID
  4131  001142  C0C6  F0C3         	movff	get_ID@result+1,?_get_ID+1
  4132  001146  0012               	return	
  4133  001148                     __end_of_get_ID:
  4134                           	opt stack 0
  4135                           tblptru	equ	0xFF8
  4136                           tblptrh	equ	0xFF7
  4137                           tblptrl	equ	0xFF6
  4138                           tablat	equ	0xFF5
  4139                           intcon	equ	0xFF2
  4140                           intcon2	equ	0xFF1
  4141                           intcon3	equ	0xFF0
  4142                           postinc0	equ	0xFEE
  4143                           wreg	equ	0xFE8
  4144                           plusw1	equ	0xFE3
  4145                           indf2	equ	0xFDF
  4146                           postinc2	equ	0xFDE
  4147                           postdec2	equ	0xFDD
  4148                           plusw2	equ	0xFDB
  4149                           fsr2h	equ	0xFDA
  4150                           fsr2l	equ	0xFD9
  4151                           status	equ	0xFD8
  4152                           
  4153 ;; *************** function _w16_r16_spi *****************
  4154 ;; Defined at:
  4155 ;;		line 89 in file "spi.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;  address         2    0[BANK0 ] unsigned int 
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;  p4              2   20[BANK0 ] unsigned int 
  4160 ;;  p3              2   18[BANK0 ] unsigned int 
  4161 ;;  blank_high      2   16[BANK0 ] unsigned int 
  4162 ;;  blank_low       2   14[BANK0 ] unsigned int 
  4163 ;;  result          2   12[BANK0 ] unsigned int 
  4164 ;;  address_high    2   10[BANK0 ] unsigned int 
  4165 ;;  address_low     2    8[BANK0 ] unsigned int 
  4166 ;;  p2              2    6[BANK0 ] unsigned int 
  4167 ;;  p1              2    4[BANK0 ] unsigned int 
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  2    0[BANK0 ] unsigned int 
  4170 ;; Registers used:
  4171 ;;		wreg, status,2, status,0
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4177 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4178 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4179 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4180 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4181 ;;Total ram usage:       22 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    3
  4184 ;; This function calls:
  4185 ;;		Nothing
  4186 ;; This function is called by:
  4187 ;;		_read_AD7147
  4188 ;;		_read_sensor
  4189 ;;		_get_ID
  4190 ;;		_read_sensors
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text19
  4195  000C6A                     __ptext19:
  4196                           	opt stack 0
  4197  000C6A                     _w16_r16_spi:
  4198                           	opt stack 25
  4199                           
  4200                           ;spi.c: 91: unsigned int address_low, address_high, result;
  4201                           ;spi.c: 92: unsigned int blank_low = 0x000;
  4202                           
  4203                           ;incstack = 0
  4204  000C6A  0E00               	movlw	0
  4205  000C6C  0100               	movlb	0	; () banked
  4206  000C6E  6FBB               	movwf	(w16_r16_spi@blank_low+1)& (0+255),b
  4207  000C70  0E00               	movlw	0
  4208  000C72  6FBA               	movwf	w16_r16_spi@blank_low& (0+255),b
  4209                           
  4210                           ;spi.c: 93: unsigned int blank_high = 0x000;
  4211  000C74  0E00               	movlw	0
  4212  000C76  6FBD               	movwf	(w16_r16_spi@blank_high+1)& (0+255),b
  4213  000C78  0E00               	movlw	0
  4214  000C7A  6FBC               	movwf	w16_r16_spi@blank_high& (0+255),b
  4215                           
  4216                           ;spi.c: 94: unsigned int p1, p2, p3, p4;
  4217                           ;spi.c: 96: address_low = address & 0xFF;
  4218  000C7C  51AC               	movf	w16_r16_spi@address& (0+255),w,b
  4219  000C7E  6FB4               	movwf	w16_r16_spi@address_low& (0+255),b
  4220  000C80  6BB5               	clrf	(w16_r16_spi@address_low+1)& (0+255),b
  4221                           
  4222                           ;spi.c: 97: address_high = (address >> 8) & 0xFF;
  4223  000C82  C0AC  F0AE         	movff	w16_r16_spi@address,??_w16_r16_spi
  4224  000C86  C0AD  F0AF         	movff	w16_r16_spi@address+1,??_w16_r16_spi+1
  4225  000C8A  C0AF  F0AE         	movff	??_w16_r16_spi+1,??_w16_r16_spi
  4226  000C8E  6BAF               	clrf	(??_w16_r16_spi+1)& (0+255),b
  4227  000C90  51AE               	movf	??_w16_r16_spi& (0+255),w,b
  4228  000C92  6FB6               	movwf	w16_r16_spi@address_high& (0+255),b
  4229  000C94  6BB7               	clrf	(w16_r16_spi@address_high+1)& (0+255),b
  4230                           
  4231                           ; BSR set to: 0
  4232                           ;spi.c: 99: SSPBUF = address_high;
  4233  000C96  C0B6  FFC9         	movff	w16_r16_spi@address_high,4041	;volatile
  4234  000C9A                     
  4235                           ; BSR set to: 0
  4236  000C9A  A0C7               	btfss	4039,0,c	;volatile
  4237  000C9C  D7FE               	goto	l301
  4238                           
  4239                           ;spi.c: 101: p1 = SSPBUF;
  4240  000C9E  CFC9 F0B0          	movff	4041,w16_r16_spi@p1	;volatile
  4241  000CA2  0100               	movlb	0	; () banked
  4242  000CA4  6BB1               	clrf	(w16_r16_spi@p1+1)& (0+255),b
  4243                           
  4244                           ;spi.c: 103: SSPBUF = address_low;
  4245  000CA6  C0B4  FFC9         	movff	w16_r16_spi@address_low,4041	;volatile
  4246  000CAA                     
  4247                           ; BSR set to: 0
  4248  000CAA  A0C7               	btfss	4039,0,c	;volatile
  4249  000CAC  D7FE               	goto	l304
  4250                           
  4251                           ;spi.c: 105: p2 = SSPBUF;
  4252  000CAE  CFC9 F0B2          	movff	4041,w16_r16_spi@p2	;volatile
  4253  000CB2  0100               	movlb	0	; () banked
  4254  000CB4  6BB3               	clrf	(w16_r16_spi@p2+1)& (0+255),b
  4255                           
  4256                           ;spi.c: 107: SSPBUF = blank_high;
  4257  000CB6  C0BC  FFC9         	movff	w16_r16_spi@blank_high,4041	;volatile
  4258  000CBA                     
  4259                           ; BSR set to: 0
  4260  000CBA  A0C7               	btfss	4039,0,c	;volatile
  4261  000CBC  D7FE               	goto	l307
  4262                           
  4263                           ;spi.c: 109: p3 = SSPBUF;
  4264  000CBE  CFC9 F0BE          	movff	4041,w16_r16_spi@p3	;volatile
  4265  000CC2  0100               	movlb	0	; () banked
  4266  000CC4  6BBF               	clrf	(w16_r16_spi@p3+1)& (0+255),b
  4267                           
  4268                           ;spi.c: 111: SSPBUF = blank_low;
  4269  000CC6  C0BA  FFC9         	movff	w16_r16_spi@blank_low,4041	;volatile
  4270  000CCA                     
  4271                           ; BSR set to: 0
  4272  000CCA  A0C7               	btfss	4039,0,c	;volatile
  4273  000CCC  D7FE               	goto	l310
  4274                           
  4275                           ;spi.c: 113: p4 = SSPBUF;
  4276  000CCE  CFC9 F0C0          	movff	4041,w16_r16_spi@p4	;volatile
  4277  000CD2  0100               	movlb	0	; () banked
  4278  000CD4  6BC1               	clrf	(w16_r16_spi@p4+1)& (0+255),b
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;spi.c: 115: result = (p3 << 8) + p4;
  4282  000CD6  51BE               	movf	w16_r16_spi@p3& (0+255),w,b
  4283  000CD8  6FAF               	movwf	(??_w16_r16_spi+1)& (0+255),b
  4284  000CDA  6BAE               	clrf	??_w16_r16_spi& (0+255),b
  4285  000CDC  51C0               	movf	w16_r16_spi@p4& (0+255),w,b
  4286  000CDE  25AE               	addwf	??_w16_r16_spi& (0+255),w,b
  4287  000CE0  6FB8               	movwf	w16_r16_spi@result& (0+255),b
  4288  000CE2  51C1               	movf	(w16_r16_spi@p4+1)& (0+255),w,b
  4289  000CE4  21AF               	addwfc	(??_w16_r16_spi+1)& (0+255),w,b
  4290  000CE6  6FB9               	movwf	(w16_r16_spi@result+1)& (0+255),b
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;spi.c: 116: return result;
  4294  000CE8  C0B8  F0AC         	movff	w16_r16_spi@result,?_w16_r16_spi
  4295  000CEC  C0B9  F0AD         	movff	w16_r16_spi@result+1,?_w16_r16_spi+1
  4296  000CF0  0012               	return	
  4297  000CF2                     __end_of_w16_r16_spi:
  4298                           	opt stack 0
  4299                           tblptru	equ	0xFF8
  4300                           tblptrh	equ	0xFF7
  4301                           tblptrl	equ	0xFF6
  4302                           tablat	equ	0xFF5
  4303                           intcon	equ	0xFF2
  4304                           intcon2	equ	0xFF1
  4305                           intcon3	equ	0xFF0
  4306                           postinc0	equ	0xFEE
  4307                           wreg	equ	0xFE8
  4308                           plusw1	equ	0xFE3
  4309                           indf2	equ	0xFDF
  4310                           postinc2	equ	0xFDE
  4311                           postdec2	equ	0xFDD
  4312                           plusw2	equ	0xFDB
  4313                           fsr2h	equ	0xFDA
  4314                           fsr2l	equ	0xFD9
  4315                           status	equ	0xFD8
  4316                           
  4317 ;; *************** function _blink_LED *****************
  4318 ;; Defined at:
  4319 ;;		line 329 in file "AD7147.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;  cdc             2   22[BANK0 ] unsigned int 
  4322 ;; Auto vars:     Size  Location     Type
  4323 ;;  message         2   24[BANK0 ] unsigned int 
  4324 ;; Return value:  Size  Location     Type
  4325 ;;                  1    wreg      void 
  4326 ;; Registers used:
  4327 ;;		wreg, status,2, status,0, cstack
  4328 ;; Tracked objects:
  4329 ;;		On entry : 0/0
  4330 ;;		On exit  : 0/0
  4331 ;;		Unchanged: 0/0
  4332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4333 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4334 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4336 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4337 ;;Total ram usage:        4 bytes
  4338 ;; Hardware stack levels used:    1
  4339 ;; Hardware stack levels required when called:    5
  4340 ;; This function calls:
  4341 ;;		_delay_ms
  4342 ;;		_get_CDC
  4343 ;;		_w32_spi
  4344 ;; This function is called by:
  4345 ;;		_main
  4346 ;; This function uses a non-reentrant model
  4347 ;;
  4348                           
  4349                           	psect	text20
  4350  000A6C                     __ptext20:
  4351                           	opt stack 0
  4352  000A6C                     _blink_LED:
  4353                           	opt stack 25
  4354                           
  4355                           ;AD7147.c: 331: get_CDC(cdc,0);
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;incstack = 0
  4359  000A6C  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4360  000A70  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4361  000A74  0E00               	movlw	0
  4362  000A76  0100               	movlb	0	; () banked
  4363  000A78  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4364  000A7A  0E00               	movlw	0
  4365  000A7C  6FAE               	movwf	get_CDC@state& (0+255),b
  4366  000A7E  EC84  F009         	call	_get_CDC	;wreg free
  4367                           
  4368                           ;AD7147.c: 332: unsigned int message = 0b0010000000000000;
  4369  000A82  0E20               	movlw	32
  4370  000A84  0100               	movlb	0	; () banked
  4371  000A86  6FC5               	movwf	(blink_LED@message+1)& (0+255),b
  4372  000A88  0E00               	movlw	0
  4373  000A8A  6FC4               	movwf	blink_LED@message& (0+255),b
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;AD7147.c: 333: w32_spi((0xE000 + 0x005),message);
  4377  000A8C  0EE0               	movlw	224
  4378  000A8E  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  4379  000A90  0E05               	movlw	5
  4380  000A92  6FAC               	movwf	w32_spi@address& (0+255),b
  4381  000A94  C0C4  F0AE         	movff	blink_LED@message,w32_spi@data
  4382  000A98  C0C5  F0AF         	movff	blink_LED@message+1,w32_spi@data+1
  4383  000A9C  EC39  F008         	call	_w32_spi	;wreg free
  4384                           
  4385                           ;AD7147.c: 334: delay_ms(10);
  4386  000AA0  0E00               	movlw	0
  4387  000AA2  0100               	movlb	0	; () banked
  4388  000AA4  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  4389  000AA6  0E0A               	movlw	10
  4390  000AA8  6FB4               	movwf	delay_ms@n& (0+255),b
  4391  000AAA  EC13  F009         	call	_delay_ms	;wreg free
  4392                           
  4393                           ;AD7147.c: 335: get_CDC(cdc,1);
  4394  000AAE  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4395  000AB2  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4396  000AB6  0E00               	movlw	0
  4397  000AB8  0100               	movlb	0	; () banked
  4398  000ABA  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4399  000ABC  0E01               	movlw	1
  4400  000ABE  6FAE               	movwf	get_CDC@state& (0+255),b
  4401  000AC0  EC84  F009         	call	_get_CDC	;wreg free
  4402                           
  4403                           ;AD7147.c: 336: delay_ms(1000);
  4404  000AC4  0E03               	movlw	3
  4405  000AC6  0100               	movlb	0	; () banked
  4406  000AC8  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  4407  000ACA  0EE8               	movlw	232
  4408  000ACC  6FB4               	movwf	delay_ms@n& (0+255),b
  4409  000ACE  EC13  F009         	call	_delay_ms	;wreg free
  4410                           
  4411                           ;AD7147.c: 337: get_CDC(cdc,0);
  4412  000AD2  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4413  000AD6  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4414  000ADA  0E00               	movlw	0
  4415  000ADC  0100               	movlb	0	; () banked
  4416  000ADE  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4417  000AE0  0E00               	movlw	0
  4418  000AE2  6FAE               	movwf	get_CDC@state& (0+255),b
  4419  000AE4  EC84  F009         	call	_get_CDC	;wreg free
  4420                           
  4421                           ;AD7147.c: 338: unsigned int message = 0b0011000000000000;
  4422  000AE8  0E30               	movlw	48
  4423  000AEA  0100               	movlb	0	; () banked
  4424  000AEC  6FC5               	movwf	(blink_LED@message+1)& (0+255),b
  4425  000AEE  0E00               	movlw	0
  4426  000AF0  6FC4               	movwf	blink_LED@message& (0+255),b
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;AD7147.c: 339: w32_spi((0xE000 + 0x005),message);
  4430  000AF2  0EE0               	movlw	224
  4431  000AF4  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  4432  000AF6  0E05               	movlw	5
  4433  000AF8  6FAC               	movwf	w32_spi@address& (0+255),b
  4434  000AFA  C0C4  F0AE         	movff	blink_LED@message,w32_spi@data
  4435  000AFE  C0C5  F0AF         	movff	blink_LED@message+1,w32_spi@data+1
  4436  000B02  EC39  F008         	call	_w32_spi	;wreg free
  4437                           
  4438                           ;AD7147.c: 340: delay_ms(10);
  4439  000B06  0E00               	movlw	0
  4440  000B08  0100               	movlb	0	; () banked
  4441  000B0A  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  4442  000B0C  0E0A               	movlw	10
  4443  000B0E  6FB4               	movwf	delay_ms@n& (0+255),b
  4444  000B10  EC13  F009         	call	_delay_ms	;wreg free
  4445                           
  4446                           ;AD7147.c: 341: get_CDC(cdc,1);
  4447  000B14  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4448  000B18  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4449  000B1C  0E00               	movlw	0
  4450  000B1E  0100               	movlb	0	; () banked
  4451  000B20  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4452  000B22  0E01               	movlw	1
  4453  000B24  6FAE               	movwf	get_CDC@state& (0+255),b
  4454  000B26  EC84  F009         	call	_get_CDC	;wreg free
  4455  000B2A  0012               	return		;funcret
  4456  000B2C                     __end_of_blink_LED:
  4457                           	opt stack 0
  4458                           tblptru	equ	0xFF8
  4459                           tblptrh	equ	0xFF7
  4460                           tblptrl	equ	0xFF6
  4461                           tablat	equ	0xFF5
  4462                           intcon	equ	0xFF2
  4463                           intcon2	equ	0xFF1
  4464                           intcon3	equ	0xFF0
  4465                           postinc0	equ	0xFEE
  4466                           wreg	equ	0xFE8
  4467                           plusw1	equ	0xFE3
  4468                           indf2	equ	0xFDF
  4469                           postinc2	equ	0xFDE
  4470                           postdec2	equ	0xFDD
  4471                           plusw2	equ	0xFDB
  4472                           fsr2h	equ	0xFDA
  4473                           fsr2l	equ	0xFD9
  4474                           status	equ	0xFD8
  4475                           
  4476 ;; *************** function _w32_spi *****************
  4477 ;; Defined at:
  4478 ;;		line 26 in file "spi.c"
  4479 ;; Parameters:    Size  Location     Type
  4480 ;;  address         2    0[BANK0 ] unsigned int 
  4481 ;;  data            2    2[BANK0 ] unsigned int 
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;  data_high       2   20[BANK0 ] unsigned int 
  4484 ;;  data_low        2   18[BANK0 ] unsigned int 
  4485 ;;  address_high    2   16[BANK0 ] unsigned int 
  4486 ;;  address_low     2   14[BANK0 ] unsigned int 
  4487 ;;  p4              2   12[BANK0 ] unsigned int 
  4488 ;;  p3              2   10[BANK0 ] unsigned int 
  4489 ;;  p2              2    8[BANK0 ] unsigned int 
  4490 ;;  p1              2    6[BANK0 ] unsigned int 
  4491 ;; Return value:  Size  Location     Type
  4492 ;;                  1    wreg      void 
  4493 ;; Registers used:
  4494 ;;		wreg, status,2
  4495 ;; Tracked objects:
  4496 ;;		On entry : 0/0
  4497 ;;		On exit  : 0/0
  4498 ;;		Unchanged: 0/0
  4499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4500 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4501 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4502 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4503 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4504 ;;Total ram usage:       22 bytes
  4505 ;; Hardware stack levels used:    1
  4506 ;; Hardware stack levels required when called:    3
  4507 ;; This function calls:
  4508 ;;		Nothing
  4509 ;; This function is called by:
  4510 ;;		_write_AD7147
  4511 ;;		_switch_LED
  4512 ;;		_blink_LED
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text21
  4517  001072                     __ptext21:
  4518                           	opt stack 0
  4519  001072                     _w32_spi:
  4520                           	opt stack 26
  4521                           
  4522                           ;spi.c: 28: unsigned int address_low, address_high, data_low, data_high;
  4523                           ;spi.c: 30: address_low = address & 0xFF;
  4524                           
  4525                           ;incstack = 0
  4526  001072  0100               	movlb	0	; () banked
  4527  001074  51AC               	movf	w32_spi@address& (0+255),w,b
  4528  001076  6FBA               	movwf	w32_spi@address_low& (0+255),b
  4529  001078  6BBB               	clrf	(w32_spi@address_low+1)& (0+255),b
  4530                           
  4531                           ;spi.c: 31: address_high = (address >> 8) & 0xFF;
  4532  00107A  C0AC  F0B0         	movff	w32_spi@address,??_w32_spi
  4533  00107E  C0AD  F0B1         	movff	w32_spi@address+1,??_w32_spi+1
  4534  001082  C0B1  F0B0         	movff	??_w32_spi+1,??_w32_spi
  4535  001086  6BB1               	clrf	(??_w32_spi+1)& (0+255),b
  4536  001088  51B0               	movf	??_w32_spi& (0+255),w,b
  4537  00108A  6FBC               	movwf	w32_spi@address_high& (0+255),b
  4538  00108C  6BBD               	clrf	(w32_spi@address_high+1)& (0+255),b
  4539                           
  4540                           ;spi.c: 33: data_low = data & 0xFF;
  4541  00108E  51AE               	movf	w32_spi@data& (0+255),w,b
  4542  001090  6FBE               	movwf	w32_spi@data_low& (0+255),b
  4543  001092  6BBF               	clrf	(w32_spi@data_low+1)& (0+255),b
  4544                           
  4545                           ;spi.c: 34: data_high = (data >> 8) & 0xFF;
  4546  001094  C0AE  F0B0         	movff	w32_spi@data,??_w32_spi
  4547  001098  C0AF  F0B1         	movff	w32_spi@data+1,??_w32_spi+1
  4548  00109C  C0B1  F0B0         	movff	??_w32_spi+1,??_w32_spi
  4549  0010A0  6BB1               	clrf	(??_w32_spi+1)& (0+255),b
  4550  0010A2  51B0               	movf	??_w32_spi& (0+255),w,b
  4551  0010A4  6FC0               	movwf	w32_spi@data_high& (0+255),b
  4552  0010A6  6BC1               	clrf	(w32_spi@data_high+1)& (0+255),b
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;spi.c: 36: SSPBUF = address_high;
  4556  0010A8  C0BC  FFC9         	movff	w32_spi@address_high,4041	;volatile
  4557  0010AC                     
  4558                           ; BSR set to: 0
  4559  0010AC  A0C7               	btfss	4039,0,c	;volatile
  4560  0010AE  D7FE               	goto	l268
  4561                           
  4562                           ;spi.c: 38: unsigned int p1 = SSPBUF;
  4563  0010B0  CFC9 F0B2          	movff	4041,w32_spi@p1	;volatile
  4564  0010B4  0100               	movlb	0	; () banked
  4565  0010B6  6BB3               	clrf	(w32_spi@p1+1)& (0+255),b
  4566                           
  4567                           ;spi.c: 40: SSPBUF = address_low;
  4568  0010B8  C0BA  FFC9         	movff	w32_spi@address_low,4041	;volatile
  4569  0010BC                     
  4570                           ; BSR set to: 0
  4571  0010BC  A0C7               	btfss	4039,0,c	;volatile
  4572  0010BE  D7FE               	goto	l271
  4573                           
  4574                           ;spi.c: 42: unsigned int p2 = SSPBUF;
  4575  0010C0  CFC9 F0B4          	movff	4041,w32_spi@p2	;volatile
  4576  0010C4  0100               	movlb	0	; () banked
  4577  0010C6  6BB5               	clrf	(w32_spi@p2+1)& (0+255),b
  4578                           
  4579                           ;spi.c: 44: SSPBUF = data_high;
  4580  0010C8  C0C0  FFC9         	movff	w32_spi@data_high,4041	;volatile
  4581  0010CC                     
  4582                           ; BSR set to: 0
  4583  0010CC  A0C7               	btfss	4039,0,c	;volatile
  4584  0010CE  D7FE               	goto	l274
  4585                           
  4586                           ;spi.c: 46: unsigned int p3 = SSPBUF;
  4587  0010D0  CFC9 F0B6          	movff	4041,w32_spi@p3	;volatile
  4588  0010D4  0100               	movlb	0	; () banked
  4589  0010D6  6BB7               	clrf	(w32_spi@p3+1)& (0+255),b
  4590                           
  4591                           ;spi.c: 48: SSPBUF = data_low;
  4592  0010D8  C0BE  FFC9         	movff	w32_spi@data_low,4041	;volatile
  4593  0010DC                     
  4594                           ; BSR set to: 0
  4595  0010DC  A0C7               	btfss	4039,0,c	;volatile
  4596  0010DE  D7FE               	goto	l277
  4597                           
  4598                           ;spi.c: 50: unsigned int p4 = SSPBUF;
  4599  0010E0  CFC9 F0B8          	movff	4041,w32_spi@p4	;volatile
  4600  0010E4  0100               	movlb	0	; () banked
  4601  0010E6  6BB9               	clrf	(w32_spi@p4+1)& (0+255),b
  4602                           
  4603                           ; BSR set to: 0
  4604  0010E8  0012               	return		;funcret
  4605  0010EA                     __end_of_w32_spi:
  4606                           	opt stack 0
  4607                           tblptru	equ	0xFF8
  4608                           tblptrh	equ	0xFF7
  4609                           tblptrl	equ	0xFF6
  4610                           tablat	equ	0xFF5
  4611                           intcon	equ	0xFF2
  4612                           intcon2	equ	0xFF1
  4613                           intcon3	equ	0xFF0
  4614                           postinc0	equ	0xFEE
  4615                           wreg	equ	0xFE8
  4616                           plusw1	equ	0xFE3
  4617                           indf2	equ	0xFDF
  4618                           postinc2	equ	0xFDE
  4619                           postdec2	equ	0xFDD
  4620                           plusw2	equ	0xFDB
  4621                           fsr2h	equ	0xFDA
  4622                           fsr2l	equ	0xFD9
  4623                           status	equ	0xFD8
  4624                           
  4625 ;; *************** function _get_CDC *****************
  4626 ;; Defined at:
  4627 ;;		line 343 in file "AD7147.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;  cdc             2    0[BANK0 ] unsigned int 
  4630 ;;  state           2    2[BANK0 ] unsigned int 
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;		None
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, status,2, status,0
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4642 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4645 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4646 ;;Total ram usage:        4 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    3
  4649 ;; This function calls:
  4650 ;;		Nothing
  4651 ;; This function is called by:
  4652 ;;		_write_AD7147
  4653 ;;		_read_AD7147
  4654 ;;		_sensor_CDC
  4655 ;;		_get_ID
  4656 ;;		_switch_LED
  4657 ;;		_blink_LED
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661                           	psect	text22
  4662  001308                     __ptext22:
  4663                           	opt stack 0
  4664  001308                     _get_CDC:
  4665                           	opt stack 26
  4666                           
  4667                           ;AD7147.c: 345: if (state == 1)
  4668                           
  4669                           ; BSR set to: 0
  4670                           ;incstack = 0
  4671  001308  0100               	movlb	0	; () banked
  4672  00130A  05AE               	decf	get_CDC@state& (0+255),w,b
  4673  00130C  11AF               	iorwf	(get_CDC@state+1)& (0+255),w,b
  4674  00130E  A4D8               	btfss	status,2,c
  4675  001310  D003               	goto	l77
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;AD7147.c: 346: {
  4679                           ;AD7147.c: 347: LATCbits.LATC1 = 1;
  4680  001312  828B               	bsf	3979,1,c	;volatile
  4681                           
  4682                           ;AD7147.c: 348: LATCbits.LATC0 = 1;
  4683  001314  808B               	bsf	3979,0,c	;volatile
  4684                           
  4685                           ;AD7147.c: 349: }
  4686  001316  0012               	return	
  4687  001318                     l77:
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;AD7147.c: 350: else
  4691                           ;AD7147.c: 351: {
  4692                           ;AD7147.c: 352: if (cdc == 1)
  4693                           
  4694                           ; BSR set to: 0
  4695  001318  05AC               	decf	get_CDC@cdc& (0+255),w,b
  4696  00131A  11AD               	iorwf	(get_CDC@cdc+1)& (0+255),w,b
  4697  00131C  A4D8               	btfss	status,2,c
  4698  00131E  D003               	goto	l79
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;AD7147.c: 353: {
  4702                           ;AD7147.c: 354: LATCbits.LATC1 = 0;
  4703  001320  928B               	bcf	3979,1,c	;volatile
  4704                           
  4705                           ;AD7147.c: 355: LATCbits.LATC0 = 1;
  4706  001322  808B               	bsf	3979,0,c	;volatile
  4707                           
  4708                           ;AD7147.c: 356: }
  4709  001324  0012               	return	
  4710  001326                     l79:
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;AD7147.c: 357: else
  4714                           ;AD7147.c: 358: {
  4715                           ;AD7147.c: 359: LATCbits.LATC0 = 0;
  4716  001326  908B               	bcf	3979,0,c	;volatile
  4717                           
  4718                           ;AD7147.c: 360: LATCbits.LATC1 = 1;
  4719  001328  828B               	bsf	3979,1,c	;volatile
  4720                           
  4721                           ; BSR set to: 0
  4722  00132A  0012               	return	
  4723  00132C                     __end_of_get_CDC:
  4724                           	opt stack 0
  4725                           tblptru	equ	0xFF8
  4726                           tblptrh	equ	0xFF7
  4727                           tblptrl	equ	0xFF6
  4728                           tablat	equ	0xFF5
  4729                           intcon	equ	0xFF2
  4730                           intcon2	equ	0xFF1
  4731                           intcon3	equ	0xFF0
  4732                           postinc0	equ	0xFEE
  4733                           wreg	equ	0xFE8
  4734                           plusw1	equ	0xFE3
  4735                           indf2	equ	0xFDF
  4736                           postinc2	equ	0xFDE
  4737                           postdec2	equ	0xFDD
  4738                           plusw2	equ	0xFDB
  4739                           fsr2h	equ	0xFDA
  4740                           fsr2l	equ	0xFD9
  4741                           status	equ	0xFD8
  4742                           
  4743 ;; *************** function _delay_ms *****************
  4744 ;; Defined at:
  4745 ;;		line 92 in file "micro_setup.c"
  4746 ;; Parameters:    Size  Location     Type
  4747 ;;  n               2    8[BANK0 ] int 
  4748 ;; Auto vars:     Size  Location     Type
  4749 ;;  j               2   11[BANK0 ] int 
  4750 ;; Return value:  Size  Location     Type
  4751 ;;                  1    wreg      void 
  4752 ;; Registers used:
  4753 ;;		wreg, status,2, status,0, cstack
  4754 ;; Tracked objects:
  4755 ;;		On entry : 0/0
  4756 ;;		On exit  : 0/0
  4757 ;;		Unchanged: 0/0
  4758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4759 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4760 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4761 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4762 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4763 ;;Total ram usage:        5 bytes
  4764 ;; Hardware stack levels used:    1
  4765 ;; Hardware stack levels required when called:    4
  4766 ;; This function calls:
  4767 ;;		___awdiv
  4768 ;; This function is called by:
  4769 ;;		_switch_LED
  4770 ;;		_blink_LED
  4771 ;;		_main
  4772 ;; This function uses a non-reentrant model
  4773 ;;
  4774                           
  4775                           	psect	text23
  4776  001226                     __ptext23:
  4777                           	opt stack 0
  4778  001226                     _delay_ms:
  4779                           	opt stack 25
  4780                           
  4781                           ;micro_setup.c: 94: int j = n/10;
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;incstack = 0
  4785  001226  C0B4  F0AC         	movff	delay_ms@n,___awdiv@dividend
  4786  00122A  C0B5  F0AD         	movff	delay_ms@n+1,___awdiv@dividend+1
  4787  00122E  0E00               	movlw	0
  4788  001230  0100               	movlb	0	; () banked
  4789  001232  6FAF               	movwf	(___awdiv@divisor+1)& (0+255),b
  4790  001234  0E0A               	movlw	10
  4791  001236  6FAE               	movwf	___awdiv@divisor& (0+255),b
  4792  001238  EC79  F006         	call	___awdiv	;wreg free
  4793  00123C  C0AC  F0B7         	movff	?___awdiv,delay_ms@j
  4794  001240  C0AD  F0B8         	movff	?___awdiv+1,delay_ms@j+1
  4795                           
  4796                           ;micro_setup.c: 95: while(j--)
  4797  001244  D009               	goto	l250
  4798  001246                     l1919:
  4799                           
  4800                           ;micro_setup.c: 96: {
  4801                           ;micro_setup.c: 97: _delay((unsigned long)((10)*(8000000/4000.0)));
  4802  001246  0E1A               	movlw	26
  4803  001248  0100               	movlb	0	; () banked
  4804  00124A  6FB6               	movwf	??_delay_ms& (0+255),b
  4805  00124C  0EF8               	movlw	248
  4806  00124E                     u1307:
  4807  00124E  2EE8               	decfsz	wreg,f,c
  4808  001250  D7FE               	bra	u1307
  4809  001252  2FB6               	decfsz	??_delay_ms& (0+255),f,b
  4810  001254  D7FC               	bra	u1307
  4811  001256  F000               	nop	
  4812  001258                     l250:
  4813  001258  0100               	movlb	0	; () banked
  4814  00125A  07B7               	decf	delay_ms@j& (0+255),f,b
  4815  00125C  A0D8               	btfss	status,0,c
  4816  00125E  07B8               	decf	(delay_ms@j+1)& (0+255),f,b
  4817  001260  29B7               	incf	delay_ms@j& (0+255),w,b
  4818  001262  E1F1               	bnz	l1919
  4819  001264  29B8               	incf	(delay_ms@j+1)& (0+255),w,b
  4820  001266  B4D8               	btfsc	status,2,c
  4821  001268  0012               	return	
  4822  00126A  D7ED               	goto	l251
  4823  00126C                     __end_of_delay_ms:
  4824                           	opt stack 0
  4825                           tblptru	equ	0xFF8
  4826                           tblptrh	equ	0xFF7
  4827                           tblptrl	equ	0xFF6
  4828                           tablat	equ	0xFF5
  4829                           intcon	equ	0xFF2
  4830                           intcon2	equ	0xFF1
  4831                           intcon3	equ	0xFF0
  4832                           postinc0	equ	0xFEE
  4833                           wreg	equ	0xFE8
  4834                           plusw1	equ	0xFE3
  4835                           indf2	equ	0xFDF
  4836                           postinc2	equ	0xFDE
  4837                           postdec2	equ	0xFDD
  4838                           plusw2	equ	0xFDB
  4839                           fsr2h	equ	0xFDA
  4840                           fsr2l	equ	0xFD9
  4841                           status	equ	0xFD8
  4842                           
  4843 ;; *************** function ___awdiv *****************
  4844 ;; Defined at:
  4845 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;  dividend        2    0[BANK0 ] int 
  4848 ;;  divisor         2    2[BANK0 ] int 
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;  quotient        2    6[BANK0 ] int 
  4851 ;;  sign            1    5[BANK0 ] unsigned char 
  4852 ;;  counter         1    4[BANK0 ] unsigned char 
  4853 ;; Return value:  Size  Location     Type
  4854 ;;                  2    0[BANK0 ] int 
  4855 ;; Registers used:
  4856 ;;		wreg, status,2, status,0
  4857 ;; Tracked objects:
  4858 ;;		On entry : 0/0
  4859 ;;		On exit  : 0/0
  4860 ;;		Unchanged: 0/0
  4861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4862 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4863 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4865 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4866 ;;Total ram usage:        8 bytes
  4867 ;; Hardware stack levels used:    1
  4868 ;; Hardware stack levels required when called:    3
  4869 ;; This function calls:
  4870 ;;		Nothing
  4871 ;; This function is called by:
  4872 ;;		_delay_ms
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           	psect	text24
  4877  000CF2                     __ptext24:
  4878                           	opt stack 0
  4879  000CF2                     ___awdiv:
  4880                           	opt stack 25
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;incstack = 0
  4884  000CF2  0E00               	movlw	0
  4885  000CF4  0100               	movlb	0	; () banked
  4886  000CF6  6FB1               	movwf	___awdiv@sign& (0+255),b
  4887                           
  4888                           ; BSR set to: 0
  4889  000CF8  AFAF               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4890  000CFA  D006               	goto	l577
  4891                           
  4892                           ; BSR set to: 0
  4893  000CFC  6DAE               	negf	___awdiv@divisor& (0+255),b
  4894  000CFE  1FAF               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4895  000D00  B0D8               	btfsc	status,0,c
  4896  000D02  2BAF               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4897                           
  4898                           ; BSR set to: 0
  4899  000D04  0E01               	movlw	1
  4900  000D06  6FB1               	movwf	___awdiv@sign& (0+255),b
  4901  000D08                     l577:
  4902                           
  4903                           ; BSR set to: 0
  4904                           
  4905                           ; BSR set to: 0
  4906  000D08  AFAD               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4907  000D0A  D006               	goto	l578
  4908                           
  4909                           ; BSR set to: 0
  4910  000D0C  6DAC               	negf	___awdiv@dividend& (0+255),b
  4911  000D0E  1FAD               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4912  000D10  B0D8               	btfsc	status,0,c
  4913  000D12  2BAD               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4914                           
  4915                           ; BSR set to: 0
  4916  000D14  0E01               	movlw	1
  4917  000D16  1BB1               	xorwf	___awdiv@sign& (0+255),f,b
  4918  000D18                     l578:
  4919                           
  4920                           ; BSR set to: 0
  4921                           
  4922                           ; BSR set to: 0
  4923  000D18  0E00               	movlw	0
  4924  000D1A  6FB3               	movwf	(___awdiv@quotient+1)& (0+255),b
  4925  000D1C  0E00               	movlw	0
  4926  000D1E  6FB2               	movwf	___awdiv@quotient& (0+255),b
  4927                           
  4928                           ; BSR set to: 0
  4929  000D20  51AE               	movf	___awdiv@divisor& (0+255),w,b
  4930  000D22  11AF               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4931  000D24  B4D8               	btfsc	status,2,c
  4932  000D26  D01C               	goto	l585
  4933                           
  4934                           ; BSR set to: 0
  4935  000D28  0E01               	movlw	1
  4936  000D2A  6FB0               	movwf	___awdiv@counter& (0+255),b
  4937  000D2C  D004               	goto	l580
  4938  000D2E                     
  4939                           ; BSR set to: 0
  4940                           
  4941                           ; BSR set to: 0
  4942  000D2E  90D8               	bcf	status,0,c
  4943  000D30  37AE               	rlcf	___awdiv@divisor& (0+255),f,b
  4944  000D32  37AF               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4945  000D34  2BB0               	incf	___awdiv@counter& (0+255),f,b
  4946  000D36                     l580:
  4947                           
  4948                           ; BSR set to: 0
  4949                           
  4950                           ; BSR set to: 0
  4951  000D36  AFAF               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4952  000D38  D7FA               	goto	l581
  4953  000D3A                     u820:
  4954                           
  4955                           ; BSR set to: 0
  4956                           
  4957                           ; BSR set to: 0
  4958                           
  4959                           ; BSR set to: 0
  4960  000D3A  90D8               	bcf	status,0,c
  4961  000D3C  37B2               	rlcf	___awdiv@quotient& (0+255),f,b
  4962  000D3E  37B3               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4963                           
  4964                           ; BSR set to: 0
  4965  000D40  51AE               	movf	___awdiv@divisor& (0+255),w,b
  4966  000D42  5DAC               	subwf	___awdiv@dividend& (0+255),w,b
  4967  000D44  51AF               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4968  000D46  59AD               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4969  000D48  A0D8               	btfss	status,0,c
  4970  000D4A  D005               	goto	l584
  4971                           
  4972                           ; BSR set to: 0
  4973  000D4C  51AE               	movf	___awdiv@divisor& (0+255),w,b
  4974  000D4E  5FAC               	subwf	___awdiv@dividend& (0+255),f,b
  4975  000D50  51AF               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4976  000D52  5BAD               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4977                           
  4978                           ; BSR set to: 0
  4979  000D54  81B2               	bsf	___awdiv@quotient& (0+255),0,b
  4980  000D56                     l584:
  4981                           
  4982                           ; BSR set to: 0
  4983                           
  4984                           ; BSR set to: 0
  4985  000D56  90D8               	bcf	status,0,c
  4986  000D58  33AF               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4987  000D5A  33AE               	rrcf	___awdiv@divisor& (0+255),f,b
  4988                           
  4989                           ; BSR set to: 0
  4990  000D5C  2FB0               	decfsz	___awdiv@counter& (0+255),f,b
  4991  000D5E  D7ED               	goto	u820
  4992  000D60                     l585:
  4993                           
  4994                           ; BSR set to: 0
  4995                           
  4996                           ; BSR set to: 0
  4997                           
  4998                           ; BSR set to: 0
  4999  000D60  51B1               	movf	___awdiv@sign& (0+255),w,b
  5000  000D62  B4D8               	btfsc	status,2,c
  5001  000D64  D004               	goto	l586
  5002                           
  5003                           ; BSR set to: 0
  5004  000D66  6DB2               	negf	___awdiv@quotient& (0+255),b
  5005  000D68  1FB3               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5006  000D6A  B0D8               	btfsc	status,0,c
  5007  000D6C  2BB3               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5008  000D6E                     l586:
  5009                           
  5010                           ; BSR set to: 0
  5011                           
  5012                           ; BSR set to: 0
  5013  000D6E  C0B2  F0AC         	movff	___awdiv@quotient,?___awdiv
  5014  000D72  C0B3  F0AD         	movff	___awdiv@quotient+1,?___awdiv+1
  5015  000D76  0012               	return	
  5016  000D78                     __end_of___awdiv:
  5017                           	opt stack 0
  5018                           tblptru	equ	0xFF8
  5019                           tblptrh	equ	0xFF7
  5020                           tblptrl	equ	0xFF6
  5021                           tablat	equ	0xFF5
  5022                           intcon	equ	0xFF2
  5023                           intcon2	equ	0xFF1
  5024                           intcon3	equ	0xFF0
  5025                           postinc0	equ	0xFEE
  5026                           wreg	equ	0xFE8
  5027                           plusw1	equ	0xFE3
  5028                           indf2	equ	0xFDF
  5029                           postinc2	equ	0xFDE
  5030                           postdec2	equ	0xFDD
  5031                           plusw2	equ	0xFDB
  5032                           fsr2h	equ	0xFDA
  5033                           fsr2l	equ	0xFD9
  5034                           status	equ	0xFD8
  5035                           
  5036 ;; *************** function _ISR *****************
  5037 ;; Defined at:
  5038 ;;		line 21 in file "main.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;		None
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;		None
  5043 ;; Return value:  Size  Location     Type
  5044 ;;                  1    wreg      void 
  5045 ;; Registers used:
  5046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5047 ;; Tracked objects:
  5048 ;;		On entry : 0/0
  5049 ;;		On exit  : 0/0
  5050 ;;		Unchanged: 0/0
  5051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5054 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5055 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5056 ;;Total ram usage:       18 bytes
  5057 ;; Hardware stack levels used:    1
  5058 ;; Hardware stack levels required when called:    2
  5059 ;; This function calls:
  5060 ;;		_read_cdc1
  5061 ;;		_read_cdc2
  5062 ;;		i2_read_AD7147
  5063 ;; This function is called by:
  5064 ;;		Interrupt level 2
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067                           
  5068                           	psect	intcode
  5069  000008                     __pintcode:
  5070                           	opt stack 0
  5071  000008                     _ISR:
  5072                           	opt stack 25
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;incstack = 0
  5076  000008  825B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5077  00000A  CFFA F023          	movff	pclath,??_ISR
  5078  00000E  CFFB F024          	movff	pclatu,??_ISR+1
  5079  000012  CFE9 F025          	movff	fsr0l,??_ISR+2
  5080  000016  CFEA F026          	movff	fsr0h,??_ISR+3
  5081  00001A  CFE1 F027          	movff	fsr1l,??_ISR+4
  5082  00001E  CFE2 F028          	movff	fsr1h,??_ISR+5
  5083  000022  CFD9 F029          	movff	fsr2l,??_ISR+6
  5084  000026  CFDA F02A          	movff	fsr2h,??_ISR+7
  5085  00002A  CFF3 F02B          	movff	prodl,??_ISR+8
  5086  00002E  CFF4 F02C          	movff	prodh,??_ISR+9
  5087  000032  CFF6 F02D          	movff	tblptrl,??_ISR+10
  5088  000036  CFF7 F02E          	movff	tblptrh,??_ISR+11
  5089  00003A  CFF8 F02F          	movff	tblptru,??_ISR+12
  5090  00003E  CFF5 F030          	movff	tablat,??_ISR+13
  5091  000042  C05B  F031         	movff	btemp,??_ISR+14
  5092  000046  C05C  F032         	movff	btemp+1,??_ISR+15
  5093  00004A  C05D  F033         	movff	btemp+2,??_ISR+16
  5094  00004E  C05E  F034         	movff	btemp+3,??_ISR+17
  5095                           
  5096                           ;main.c: 24: if(INTCONbits.INT0IF && INTCONbits.INT0IE)
  5097  000052  B2F2               	btfsc	intcon,1,c	;volatile
  5098  000054  A8F2               	btfss	intcon,4,c	;volatile
  5099  000056  D019               	goto	i2l154
  5100                           
  5101                           ;main.c: 25: {
  5102                           ;main.c: 26: read_cdc1(sensor_values);
  5103  000058  0E7C               	movlw	low _sensor_values
  5104  00005A  6E17               	movwf	read_cdc1@sensor_values,c
  5105  00005C  0E00               	movlw	high _sensor_values
  5106  00005E  6E18               	movwf	read_cdc1@sensor_values+1,c
  5107  000060  EC7E  F007         	call	_read_cdc1	;wreg free
  5108                           
  5109                           ;main.c: 27: read_AD7147(interrupt_values_cdc1, 0x008, 3, 1);
  5110  000064  0E55               	movlw	low _interrupt_values_cdc1
  5111  000066  6E17               	movwf	i2read_AD7147@DataBuffer,c
  5112  000068  0E00               	movlw	high _interrupt_values_cdc1
  5113  00006A  6E18               	movwf	i2read_AD7147@DataBuffer+1,c
  5114  00006C  0E00               	movlw	0
  5115  00006E  6E1A               	movwf	i2read_AD7147@RegisterStartAddress+1,c
  5116  000070  0E08               	movlw	8
  5117  000072  6E19               	movwf	i2read_AD7147@RegisterStartAddress,c
  5118  000074  0E00               	movlw	0
  5119  000076  6E1C               	movwf	i2read_AD7147@NumberOfRegisters+1,c
  5120  000078  0E03               	movlw	3
  5121  00007A  6E1B               	movwf	i2read_AD7147@NumberOfRegisters,c
  5122  00007C  0E00               	movlw	0
  5123  00007E  6E1E               	movwf	i2read_AD7147@cdc+1,c
  5124  000080  0E01               	movlw	1
  5125  000082  6E1D               	movwf	i2read_AD7147@cdc,c
  5126  000084  ECFC  F007         	call	i2_read_AD7147	;wreg free
  5127                           
  5128                           ;main.c: 28: INTCONbits.INT0IF = 0;
  5129  000088  92F2               	bcf	intcon,1,c	;volatile
  5130  00008A                     i2l154:
  5131                           
  5132                           ;main.c: 29: }
  5133                           ;main.c: 30: if(INTCON3bits.INT1IF && INTCON3bits.INT1E)
  5134  00008A  B0F0               	btfsc	intcon3,0,c	;volatile
  5135  00008C  A6F0               	btfss	intcon3,3,c	;volatile
  5136  00008E  D019               	goto	i2l155
  5137                           
  5138                           ;main.c: 31: {
  5139                           ;main.c: 32: read_cdc2(sensor_values);
  5140  000090  0E7C               	movlw	low _sensor_values
  5141  000092  6E17               	movwf	read_cdc2@sensor_values,c
  5142  000094  0E00               	movlw	high _sensor_values
  5143  000096  6E18               	movwf	read_cdc2@sensor_values+1,c
  5144  000098  ECFD  F006         	call	_read_cdc2	;wreg free
  5145                           
  5146                           ;main.c: 33: read_AD7147(interrupt_values_cdc2, 0x008, 3, 2);
  5147  00009C  0E4F               	movlw	low _interrupt_values_cdc2
  5148  00009E  6E17               	movwf	i2read_AD7147@DataBuffer,c
  5149  0000A0  0E00               	movlw	high _interrupt_values_cdc2
  5150  0000A2  6E18               	movwf	i2read_AD7147@DataBuffer+1,c
  5151  0000A4  0E00               	movlw	0
  5152  0000A6  6E1A               	movwf	i2read_AD7147@RegisterStartAddress+1,c
  5153  0000A8  0E08               	movlw	8
  5154  0000AA  6E19               	movwf	i2read_AD7147@RegisterStartAddress,c
  5155  0000AC  0E00               	movlw	0
  5156  0000AE  6E1C               	movwf	i2read_AD7147@NumberOfRegisters+1,c
  5157  0000B0  0E03               	movlw	3
  5158  0000B2  6E1B               	movwf	i2read_AD7147@NumberOfRegisters,c
  5159  0000B4  0E00               	movlw	0
  5160  0000B6  6E1E               	movwf	i2read_AD7147@cdc+1,c
  5161  0000B8  0E02               	movlw	2
  5162  0000BA  6E1D               	movwf	i2read_AD7147@cdc,c
  5163  0000BC  ECFC  F007         	call	i2_read_AD7147	;wreg free
  5164                           
  5165                           ;main.c: 34: INTCON3bits.INT1IF = 0;
  5166  0000C0  90F0               	bcf	intcon3,0,c	;volatile
  5167  0000C2                     i2l155:
  5168                           
  5169                           ;main.c: 35: }
  5170                           ;main.c: 36: return;
  5171  0000C2  C034  F05E         	movff	??_ISR+17,btemp+3
  5172  0000C6  C033  F05D         	movff	??_ISR+16,btemp+2
  5173  0000CA  C032  F05C         	movff	??_ISR+15,btemp+1
  5174  0000CE  C031  F05B         	movff	??_ISR+14,btemp
  5175  0000D2  C030  FFF5         	movff	??_ISR+13,tablat
  5176  0000D6  C02F  FFF8         	movff	??_ISR+12,tblptru
  5177  0000DA  C02E  FFF7         	movff	??_ISR+11,tblptrh
  5178  0000DE  C02D  FFF6         	movff	??_ISR+10,tblptrl
  5179  0000E2  C02C  FFF4         	movff	??_ISR+9,prodh
  5180  0000E6  C02B  FFF3         	movff	??_ISR+8,prodl
  5181  0000EA  C02A  FFDA         	movff	??_ISR+7,fsr2h
  5182  0000EE  C029  FFD9         	movff	??_ISR+6,fsr2l
  5183  0000F2  C028  FFE2         	movff	??_ISR+5,fsr1h
  5184  0000F6  C027  FFE1         	movff	??_ISR+4,fsr1l
  5185  0000FA  C026  FFEA         	movff	??_ISR+3,fsr0h
  5186  0000FE  C025  FFE9         	movff	??_ISR+2,fsr0l
  5187  000102  C024  FFFB         	movff	??_ISR+1,pclatu
  5188  000106  C023  FFFA         	movff	??_ISR,pclath
  5189  00010A  925B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5190  00010C  0011               	retfie		f
  5191  00010E                     __end_of_ISR:
  5192                           	opt stack 0
  5193                           pclatu	equ	0xFFB
  5194                           pclath	equ	0xFFA
  5195                           tblptru	equ	0xFF8
  5196                           tblptrh	equ	0xFF7
  5197                           tblptrl	equ	0xFF6
  5198                           tablat	equ	0xFF5
  5199                           prodh	equ	0xFF4
  5200                           prodl	equ	0xFF3
  5201                           intcon	equ	0xFF2
  5202                           intcon2	equ	0xFF1
  5203                           intcon3	equ	0xFF0
  5204                           postinc0	equ	0xFEE
  5205                           fsr0h	equ	0xFEA
  5206                           fsr0l	equ	0xFE9
  5207                           wreg	equ	0xFE8
  5208                           plusw1	equ	0xFE3
  5209                           fsr1h	equ	0xFE2
  5210                           fsr1l	equ	0xFE1
  5211                           indf2	equ	0xFDF
  5212                           postinc2	equ	0xFDE
  5213                           postdec2	equ	0xFDD
  5214                           plusw2	equ	0xFDB
  5215                           fsr2h	equ	0xFDA
  5216                           fsr2l	equ	0xFD9
  5217                           status	equ	0xFD8
  5218                           
  5219 ;; *************** function i2_read_AD7147 *****************
  5220 ;; Defined at:
  5221 ;;		line 221 in file "AD7147.c"
  5222 ;; Parameters:    Size  Location     Type
  5223 ;;  DataBuffer      2   22[COMRAM] PTR unsigned int 
  5224 ;;		 -> interrupt_values_cdc2(6), interrupt_values_cdc1(6), 
  5225 ;;  RegisterStar    2   24[COMRAM] unsigned int 
  5226 ;;  NumberOfRegi    2   26[COMRAM] unsigned int 
  5227 ;;  cdc             2   28[COMRAM] unsigned int 
  5228 ;; Auto vars:     Size  Location     Type
  5229 ;;  read_AD7147     2   32[COMRAM] unsigned int 
  5230 ;;  read_AD7147     2   30[COMRAM] unsigned int 
  5231 ;; Return value:  Size  Location     Type
  5232 ;;                  1    wreg      void 
  5233 ;; Registers used:
  5234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5240 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5241 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5243 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5244 ;;Total ram usage:       12 bytes
  5245 ;; Hardware stack levels used:    1
  5246 ;; Hardware stack levels required when called:    1
  5247 ;; This function calls:
  5248 ;;		i2_get_CDC
  5249 ;;		i2_w16_r16_spi
  5250 ;; This function is called by:
  5251 ;;		_ISR
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           	psect	text26
  5256  000FF8                     __ptext26:
  5257                           	opt stack 0
  5258  000FF8                     i2_read_AD7147:
  5259                           	opt stack 25
  5260                           
  5261                           ;AD7147.c: 223: get_CDC(cdc,0);
  5262                           
  5263                           ;incstack = 0
  5264  000FF8  C01D  F001         	movff	i2read_AD7147@cdc,i2get_CDC@cdc
  5265  000FFC  C01E  F002         	movff	i2read_AD7147@cdc+1,i2get_CDC@cdc+1
  5266  001000  0E00               	movlw	0
  5267  001002  6E04               	movwf	i2get_CDC@state+1,c
  5268  001004  0E00               	movlw	0
  5269  001006  6E03               	movwf	i2get_CDC@state,c
  5270  001008  ECA7  F009         	call	i2_get_CDC	;wreg free
  5271                           
  5272                           ;AD7147.c: 224: unsigned int Register_Values = 0xE400 + RegisterStartAddress;
  5273  00100C  0E00               	movlw	0
  5274  00100E  2419               	addwf	i2read_AD7147@RegisterStartAddress,w,c
  5275  001010  6E1F               	movwf	i2read_AD7147@Register_Values,c
  5276  001012  0EE4               	movlw	228
  5277  001014  201A               	addwfc	i2read_AD7147@RegisterStartAddress+1,w,c
  5278  001016  6E20               	movwf	i2read_AD7147@Register_Values+1,c
  5279                           
  5280                           ;AD7147.c: 225: for (unsigned int i=0; i<NumberOfRegisters; i++)
  5281  001018  0E00               	movlw	0
  5282  00101A  6E22               	movwf	i2read_AD7147@i+1,c
  5283  00101C  0E00               	movlw	0
  5284  00101E  6E21               	movwf	i2read_AD7147@i,c
  5285  001020  D017               	goto	i2l32
  5286  001022                     
  5287                           ;AD7147.c: 226: {
  5288                           ;AD7147.c: 227: DataBuffer[i]=w16_r16_spi(Register_Values+i);
  5289  001022  5021               	movf	i2read_AD7147@i,w,c
  5290  001024  241F               	addwf	i2read_AD7147@Register_Values,w,c
  5291  001026  6E01               	movwf	i2w16_r16_spi@address,c
  5292  001028  5022               	movf	i2read_AD7147@i+1,w,c
  5293  00102A  2020               	addwfc	i2read_AD7147@Register_Values+1,w,c
  5294  00102C  6E02               	movwf	i2w16_r16_spi@address+1,c
  5295  00102E  ECBD  F007         	call	i2_w16_r16_spi	;wreg free
  5296  001032  90D8               	bcf	status,0,c
  5297  001034  3421               	rlcf	i2read_AD7147@i,w,c
  5298  001036  6ED9               	movwf	fsr2l,c
  5299  001038  3422               	rlcf	i2read_AD7147@i+1,w,c
  5300  00103A  6EDA               	movwf	fsr2h,c
  5301  00103C  5017               	movf	i2read_AD7147@DataBuffer,w,c
  5302  00103E  26D9               	addwf	fsr2l,f,c
  5303  001040  5018               	movf	i2read_AD7147@DataBuffer+1,w,c
  5304  001042  22DA               	addwfc	fsr2h,f,c
  5305  001044  C001  FFDE         	movff	?i2_w16_r16_spi,postinc2
  5306  001048  C002  FFDD         	movff	?i2_w16_r16_spi+1,postdec2
  5307  00104C  4A21               	infsnz	i2read_AD7147@i,f,c
  5308  00104E  2A22               	incf	i2read_AD7147@i+1,f,c
  5309  001050                     i2l32:
  5310  001050  501B               	movf	i2read_AD7147@NumberOfRegisters,w,c
  5311  001052  5C21               	subwf	i2read_AD7147@i,w,c
  5312  001054  501C               	movf	i2read_AD7147@NumberOfRegisters+1,w,c
  5313  001056  5822               	subwfb	i2read_AD7147@i+1,w,c
  5314  001058  A0D8               	btfss	status,0,c
  5315  00105A  D7E3               	goto	i2l33
  5316                           
  5317                           ;AD7147.c: 228: }
  5318                           ;AD7147.c: 229: get_CDC(cdc,1);
  5319  00105C  C01D  F001         	movff	i2read_AD7147@cdc,i2get_CDC@cdc
  5320  001060  C01E  F002         	movff	i2read_AD7147@cdc+1,i2get_CDC@cdc+1
  5321  001064  0E00               	movlw	0
  5322  001066  6E04               	movwf	i2get_CDC@state+1,c
  5323  001068  0E01               	movlw	1
  5324  00106A  6E03               	movwf	i2get_CDC@state,c
  5325  00106C  ECA7  F009         	call	i2_get_CDC	;wreg free
  5326  001070  0012               	return		;funcret
  5327  001072                     __end_ofi2_read_AD7147:
  5328                           	opt stack 0
  5329                           pclatu	equ	0xFFB
  5330                           pclath	equ	0xFFA
  5331                           tblptru	equ	0xFF8
  5332                           tblptrh	equ	0xFF7
  5333                           tblptrl	equ	0xFF6
  5334                           tablat	equ	0xFF5
  5335                           prodh	equ	0xFF4
  5336                           prodl	equ	0xFF3
  5337                           intcon	equ	0xFF2
  5338                           intcon2	equ	0xFF1
  5339                           intcon3	equ	0xFF0
  5340                           postinc0	equ	0xFEE
  5341                           fsr0h	equ	0xFEA
  5342                           fsr0l	equ	0xFE9
  5343                           wreg	equ	0xFE8
  5344                           plusw1	equ	0xFE3
  5345                           fsr1h	equ	0xFE2
  5346                           fsr1l	equ	0xFE1
  5347                           indf2	equ	0xFDF
  5348                           postinc2	equ	0xFDE
  5349                           postdec2	equ	0xFDD
  5350                           plusw2	equ	0xFDB
  5351                           fsr2h	equ	0xFDA
  5352                           fsr2l	equ	0xFD9
  5353                           status	equ	0xFD8
  5354                           
  5355 ;; *************** function _read_cdc2 *****************
  5356 ;; Defined at:
  5357 ;;		line 281 in file "AD7147.c"
  5358 ;; Parameters:    Size  Location     Type
  5359 ;;  sensor_value    2   22[COMRAM] PTR unsigned int 
  5360 ;;		 -> sensor_values(48), 
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;  i               2   24[COMRAM] unsigned int 
  5363 ;; Return value:  Size  Location     Type
  5364 ;;                  1    wreg      void 
  5365 ;; Registers used:
  5366 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5372 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5373 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5375 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5376 ;;Total ram usage:        4 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    1
  5379 ;; This function calls:
  5380 ;;		_r16_spi
  5381 ;;		i2_get_CDC
  5382 ;;		i2_w16_r16_spi
  5383 ;; This function is called by:
  5384 ;;		_ISR
  5385 ;; This function uses a non-reentrant model
  5386 ;;
  5387                           
  5388                           	psect	text27
  5389  000DFA                     __ptext27:
  5390                           	opt stack 0
  5391  000DFA                     _read_cdc2:
  5392                           	opt stack 25
  5393                           
  5394                           ;AD7147.c: 283: get_CDC(2,0);
  5395                           
  5396                           ;incstack = 0
  5397  000DFA  0E00               	movlw	0
  5398  000DFC  6E02               	movwf	i2get_CDC@cdc+1,c
  5399  000DFE  0E02               	movlw	2
  5400  000E00  6E01               	movwf	i2get_CDC@cdc,c
  5401  000E02  0E00               	movlw	0
  5402  000E04  6E04               	movwf	i2get_CDC@state+1,c
  5403  000E06  0E00               	movlw	0
  5404  000E08  6E03               	movwf	i2get_CDC@state,c
  5405  000E0A  ECA7  F009         	call	i2_get_CDC	;wreg free
  5406                           
  5407                           ;AD7147.c: 284: sensor_values[12] = w16_r16_spi(0xE400 + 0x00B);
  5408  000E0E  0EE4               	movlw	228
  5409  000E10  6E02               	movwf	i2w16_r16_spi@address+1,c
  5410  000E12  0E0B               	movlw	11
  5411  000E14  6E01               	movwf	i2w16_r16_spi@address,c
  5412  000E16  ECBD  F007         	call	i2_w16_r16_spi	;wreg free
  5413  000E1A  EE20 F018          	lfsr	2,24
  5414  000E1E  5017               	movf	read_cdc2@sensor_values,w,c
  5415  000E20  26D9               	addwf	fsr2l,f,c
  5416  000E22  5018               	movf	read_cdc2@sensor_values+1,w,c
  5417  000E24  22DA               	addwfc	fsr2h,f,c
  5418  000E26  C001  FFDE         	movff	?i2_w16_r16_spi,postinc2
  5419  000E2A  C002  FFDD         	movff	?i2_w16_r16_spi+1,postdec2
  5420                           
  5421                           ;AD7147.c: 285: for(unsigned int i = 13; i<17; i++)
  5422  000E2E  0E00               	movlw	0
  5423  000E30  6E1A               	movwf	read_cdc2@i+1,c
  5424  000E32  0E0D               	movlw	13
  5425  000E34  6E19               	movwf	read_cdc2@i,c
  5426  000E36                     i2l2251:
  5427  000E36  501A               	movf	read_cdc2@i+1,w,c
  5428  000E38  E116               	bnz	i2l2261
  5429  000E3A  0E11               	movlw	17
  5430  000E3C  5C19               	subwf	read_cdc2@i,w,c
  5431  000E3E  B0D8               	btfsc	status,0,c
  5432  000E40  D012               	goto	i2u104_40
  5433                           
  5434                           ;AD7147.c: 286: {
  5435                           ;AD7147.c: 287: sensor_values[i] = r16_spi();
  5436  000E42  ECCC  F008         	call	_r16_spi	;wreg free
  5437  000E46  90D8               	bcf	status,0,c
  5438  000E48  3419               	rlcf	read_cdc2@i,w,c
  5439  000E4A  6ED9               	movwf	fsr2l,c
  5440  000E4C  341A               	rlcf	read_cdc2@i+1,w,c
  5441  000E4E  6EDA               	movwf	fsr2h,c
  5442  000E50  5017               	movf	read_cdc2@sensor_values,w,c
  5443  000E52  26D9               	addwf	fsr2l,f,c
  5444  000E54  5018               	movf	read_cdc2@sensor_values+1,w,c
  5445  000E56  22DA               	addwfc	fsr2h,f,c
  5446  000E58  C001  FFDE         	movff	?_r16_spi,postinc2
  5447  000E5C  C002  FFDD         	movff	?_r16_spi+1,postdec2
  5448  000E60  4A19               	infsnz	read_cdc2@i,f,c
  5449  000E62  2A1A               	incf	read_cdc2@i+1,f,c
  5450  000E64  D7E8               	goto	i2l2251
  5451  000E66                     i2u104_40:
  5452  000E66                     i2l2261:
  5453                           
  5454                           ;AD7147.c: 288: }
  5455                           ;AD7147.c: 289: get_CDC(2,1);
  5456  000E66  0E00               	movlw	0
  5457  000E68  6E02               	movwf	i2get_CDC@cdc+1,c
  5458  000E6A  0E02               	movlw	2
  5459  000E6C  6E01               	movwf	i2get_CDC@cdc,c
  5460  000E6E  0E00               	movlw	0
  5461  000E70  6E04               	movwf	i2get_CDC@state+1,c
  5462  000E72  0E01               	movlw	1
  5463  000E74  6E03               	movwf	i2get_CDC@state,c
  5464  000E76  ECA7  F009         	call	i2_get_CDC	;wreg free
  5465  000E7A  0012               	return		;funcret
  5466  000E7C                     __end_of_read_cdc2:
  5467                           	opt stack 0
  5468                           pclatu	equ	0xFFB
  5469                           pclath	equ	0xFFA
  5470                           tblptru	equ	0xFF8
  5471                           tblptrh	equ	0xFF7
  5472                           tblptrl	equ	0xFF6
  5473                           tablat	equ	0xFF5
  5474                           prodh	equ	0xFF4
  5475                           prodl	equ	0xFF3
  5476                           intcon	equ	0xFF2
  5477                           intcon2	equ	0xFF1
  5478                           intcon3	equ	0xFF0
  5479                           postinc0	equ	0xFEE
  5480                           fsr0h	equ	0xFEA
  5481                           fsr0l	equ	0xFE9
  5482                           wreg	equ	0xFE8
  5483                           plusw1	equ	0xFE3
  5484                           fsr1h	equ	0xFE2
  5485                           fsr1l	equ	0xFE1
  5486                           indf2	equ	0xFDF
  5487                           postinc2	equ	0xFDE
  5488                           postdec2	equ	0xFDD
  5489                           plusw2	equ	0xFDB
  5490                           fsr2h	equ	0xFDA
  5491                           fsr2l	equ	0xFD9
  5492                           status	equ	0xFD8
  5493                           
  5494 ;; *************** function _read_cdc1 *****************
  5495 ;; Defined at:
  5496 ;;		line 271 in file "AD7147.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;  sensor_value    2   22[COMRAM] PTR unsigned int 
  5499 ;;		 -> sensor_values(48), 
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;  i               2   24[COMRAM] unsigned int 
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  1    wreg      void 
  5504 ;; Registers used:
  5505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5511 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5512 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5514 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5515 ;;Total ram usage:        4 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:    1
  5518 ;; This function calls:
  5519 ;;		_r16_spi
  5520 ;;		i2_get_CDC
  5521 ;;		i2_w16_r16_spi
  5522 ;; This function is called by:
  5523 ;;		_ISR
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           	psect	text28
  5528  000EFC                     __ptext28:
  5529                           	opt stack 0
  5530  000EFC                     _read_cdc1:
  5531                           	opt stack 25
  5532                           
  5533                           ;AD7147.c: 273: get_CDC(1,0);
  5534                           
  5535                           ;incstack = 0
  5536  000EFC  0E00               	movlw	0
  5537  000EFE  6E02               	movwf	i2get_CDC@cdc+1,c
  5538  000F00  0E01               	movlw	1
  5539  000F02  6E01               	movwf	i2get_CDC@cdc,c
  5540  000F04  0E00               	movlw	0
  5541  000F06  6E04               	movwf	i2get_CDC@state+1,c
  5542  000F08  0E00               	movlw	0
  5543  000F0A  6E03               	movwf	i2get_CDC@state,c
  5544  000F0C  ECA7  F009         	call	i2_get_CDC	;wreg free
  5545                           
  5546                           ;AD7147.c: 274: sensor_values[0] = w16_r16_spi(0xE400 + 0x00B);
  5547  000F10  0EE4               	movlw	228
  5548  000F12  6E02               	movwf	i2w16_r16_spi@address+1,c
  5549  000F14  0E0B               	movlw	11
  5550  000F16  6E01               	movwf	i2w16_r16_spi@address,c
  5551  000F18  ECBD  F007         	call	i2_w16_r16_spi	;wreg free
  5552  000F1C  C017  FFD9         	movff	read_cdc1@sensor_values,fsr2l
  5553  000F20  C018  FFDA         	movff	read_cdc1@sensor_values+1,fsr2h
  5554  000F24  C001  FFDE         	movff	?i2_w16_r16_spi,postinc2
  5555  000F28  C002  FFDD         	movff	?i2_w16_r16_spi+1,postdec2
  5556                           
  5557                           ;AD7147.c: 275: for(unsigned int i = 1; i<3; i++)
  5558  000F2C  0E00               	movlw	0
  5559  000F2E  6E1A               	movwf	read_cdc1@i+1,c
  5560  000F30  0E01               	movlw	1
  5561  000F32  6E19               	movwf	read_cdc1@i,c
  5562  000F34                     i2l2233:
  5563  000F34  501A               	movf	read_cdc1@i+1,w,c
  5564  000F36  E116               	bnz	i2l2243
  5565  000F38  0E03               	movlw	3
  5566  000F3A  5C19               	subwf	read_cdc1@i,w,c
  5567  000F3C  B0D8               	btfsc	status,0,c
  5568  000F3E  D012               	goto	i2u102_40
  5569                           
  5570                           ;AD7147.c: 276: {
  5571                           ;AD7147.c: 277: sensor_values[i] = r16_spi();
  5572  000F40  ECCC  F008         	call	_r16_spi	;wreg free
  5573  000F44  90D8               	bcf	status,0,c
  5574  000F46  3419               	rlcf	read_cdc1@i,w,c
  5575  000F48  6ED9               	movwf	fsr2l,c
  5576  000F4A  341A               	rlcf	read_cdc1@i+1,w,c
  5577  000F4C  6EDA               	movwf	fsr2h,c
  5578  000F4E  5017               	movf	read_cdc1@sensor_values,w,c
  5579  000F50  26D9               	addwf	fsr2l,f,c
  5580  000F52  5018               	movf	read_cdc1@sensor_values+1,w,c
  5581  000F54  22DA               	addwfc	fsr2h,f,c
  5582  000F56  C001  FFDE         	movff	?_r16_spi,postinc2
  5583  000F5A  C002  FFDD         	movff	?_r16_spi+1,postdec2
  5584  000F5E  4A19               	infsnz	read_cdc1@i,f,c
  5585  000F60  2A1A               	incf	read_cdc1@i+1,f,c
  5586  000F62  D7E8               	goto	i2l2233
  5587  000F64                     i2u102_40:
  5588  000F64                     i2l2243:
  5589                           
  5590                           ;AD7147.c: 278: }
  5591                           ;AD7147.c: 279: get_CDC(1,1);
  5592  000F64  0E00               	movlw	0
  5593  000F66  6E02               	movwf	i2get_CDC@cdc+1,c
  5594  000F68  0E01               	movlw	1
  5595  000F6A  6E01               	movwf	i2get_CDC@cdc,c
  5596  000F6C  0E00               	movlw	0
  5597  000F6E  6E04               	movwf	i2get_CDC@state+1,c
  5598  000F70  0E01               	movlw	1
  5599  000F72  6E03               	movwf	i2get_CDC@state,c
  5600  000F74  ECA7  F009         	call	i2_get_CDC	;wreg free
  5601  000F78  0012               	return		;funcret
  5602  000F7A                     __end_of_read_cdc1:
  5603                           	opt stack 0
  5604                           pclatu	equ	0xFFB
  5605                           pclath	equ	0xFFA
  5606                           tblptru	equ	0xFF8
  5607                           tblptrh	equ	0xFF7
  5608                           tblptrl	equ	0xFF6
  5609                           tablat	equ	0xFF5
  5610                           prodh	equ	0xFF4
  5611                           prodl	equ	0xFF3
  5612                           intcon	equ	0xFF2
  5613                           intcon2	equ	0xFF1
  5614                           intcon3	equ	0xFF0
  5615                           postinc0	equ	0xFEE
  5616                           fsr0h	equ	0xFEA
  5617                           fsr0l	equ	0xFE9
  5618                           wreg	equ	0xFE8
  5619                           plusw1	equ	0xFE3
  5620                           fsr1h	equ	0xFE2
  5621                           fsr1l	equ	0xFE1
  5622                           indf2	equ	0xFDF
  5623                           postinc2	equ	0xFDE
  5624                           postdec2	equ	0xFDD
  5625                           plusw2	equ	0xFDB
  5626                           fsr2h	equ	0xFDA
  5627                           fsr2l	equ	0xFD9
  5628                           status	equ	0xFD8
  5629                           
  5630 ;; *************** function i2_w16_r16_spi *****************
  5631 ;; Defined at:
  5632 ;;		line 89 in file "spi.c"
  5633 ;; Parameters:    Size  Location     Type
  5634 ;;  address         2    0[COMRAM] unsigned int 
  5635 ;; Auto vars:     Size  Location     Type
  5636 ;;  w16_r16_spi     2   20[COMRAM] unsigned int 
  5637 ;;  w16_r16_spi     2   18[COMRAM] unsigned int 
  5638 ;;  w16_r16_spi     2   16[COMRAM] unsigned int 
  5639 ;;  w16_r16_spi     2   14[COMRAM] unsigned int 
  5640 ;;  w16_r16_spi     2   12[COMRAM] unsigned int 
  5641 ;;  w16_r16_spi     2   10[COMRAM] unsigned int 
  5642 ;;  w16_r16_spi     2    8[COMRAM] unsigned int 
  5643 ;;  w16_r16_spi     2    6[COMRAM] unsigned int 
  5644 ;;  w16_r16_spi     2    4[COMRAM] unsigned int 
  5645 ;; Return value:  Size  Location     Type
  5646 ;;                  2    0[COMRAM] unsigned int 
  5647 ;; Registers used:
  5648 ;;		wreg, status,2, status,0
  5649 ;; Tracked objects:
  5650 ;;		On entry : 0/0
  5651 ;;		On exit  : 0/0
  5652 ;;		Unchanged: 0/0
  5653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5654 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5655 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5656 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5657 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5658 ;;Total ram usage:       22 bytes
  5659 ;; Hardware stack levels used:    1
  5660 ;; This function calls:
  5661 ;;		Nothing
  5662 ;; This function is called by:
  5663 ;;		_read_cdc1
  5664 ;;		_read_cdc2
  5665 ;;		i2_read_AD7147
  5666 ;; This function uses a non-reentrant model
  5667 ;;
  5668                           
  5669                           	psect	text29
  5670  000F7A                     __ptext29:
  5671                           	opt stack 0
  5672  000F7A                     i2_w16_r16_spi:
  5673                           	opt stack 25
  5674                           
  5675                           ;spi.c: 91: unsigned int address_low, address_high, result;
  5676                           ;spi.c: 92: unsigned int blank_low = 0x000;
  5677                           
  5678                           ;incstack = 0
  5679  000F7A  0E00               	movlw	0
  5680  000F7C  6E10               	movwf	i2w16_r16_spi@blank_low+1,c
  5681  000F7E  0E00               	movlw	0
  5682  000F80  6E0F               	movwf	i2w16_r16_spi@blank_low,c
  5683                           
  5684                           ;spi.c: 93: unsigned int blank_high = 0x000;
  5685  000F82  0E00               	movlw	0
  5686  000F84  6E12               	movwf	i2w16_r16_spi@blank_high+1,c
  5687  000F86  0E00               	movlw	0
  5688  000F88  6E11               	movwf	i2w16_r16_spi@blank_high,c
  5689                           
  5690                           ;spi.c: 94: unsigned int p1, p2, p3, p4;
  5691                           ;spi.c: 96: address_low = address & 0xFF;
  5692  000F8A  5001               	movf	i2w16_r16_spi@address,w,c
  5693  000F8C  6E09               	movwf	i2w16_r16_spi@address_low,c
  5694  000F8E  6A0A               	clrf	i2w16_r16_spi@address_low+1,c
  5695                           
  5696                           ;spi.c: 97: address_high = (address >> 8) & 0xFF;
  5697  000F90  C001  F003         	movff	i2w16_r16_spi@address,??i2_w16_r16_spi
  5698  000F94  C002  F004         	movff	i2w16_r16_spi@address+1,??i2_w16_r16_spi+1
  5699  000F98  C004  F003         	movff	??i2_w16_r16_spi+1,??i2_w16_r16_spi
  5700  000F9C  6A04               	clrf	??i2_w16_r16_spi+1,c
  5701  000F9E  5003               	movf	??i2_w16_r16_spi,w,c
  5702  000FA0  6E0B               	movwf	i2w16_r16_spi@address_high,c
  5703  000FA2  6A0C               	clrf	i2w16_r16_spi@address_high+1,c
  5704                           
  5705                           ;spi.c: 99: SSPBUF = address_high;
  5706  000FA4  C00B  FFC9         	movff	i2w16_r16_spi@address_high,4041	;volatile
  5707  000FA8  A0C7               	btfss	4039,0,c	;volatile
  5708  000FAA  D7FE               	goto	i2l301
  5709                           
  5710                           ;spi.c: 101: p1 = SSPBUF;
  5711  000FAC  CFC9 F005          	movff	4041,i2w16_r16_spi@p1	;volatile
  5712  000FB0  6A06               	clrf	i2w16_r16_spi@p1+1,c
  5713                           
  5714                           ;spi.c: 103: SSPBUF = address_low;
  5715  000FB2  C009  FFC9         	movff	i2w16_r16_spi@address_low,4041	;volatile
  5716  000FB6  A0C7               	btfss	4039,0,c	;volatile
  5717  000FB8  D7FE               	goto	i2l304
  5718                           
  5719                           ;spi.c: 105: p2 = SSPBUF;
  5720  000FBA  CFC9 F007          	movff	4041,i2w16_r16_spi@p2	;volatile
  5721  000FBE  6A08               	clrf	i2w16_r16_spi@p2+1,c
  5722                           
  5723                           ;spi.c: 107: SSPBUF = blank_high;
  5724  000FC0  C011  FFC9         	movff	i2w16_r16_spi@blank_high,4041	;volatile
  5725  000FC4  A0C7               	btfss	4039,0,c	;volatile
  5726  000FC6  D7FE               	goto	i2l307
  5727                           
  5728                           ;spi.c: 109: p3 = SSPBUF;
  5729  000FC8  CFC9 F013          	movff	4041,i2w16_r16_spi@p3	;volatile
  5730  000FCC  6A14               	clrf	i2w16_r16_spi@p3+1,c
  5731                           
  5732                           ;spi.c: 111: SSPBUF = blank_low;
  5733  000FCE  C00F  FFC9         	movff	i2w16_r16_spi@blank_low,4041	;volatile
  5734  000FD2  A0C7               	btfss	4039,0,c	;volatile
  5735  000FD4  D7FE               	goto	i2l310
  5736                           
  5737                           ;spi.c: 113: p4 = SSPBUF;
  5738  000FD6  CFC9 F015          	movff	4041,i2w16_r16_spi@p4	;volatile
  5739  000FDA  6A16               	clrf	i2w16_r16_spi@p4+1,c
  5740                           
  5741                           ;spi.c: 115: result = (p3 << 8) + p4;
  5742  000FDC  5013               	movf	i2w16_r16_spi@p3,w,c
  5743  000FDE  6E04               	movwf	(??i2_w16_r16_spi+1)& (0+255),c
  5744  000FE0  6A03               	clrf	??i2_w16_r16_spi& (0+255),c
  5745  000FE2  5015               	movf	i2w16_r16_spi@p4,w,c
  5746  000FE4  2403               	addwf	??i2_w16_r16_spi,w,c
  5747  000FE6  6E0D               	movwf	i2w16_r16_spi@result,c
  5748  000FE8  5016               	movf	i2w16_r16_spi@p4+1,w,c
  5749  000FEA  2004               	addwfc	??i2_w16_r16_spi+1,w,c
  5750  000FEC  6E0E               	movwf	i2w16_r16_spi@result+1,c
  5751                           
  5752                           ;spi.c: 116: return result;
  5753  000FEE  C00D  F001         	movff	i2w16_r16_spi@result,?i2_w16_r16_spi
  5754  000FF2  C00E  F002         	movff	i2w16_r16_spi@result+1,?i2_w16_r16_spi+1
  5755  000FF6  0012               	return	
  5756  000FF8                     __end_ofi2_w16_r16_spi:
  5757                           	opt stack 0
  5758                           pclatu	equ	0xFFB
  5759                           pclath	equ	0xFFA
  5760                           tblptru	equ	0xFF8
  5761                           tblptrh	equ	0xFF7
  5762                           tblptrl	equ	0xFF6
  5763                           tablat	equ	0xFF5
  5764                           prodh	equ	0xFF4
  5765                           prodl	equ	0xFF3
  5766                           intcon	equ	0xFF2
  5767                           intcon2	equ	0xFF1
  5768                           intcon3	equ	0xFF0
  5769                           postinc0	equ	0xFEE
  5770                           fsr0h	equ	0xFEA
  5771                           fsr0l	equ	0xFE9
  5772                           wreg	equ	0xFE8
  5773                           plusw1	equ	0xFE3
  5774                           fsr1h	equ	0xFE2
  5775                           fsr1l	equ	0xFE1
  5776                           indf2	equ	0xFDF
  5777                           postinc2	equ	0xFDE
  5778                           postdec2	equ	0xFDD
  5779                           plusw2	equ	0xFDB
  5780                           fsr2h	equ	0xFDA
  5781                           fsr2l	equ	0xFD9
  5782                           status	equ	0xFD8
  5783                           
  5784 ;; *************** function i2_get_CDC *****************
  5785 ;; Defined at:
  5786 ;;		line 343 in file "AD7147.c"
  5787 ;; Parameters:    Size  Location     Type
  5788 ;;  cdc             2    0[COMRAM] unsigned int 
  5789 ;;  state           2    2[COMRAM] unsigned int 
  5790 ;; Auto vars:     Size  Location     Type
  5791 ;;		None
  5792 ;; Return value:  Size  Location     Type
  5793 ;;                  1    wreg      void 
  5794 ;; Registers used:
  5795 ;;		wreg, status,2, status,0
  5796 ;; Tracked objects:
  5797 ;;		On entry : 0/0
  5798 ;;		On exit  : 0/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5801 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5804 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5805 ;;Total ram usage:        4 bytes
  5806 ;; Hardware stack levels used:    1
  5807 ;; This function calls:
  5808 ;;		Nothing
  5809 ;; This function is called by:
  5810 ;;		_read_cdc1
  5811 ;;		_read_cdc2
  5812 ;;		i2_read_AD7147
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           	psect	text30
  5817  00134E                     __ptext30:
  5818                           	opt stack 0
  5819  00134E                     i2_get_CDC:
  5820                           	opt stack 25
  5821                           
  5822                           ;AD7147.c: 345: if (state == 1)
  5823                           
  5824                           ;incstack = 0
  5825  00134E  0403               	decf	i2get_CDC@state,w,c
  5826  001350  1004               	iorwf	i2get_CDC@state+1,w,c
  5827  001352  A4D8               	btfss	status,2,c
  5828  001354  D003               	goto	i2l77
  5829                           
  5830                           ;AD7147.c: 346: {
  5831                           ;AD7147.c: 347: LATCbits.LATC1 = 1;
  5832  001356  828B               	bsf	3979,1,c	;volatile
  5833                           
  5834                           ;AD7147.c: 348: LATCbits.LATC0 = 1;
  5835  001358  808B               	bsf	3979,0,c	;volatile
  5836                           
  5837                           ;AD7147.c: 349: }
  5838  00135A  0012               	return	
  5839  00135C                     i2l77:
  5840                           
  5841                           ;AD7147.c: 350: else
  5842                           ;AD7147.c: 351: {
  5843                           ;AD7147.c: 352: if (cdc == 1)
  5844  00135C  0401               	decf	i2get_CDC@cdc,w,c
  5845  00135E  1002               	iorwf	i2get_CDC@cdc+1,w,c
  5846  001360  A4D8               	btfss	status,2,c
  5847  001362  D003               	goto	i2l79
  5848                           
  5849                           ;AD7147.c: 353: {
  5850                           ;AD7147.c: 354: LATCbits.LATC1 = 0;
  5851  001364  928B               	bcf	3979,1,c	;volatile
  5852                           
  5853                           ;AD7147.c: 355: LATCbits.LATC0 = 1;
  5854  001366  808B               	bsf	3979,0,c	;volatile
  5855                           
  5856                           ;AD7147.c: 356: }
  5857  001368  0012               	return	
  5858  00136A                     i2l79:
  5859                           
  5860                           ;AD7147.c: 357: else
  5861                           ;AD7147.c: 358: {
  5862                           ;AD7147.c: 359: LATCbits.LATC0 = 0;
  5863  00136A  908B               	bcf	3979,0,c	;volatile
  5864                           
  5865                           ;AD7147.c: 360: LATCbits.LATC1 = 1;
  5866  00136C  828B               	bsf	3979,1,c	;volatile
  5867  00136E  0012               	return	
  5868  001370                     __end_ofi2_get_CDC:
  5869                           	opt stack 0
  5870                           pclatu	equ	0xFFB
  5871                           pclath	equ	0xFFA
  5872                           tblptru	equ	0xFF8
  5873                           tblptrh	equ	0xFF7
  5874                           tblptrl	equ	0xFF6
  5875                           tablat	equ	0xFF5
  5876                           prodh	equ	0xFF4
  5877                           prodl	equ	0xFF3
  5878                           intcon	equ	0xFF2
  5879                           intcon2	equ	0xFF1
  5880                           intcon3	equ	0xFF0
  5881                           postinc0	equ	0xFEE
  5882                           fsr0h	equ	0xFEA
  5883                           fsr0l	equ	0xFE9
  5884                           wreg	equ	0xFE8
  5885                           plusw1	equ	0xFE3
  5886                           fsr1h	equ	0xFE2
  5887                           fsr1l	equ	0xFE1
  5888                           indf2	equ	0xFDF
  5889                           postinc2	equ	0xFDE
  5890                           postdec2	equ	0xFDD
  5891                           plusw2	equ	0xFDB
  5892                           fsr2h	equ	0xFDA
  5893                           fsr2l	equ	0xFD9
  5894                           status	equ	0xFD8
  5895                           
  5896 ;; *************** function _r16_spi *****************
  5897 ;; Defined at:
  5898 ;;		line 70 in file "spi.c"
  5899 ;; Parameters:    Size  Location     Type
  5900 ;;		None
  5901 ;; Auto vars:     Size  Location     Type
  5902 ;;  result          2   12[COMRAM] unsigned int 
  5903 ;;  p2              2   10[COMRAM] unsigned int 
  5904 ;;  p1              2    8[COMRAM] unsigned int 
  5905 ;;  blank_high      2    6[COMRAM] unsigned int 
  5906 ;;  blank_low       2    4[COMRAM] unsigned int 
  5907 ;; Return value:  Size  Location     Type
  5908 ;;                  2    0[COMRAM] unsigned int 
  5909 ;; Registers used:
  5910 ;;		wreg, status,2, status,0
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5916 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5917 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5918 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5919 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5920 ;;Total ram usage:       14 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; This function calls:
  5923 ;;		Nothing
  5924 ;; This function is called by:
  5925 ;;		_read_cdc1
  5926 ;;		_read_cdc2
  5927 ;; This function uses a non-reentrant model
  5928 ;;
  5929                           
  5930                           	psect	text31
  5931  001198                     __ptext31:
  5932                           	opt stack 0
  5933  001198                     _r16_spi:
  5934                           	opt stack 25
  5935                           
  5936                           ;spi.c: 72: unsigned int blank_low = 0x000;
  5937                           
  5938                           ;incstack = 0
  5939  001198  0E00               	movlw	0
  5940  00119A  6E06               	movwf	r16_spi@blank_low+1,c
  5941  00119C  0E00               	movlw	0
  5942  00119E  6E05               	movwf	r16_spi@blank_low,c
  5943                           
  5944                           ;spi.c: 73: unsigned int blank_high = 0x000;
  5945  0011A0  0E00               	movlw	0
  5946  0011A2  6E08               	movwf	r16_spi@blank_high+1,c
  5947  0011A4  0E00               	movlw	0
  5948  0011A6  6E07               	movwf	r16_spi@blank_high,c
  5949                           
  5950                           ;spi.c: 74: unsigned int p1, p2, result;
  5951                           ;spi.c: 77: SSPBUF = blank_high;
  5952  0011A8  C007  FFC9         	movff	r16_spi@blank_high,4041	;volatile
  5953  0011AC  A0C7               	btfss	4039,0,c	;volatile
  5954  0011AE  D7FE               	goto	i2l292
  5955                           
  5956                           ;spi.c: 79: p1 = SSPBUF;
  5957  0011B0  CFC9 F009          	movff	4041,r16_spi@p1	;volatile
  5958  0011B4  6A0A               	clrf	r16_spi@p1+1,c
  5959                           
  5960                           ;spi.c: 81: SSPBUF = blank_low;
  5961  0011B6  C005  FFC9         	movff	r16_spi@blank_low,4041	;volatile
  5962  0011BA  A0C7               	btfss	4039,0,c	;volatile
  5963  0011BC  D7FE               	goto	i2l295
  5964                           
  5965                           ;spi.c: 83: p2 = SSPBUF;
  5966  0011BE  CFC9 F00B          	movff	4041,r16_spi@p2	;volatile
  5967  0011C2  6A0C               	clrf	r16_spi@p2+1,c
  5968                           
  5969                           ;spi.c: 85: result = (p1 << 8) + p2;
  5970  0011C4  5009               	movf	r16_spi@p1,w,c
  5971  0011C6  6E04               	movwf	(??_r16_spi+1)& (0+255),c
  5972  0011C8  6A03               	clrf	??_r16_spi& (0+255),c
  5973  0011CA  500B               	movf	r16_spi@p2,w,c
  5974  0011CC  2403               	addwf	??_r16_spi,w,c
  5975  0011CE  6E0D               	movwf	r16_spi@result,c
  5976  0011D0  500C               	movf	r16_spi@p2+1,w,c
  5977  0011D2  2004               	addwfc	??_r16_spi+1,w,c
  5978  0011D4  6E0E               	movwf	r16_spi@result+1,c
  5979                           
  5980                           ;spi.c: 86: return result;
  5981  0011D6  C00D  F001         	movff	r16_spi@result,?_r16_spi
  5982  0011DA  C00E  F002         	movff	r16_spi@result+1,?_r16_spi+1
  5983  0011DE  0012               	return	
  5984  0011E0                     __end_of_r16_spi:
  5985                           	opt stack 0
  5986  0000                     pclatu	equ	0xFFB
  5987                           pclath	equ	0xFFA
  5988                           tblptru	equ	0xFF8
  5989                           tblptrh	equ	0xFF7
  5990                           tblptrl	equ	0xFF6
  5991                           tablat	equ	0xFF5
  5992                           prodh	equ	0xFF4
  5993                           prodl	equ	0xFF3
  5994                           intcon	equ	0xFF2
  5995                           intcon2	equ	0xFF1
  5996                           intcon3	equ	0xFF0
  5997                           postinc0	equ	0xFEE
  5998                           fsr0h	equ	0xFEA
  5999                           fsr0l	equ	0xFE9
  6000                           wreg	equ	0xFE8
  6001                           plusw1	equ	0xFE3
  6002                           fsr1h	equ	0xFE2
  6003                           fsr1l	equ	0xFE1
  6004                           indf2	equ	0xFDF
  6005                           postinc2	equ	0xFDE
  6006                           postdec2	equ	0xFDD
  6007                           plusw2	equ	0xFDB
  6008                           fsr2h	equ	0xFDA
  6009                           fsr2l	equ	0xFD9
  6010                           status	equ	0xFD8
  6011                           pclatu	equ	0xFFB
  6012                           pclath	equ	0xFFA
  6013                           tblptru	equ	0xFF8
  6014                           tblptrh	equ	0xFF7
  6015                           tblptrl	equ	0xFF6
  6016                           tablat	equ	0xFF5
  6017                           prodh	equ	0xFF4
  6018                           prodl	equ	0xFF3
  6019                           intcon	equ	0xFF2
  6020                           intcon2	equ	0xFF1
  6021                           intcon3	equ	0xFF0
  6022                           postinc0	equ	0xFEE
  6023                           fsr0h	equ	0xFEA
  6024                           fsr0l	equ	0xFE9
  6025                           wreg	equ	0xFE8
  6026                           plusw1	equ	0xFE3
  6027                           fsr1h	equ	0xFE2
  6028                           fsr1l	equ	0xFE1
  6029                           indf2	equ	0xFDF
  6030                           postinc2	equ	0xFDE
  6031                           postdec2	equ	0xFDD
  6032                           plusw2	equ	0xFDB
  6033                           fsr2h	equ	0xFDA
  6034                           fsr2l	equ	0xFD9
  6035                           status	equ	0xFD8
  6036                           
  6037                           	psect	rparam
  6038  0000                     pclatu	equ	0xFFB
  6039                           pclath	equ	0xFFA
  6040                           tblptru	equ	0xFF8
  6041                           tblptrh	equ	0xFF7
  6042                           tblptrl	equ	0xFF6
  6043                           tablat	equ	0xFF5
  6044                           prodh	equ	0xFF4
  6045                           prodl	equ	0xFF3
  6046                           intcon	equ	0xFF2
  6047                           intcon2	equ	0xFF1
  6048                           intcon3	equ	0xFF0
  6049                           postinc0	equ	0xFEE
  6050                           fsr0h	equ	0xFEA
  6051                           fsr0l	equ	0xFE9
  6052                           wreg	equ	0xFE8
  6053                           plusw1	equ	0xFE3
  6054                           fsr1h	equ	0xFE2
  6055                           fsr1l	equ	0xFE1
  6056                           indf2	equ	0xFDF
  6057                           postinc2	equ	0xFDE
  6058                           postdec2	equ	0xFDD
  6059                           plusw2	equ	0xFDB
  6060                           fsr2h	equ	0xFDA
  6061                           fsr2l	equ	0xFD9
  6062                           status	equ	0xFD8
  6063                           
  6064                           	psect	temp
  6065  00005B                     btemp:
  6066                           	opt stack 0
  6067  00005B                     	ds	1
  6068  0000                     int$flags	set	btemp
  6069  0000                     wtemp6	set	btemp+1
  6070                           pclatu	equ	0xFFB
  6071                           pclath	equ	0xFFA
  6072                           tblptru	equ	0xFF8
  6073                           tblptrh	equ	0xFF7
  6074                           tblptrl	equ	0xFF6
  6075                           tablat	equ	0xFF5
  6076                           prodh	equ	0xFF4
  6077                           prodl	equ	0xFF3
  6078                           intcon	equ	0xFF2
  6079                           intcon2	equ	0xFF1
  6080                           intcon3	equ	0xFF0
  6081                           postinc0	equ	0xFEE
  6082                           fsr0h	equ	0xFEA
  6083                           fsr0l	equ	0xFE9
  6084                           wreg	equ	0xFE8
  6085                           plusw1	equ	0xFE3
  6086                           fsr1h	equ	0xFE2
  6087                           fsr1l	equ	0xFE1
  6088                           indf2	equ	0xFDF
  6089                           postinc2	equ	0xFDE
  6090                           postdec2	equ	0xFDD
  6091                           plusw2	equ	0xFDB
  6092                           fsr2h	equ	0xFDA
  6093                           fsr2l	equ	0xFD9
  6094                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         162
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     52      90
    BANK0           160     70     149
    BANK1           256      0      48
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 48
		 -> avail_sensors(BANK1[48]), 

    memset@p	PTR unsigned char  size(2) Largest target is 48
		 -> avail_sensors(BANK1[48]), 

    CDC_RESULT	PTR unsigned int [12] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__memset	PTR void  size(2) Largest target is 48
		 -> avail_sensors(BANK1[48]), 

    read_cdc2@sensor_values	PTR unsigned int  size(2) Largest target is 48
		 -> sensor_values(BANK0[48]), 

    read_cdc1@sensor_values	PTR unsigned int  size(2) Largest target is 48
		 -> sensor_values(BANK0[48]), 

    read_sensor@sensor_values	PTR unsigned int  size(2) Largest target is 48
		 -> sensor_values(BANK0[48]), 

    read_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 6
		 -> interrupt_values_cdc2(COMRAM[6]), interrupt_values_cdc1(COMRAM[6]), 

    write_AD7147@OutputBuffer	PTR unsigned int  size(2) Largest target is 16
		 -> setup_AD7147@StageBuffer(BANK0[16]), 

    setup_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 6
		 -> interrupt_values_cdc1(COMRAM[6]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->i2_read_AD7147
    i2_read_AD7147->i2_w16_r16_spi
    _read_cdc2->i2_w16_r16_spi
    _read_cdc1->i2_w16_r16_spi

Critical Paths under _main in BANK0

    _main->_setup_AD7147
    _switch_LED->_w32_spi
    _setup_AD7147->_write_AD7147
    _write_AD7147->_w32_spi
    _read_AD7147->_w16_r16_spi
    _read_sensor->_w16_r16_spi
    _sensor_CDC->_get_CDC
    _get_ID->_w16_r16_spi
    _blink_LED->_w32_spi
    _delay_ms->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   41394
                                             60 BANK0     10    10      0
                          _blink_LED
                           _delay_ms
                             _get_ID
                    _init_interrupts
                             _memset
                        _read_AD7147
                        _read_sensor
                       _setup_AD7147
                          _setup_mcu
                          _setup_spi
                         _switch_LED
                     _uart_read_char
                _uart_read_indicator
             _uart_read_unsigned_int
                    _uart_write_char
            _uart_write_unsigned_int
 ---------------------------------------------------------------------------------
 (1) _uart_write_unsigned_int                              4     2      2     470
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _uart_write_char                                      1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_read_unsigned_int                               8     6      2      69
                                              0 BANK0      8     6      2
                     _uart_read_char
 ---------------------------------------------------------------------------------
 (2) _uart_read_char                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uart_read_indicator                                  2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _switch_LED                                           8     4      4    4657
                                             22 BANK0      8     4      4
                           _delay_ms
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (1) _setup_spi                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_mcu                                            0     0      0       0
                          _init_uart
                         _setup_port
 ---------------------------------------------------------------------------------
 (2) _setup_port                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_AD7147                                        20    16      4   17706
                                             40 BANK0     20    16      4
                        _read_AD7147
                       _write_AD7147
 ---------------------------------------------------------------------------------
 (2) _write_AD7147                                        18     8     10    9843
                                             22 BANK0     18     8     10
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (2) _read_AD7147                                         12     4      8    4696
                                             22 BANK0     12     4      8
                            _get_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (1) _read_sensor                                         12     8      4    4363
                                             22 BANK0     12     8      4
                         _sensor_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (2) _sensor_CDC                                           4     0      4    3246
                                              4 BANK0      4     0      4
                            _get_CDC
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     324
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _init_interrupts                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_ID                                               5     3      2    3326
                                             22 BANK0      5     3      2
                            _get_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (3) _w16_r16_spi                                         22    20      2     611
                                              0 BANK0     22    20      2
 ---------------------------------------------------------------------------------
 (1) _blink_LED                                            4     2      2    4679
                                             22 BANK0      4     2      2
                           _delay_ms
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (2) _w32_spi                                             22    18      4     944
                                              0 BANK0     22    18      4
 ---------------------------------------------------------------------------------
 (2) _get_CDC                                              4     0      4    2572
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     877
                                              8 BANK0      5     3      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     452
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 18    18      0    2938
                                             34 COMRAM    18    18      0
                          _read_cdc1
                          _read_cdc2
                      i2_read_AD7147
 ---------------------------------------------------------------------------------
 (5) i2_read_AD7147                                       12     4      8    1050
                                             22 COMRAM    12     4      8
                          i2_get_CDC
                      i2_w16_r16_spi
 ---------------------------------------------------------------------------------
 (5) _read_cdc2                                            4     2      2     944
                                             22 COMRAM     4     2      2
                            _r16_spi
                          i2_get_CDC
                      i2_w16_r16_spi
 ---------------------------------------------------------------------------------
 (5) _read_cdc1                                            4     2      2     944
                                             22 COMRAM     4     2      2
                            _r16_spi
                          i2_get_CDC
                      i2_w16_r16_spi
 ---------------------------------------------------------------------------------
 (6) i2_w16_r16_spi                                       22    20      2     285
                                              0 COMRAM    22    20      2
 ---------------------------------------------------------------------------------
 (6) i2_get_CDC                                            4     0      4     356
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) _r16_spi                                             14    12      2     115
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _blink_LED
     _delay_ms
       ___awdiv
     _get_CDC
     _w32_spi
   _delay_ms
     ___awdiv
   _get_ID
     _get_CDC
     _w16_r16_spi
   _init_interrupts
   _memset
   _read_AD7147
     _get_CDC
     _w16_r16_spi
   _read_sensor
     _sensor_CDC
       _get_CDC
     _w16_r16_spi
   _setup_AD7147
     _read_AD7147
       _get_CDC
       _w16_r16_spi
     _write_AD7147
       _get_CDC
       _w32_spi
   _setup_mcu
     _init_uart
     _setup_port
   _setup_spi
   _switch_LED
     _delay_ms
       ___awdiv
     _get_CDC
     _w32_spi
   _uart_read_char
   _uart_read_indicator
   _uart_read_unsigned_int
     _uart_read_char
   _uart_write_char
   _uart_write_unsigned_int

 _ISR (ROOT)
   _read_cdc1
     _r16_spi
     i2_get_CDC
     i2_w16_r16_spi
   _read_cdc2
     _r16_spi
     i2_get_CDC
     i2_w16_r16_spi
   i2_read_AD7147
     i2_get_CDC
     i2_w16_r16_spi

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      30       8       18.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     46      95       5       93.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     34      5A       1       95.7%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11F       6        0.0%
DATA                 0      0     11F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Thu Nov 09 12:55:54 2017

                      _SSPSTATbits 000FC7                                 l32 0EDA  
                               l33 0EAA                                 l26 0C48  
                               l27 0C04                                 l61 1290  
                               l38 0B50                                 l70 0DD4  
                               l39 0B58                                 l77 1318  
                               l69 0DB6                                 l79 1326  
                     ___awdiv@sign 00B1                       __CFG_CP0$OFF 000000  
                              l301 0C9A                                l310 0CCA  
                              l304 0CAA                                l161 07C4  
                              l250 1258                                l162 0A50  
                              l251 1246                                l307 0CBA  
                              l172 0978                                l180 093C  
                              l164 0888                                l181 0960  
                              l173 08A4                                l165 07CE  
                              l350 1382                                l271 10BC  
                              l191 0A0E                                l167 0812  
                              l168 082C                                l185 0A1A  
                              l177 08E8                                l169 085A  
                              l274 10CC                                l194 0A3A  
                              l186 0988                                l347 137A  
                              l195 0A2A                                l187 0A00  
                              l268 10AC                                l188 09BC  
                              l277 10DC                                l197 0A2E  
                              l198 0A32                                l199 0A36  
                              l392 1202                                l393 11EC  
                              l394 11F6                                l386 13A4  
                              l387 13AE                                l580 0D36  
                              l581 0D2E                                l398 1222  
                              l584 0D56                                l585 0D60  
                              l577 0D08                   i2read_AD7147@cdc 001D  
                              l586 0D6E                                l578 0D18  
                              l837 12F4                                l838 12E2  
                ??_init_interrupts 00AC                                _ISR 0008  
                              u820 0D3A                                u870 127A  
                              u991 011C                                _cdc 0074  
                              wreg 000FE8                         _TXSTA1bits 000FAC  
                write_AD7147@index 00C8                               ?_ISR 0001  
                             l2321 13CE                               l2335 1212  
                             l2503 0A14                               l2349 12E2  
                             l2457 08F8                               l2469 0944  
                             l1919 1246                               u1000 0B42  
                             u1120 1212                               u1130 121E  
                             u1055 1114                               u1240 0944  
                             u1307 124E                               i2l32 1050  
                             i2l33 1022                               i2l77 135C  
                             i2l79 136A                      r16_spi@result 000D  
                 ??_uart_read_char 00AC             _uart_read_unsigned_int 12A8  
                             _main 0760                               fsr0h 000FEA  
                             fsr1h 000FE2                               fsr2h 000FDA  
                             fsr0l 000FE9                               indf2 000FDF  
                             fsr1l 000FE1                               fsr2l 000FD9  
                             btemp 005B   __size_of_uart_write_unsigned_int 001C  
                     ?_read_AD7147 00C2                    ??i2_w16_r16_spi 0003  
    uart_read_unsigned_int@message 00B0                               prodh 000FF4  
                             prodl 000FF3                               start 010E  
                    ??_w16_r16_spi 00AE                      __CFG_IESO$OFF 000000  
                    __CFG_FOSC$HS1 000000                       ___param_bank 000000  
           read_cdc2@sensor_values 0017                    __end_of_r16_spi 11E0  
                            ??_ISR 0023                    __end_of_w32_spi 10EA  
         __size_of_uart_write_char 000E                              ?_main 0001  
                  __end_of___awdiv 0D78                    ___awdiv@divisor 00AE  
                            _RC1IF 007CF5              w16_r16_spi@blank_high 00BC  
     read_AD7147@NumberOfRegisters 00C6                              i2l301 0FA8  
                            i2l310 0FD2                              i2l304 0FB6  
                            i2l154 008A                              i2l307 0FC4  
                            i2l155 00C2                              i2l292 11AC  
                            i2l295 11BA                    ___awdiv@counter 00B0  
                            _TRISC 000F94                    __end_of_get_CDC 132C  
                   __CFG_FCMEN$OFF 000000              __size_of_write_AD7147 009C  
                     ?_read_sensor 00C2                              _state 00F4  
                            main@i 00F0                              main@k 00EE  
                            pclath 000FFA                              tablat 000FF5  
                            plusw1 000FE3                              plusw2 000FDB  
                            status 000FD8                              wtemp6 005C  
           w16_r16_spi@address_low 00B4                     __CFG_MCLRE$OFF 000000  
                  __initialization 1148                 __size_ofi2_get_CDC 0022  
                     __end_of_main 0A6C             i2w16_r16_spi@blank_low 000F  
              __end_of_w16_r16_spi 0CF2                    switch_LED@state 00C4  
                     _write_AD7147 0BCE                             ??_main 00E8  
                    __activetblptr 000002                   ___awdiv@dividend 00AC  
         uart_read_indicator@count 00AC                        w32_spi@data 00AE  
                           i2l2233 0F34                             i2l2243 0F64  
                           i2l2251 0E36                             i2l2261 0E66  
                   __CFG_WDTEN$OFF 000000                             _RCREG1 000FAE  
                           _SPBRG1 000FAF                     read_AD7147@cdc 00C8  
                           _SSPBUF 000FC9              switch_LED@message_160 00C8  
                           _TXREG1 000FAD                          ??_r16_spi 0003  
                           _TXSTA1 000FAC                   __end_of_delay_ms 126C  
                        ??_w32_spi 00B0   write_AD7147@RegisterStartAddress 00C2  
                   __CFG_XINST$OFF 000000                          ??___awdiv 00B0  
                   __CFG_STVREN$ON 000000                             _get_ID 10EA  
                           _memset 12D8                             clear_0 116C  
                           clear_1 1178                             clear_2 1184  
                           _on_off 0072                   ___awdiv@quotient 00B2  
                        ??_get_CDC 00B0         write_AD7147@Register_Value 00CE  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                  ??_uart_write_char 00AC  
                __end_ofi2_get_CDC 1370                       i2get_CDC@cdc 0001  
          w16_r16_spi@address_high 00B6            _uart_write_unsigned_int 1370  
                       __accesstop 0060            __end_of__initialization 118A  
                    ___rparam_used 000001                        _w16_r16_spi 0C6A  
             __size_of_read_AD7147 0080                    _init_interrupts 132C  
                   __pcstackCOMRAM 0001                       __pidataBANK0 13EE  
             i2w16_r16_spi@address 0001            i2w16_r16_spi@blank_high 0011  
               __size_of_blink_LED 00C0              _interrupt_values_cdc1 0055  
            _interrupt_values_cdc2 004F                   r16_spi@blank_low 0005  
                     read_AD7147@i 00CC             __size_ofi2_read_AD7147 007A  
          ?_uart_read_unsigned_int 00AC                         __pbssBANK0 0060  
                       __pbssBANK1 0100               __size_of_read_sensor 00A2  
               __size_of_read_cdc1 007E                 __size_of_read_cdc2 0082  
               __size_of_init_uart 0014       __size_of_uart_read_indicator 0046  
                          ?_get_ID 00C2                         _break_loop 007A  
                          ?_memset 00AC                   __CFG_CANMX$PORTB 000000  
               __size_of_setup_mcu 000A  i2read_AD7147@RegisterStartAddress 0019  
  read_AD7147@RegisterStartAddress 00C4                 __size_of_setup_spi 0016  
                        ?_delay_ms 00B4     __end_of_uart_read_unsigned_int 12D8  
                    w16_r16_spi@p1 00B0                      w16_r16_spi@p2 00B2  
                    w16_r16_spi@p3 00BE                      w16_r16_spi@p4 00C0  
        ??_uart_write_unsigned_int 00AE            __end_of_init_interrupts 134E  
                __end_of_blink_LED 0B2C              read_AD7147@DataBuffer 00C2  
                          _r16_spi 1198                            _w32_spi 1072  
                    i2_read_AD7147 0FF8                            __Hparam 0000  
            __end_ofi2_w16_r16_spi 0FF8                            __Lparam 0000  
                          ___awdiv 0CF2                    __size_of_get_ID 005E  
         write_AD7147@OutputBuffer 00C6                    sensor_CDC@state 00B2  
                          __pcinit 1148                            _get_CDC 1308  
                  __size_of_memset 0030                            __ramtop 0F00  
                          __ptext0 0760                            __ptext1 1370  
                          __ptext2 13CA                            __ptext3 12A8  
                          __ptext4 13A2                            __ptext5 11E0  
                          __ptext6 0D78                            __ptext7 138C  
                          __ptext8 13E4                            __ptext9 13D8  
                     __size_of_ISR 0106                     w32_spi@address 00AC  
                __end_of_read_cdc1 0F7A                  __end_of_read_cdc2 0E7C  
                __end_of_init_uart 13CA                         ??_delay_ms 00B6  
                       get_CDC@cdc 00AC               end_of_initialization 118A  
                    ?_setup_AD7147 00D4                            memset@c 00AE  
                          memset@n 00B0                            memset@p 00B2  
                    __Lmediumconst 0000                     ?i2_read_AD7147 0017  
                __end_of_setup_mcu 13EE                  __end_of_setup_spi 13A2  
                          postdec2 000FDD    __end_of_uart_write_unsigned_int 138C  
                          postinc0 000FEE                            postinc2 000FDE  
                       _sensor_CDC 126C            __size_of_uart_read_char 0014  
                  _uart_write_char 13CA                         _setup_port 13D8  
                        _TRISBbits 000F93                          r16_spi@p1 0009  
                        r16_spi@p2 000B                     i2read_AD7147@i 0021  
                  write_AD7147@cdc 00CA           i2w16_r16_spi@address_low 0009  
                   ??_setup_AD7147 00D8                         _start_stop 00F2  
                        i2_get_CDC 134E                   ?_init_interrupts 0001  
            read_sensor@cdc_sensor 00CC                       ?_w16_r16_spi 00AC  
                       _switch_LED 0D78                          w32_spi@p1 00B2  
                        w32_spi@p2 00B4                          w32_spi@p3 00B6  
                        w32_spi@p4 00B8               w16_r16_spi@blank_low 00BA  
                   __end_of_get_ID 1148                     __end_of_memset 1308  
              w32_spi@address_high 00BC                start_initialization 1148  
              _uart_read_indicator 11E0                        __end_of_ISR 010E  
                switch_LED@message 00C6                uart_write_char@data 00AC  
                    _second_sensor 004D            i2read_AD7147@DataBuffer 0017  
                       ?i2_get_CDC 0001                    ??i2_read_AD7147 001F  
                r16_spi@blank_high 0007                      ??_read_AD7147 00CA  
          __end_of_uart_write_char 13D8               ?_uart_read_indicator 0001  
          setup_AD7147@StageBuffer 00D8                        ?_sensor_CDC 00B0  
                       read_cdc1@i 0019                         read_cdc2@i 0019  
                         ??_get_ID 00C4          i2w16_r16_spi@address_high 000B  
                      __pdataBANK0 00F2                           ??_memset 00B2  
         read_sensor@sensor_values 00C2             setup_AD7147@DataBuffer 00D4  
                      ?_setup_port 0001                        __pbssCOMRAM 0035  
                    __pcstackBANK0 00AC                      ??_read_sensor 00C6  
                __size_of_delay_ms 0046             write_AD7147@Data_Value 00D0  
              i2w16_r16_spi@result 000D                           ?_r16_spi 0001  
            ??_uart_read_indicator 00AC                           ?_w32_spi 00AC  
                      ?_switch_LED 00C2                          _blink_LED 0A6C  
                        __pintcode 0008                          _device_ID 0076  
                   _uart_read_char 13A2                __end_of_read_AD7147 0EFC  
                         ?___awdiv 00AC       i2read_AD7147@Register_Values 001F  
             __end_of_setup_AD7147 0760                           ?_get_CDC 00AC  
                    ?_write_AD7147 00C2                           _BAUDCON1 000FA7  
     uart_write_unsigned_int@char1 00AE       uart_write_unsigned_int@char2 00AF  
                        _indicator 007B                   w32_spi@data_high 00C0  
                        _read_cdc1 0EFC                          _read_cdc2 0DFA  
                        _init_uart 13B6                __size_of_sensor_CDC 003C  
                      ??i2_get_CDC 0005                           _LATCbits 000F8B  
                        delay_ms@j 00B7                          delay_ms@n 00B4  
              __end_of_read_sensor 0BCE      write_AD7147@NumberOfRegisters 00C4  
                        get_ID@cdc 00C2                           _PIE1bits 000F9D  
                         i2u102_40 0F64                __size_of_setup_port 000C  
                         i2u104_40 0E66                   ?_uart_write_char 0001  
           __end_of_uart_read_char 13B6                           _PIR1bits 000F9E  
                       ?_blink_LED 00C2                           _RCONbits 000FD0  
             __size_of_w16_r16_spi 0088                          _setup_mcu 13E4  
                        _setup_spi 138C                     ??_write_AD7147 00CC  
                  setup_AD7147@cdc 00D6         read_AD7147@Register_Values 00CA  
                     get_CDC@state 00AE                   __CFG_SOSCSEL$DIG 000000  
                        main@index 00EC           ?_uart_write_unsigned_int 00AC  
           __size_ofi2_w16_r16_spi 007E                __size_of_switch_LED 0082  
                       ?_read_cdc1 0017                         ?_read_cdc2 0017  
                       ?_init_uart 0001                        _INTCON2bits 000FF1  
                      _INTCON3bits 000FF0                 w32_spi@address_low 00BA  
                    switch_LED@cdc 00C2                         _CDC_RESULT 0035  
                  i2w16_r16_spi@p1 0005                    i2w16_r16_spi@p2 0007  
                  i2w16_r16_spi@p3 0013                    i2w16_r16_spi@p4 0015  
                      _read_AD7147 0E7C                   __size_of_r16_spi 0048  
   i2read_AD7147@NumberOfRegisters 001B                         _ANCON1bits 000F5C  
                         __Hrparam 0000             read_cdc1@sensor_values 0017  
                  ?_uart_read_char 0001                       get_ID@result 00C5  
                 __size_of_w32_spi 0078                           __Lrparam 0000  
                     blink_LED@cdc 00C2                   __size_of___awdiv 0086  
                       ?_setup_mcu 0001                         ?_setup_spi 0001  
         ??_uart_read_unsigned_int 00AE                   __size_of_get_CDC 0024  
      uart_read_unsigned_int@part1 00B2        uart_read_unsigned_int@part2 00B3  
                 sensor_CDC@sensor 00B0                      _single_sensor 0078  
                         _delay_ms 1226                      _sensor_values 007C  
             read_sensor@register1 00CA                           __ptext10 13B6  
                         __ptext11 0112                           __ptext20 0A6C  
                         __ptext12 0BCE                           __ptext21 1072  
                         __ptext13 0E7C                           __ptext30 134E  
                         __ptext22 1308                           __ptext14 0B2C  
                         __ptext31 1198                           __ptext23 1226  
                         __ptext15 126C                           __ptext24 0CF2  
                         __ptext16 12D8                           __ptext17 132C  
                         __ptext26 0FF8                           __ptext18 10EA  
                         __ptext27 0DFA                           __ptext19 0C6A  
                         __ptext28 0EFC                           __ptext29 0F7A  
                      _read_sensor 0B2C                      _avail_sensors 0100  
                    __size_of_main 030C                    w32_spi@data_low 00BE  
                read_sensor@sensor 00C4                        ??_blink_LED 00C4  
                    i2_w16_r16_spi 0F7A              __size_of_setup_AD7147 064E  
         __size_of_init_interrupts 0022                       ??_sensor_CDC 00B4  
                         int$flags 005B                      write_AD7147@i 00D2  
               w16_r16_spi@address 00AC                       ??_setup_port 00AC  
                       _INTCONbits 000FF2                           memset@p1 00AC  
                      ??_read_cdc1 0019                        ??_read_cdc2 0019  
                      ??_init_uart 00AC                           intlevel2 0000  
               __end_of_sensor_CDC 12A8               __end_of_write_AD7147 0C6A  
                     _setup_AD7147 0112              __end_ofi2_read_AD7147 1072  
                       _RCSTA1bits 000FAB                     ?i2_w16_r16_spi 0001  
                     ??_switch_LED 00C6                 __end_of_setup_port 13E4  
                      ??_setup_mcu 00AC                        ??_setup_spi 00AC  
               setup_AD7147@F14884 0060                  w16_r16_spi@result 00B8  
  __size_of_uart_read_unsigned_int 0030                     i2get_CDC@state 0003  
                      _num_sensors 0070                        _SSPCON1bits 000FC6  
               __end_of_switch_LED 0DFA        __end_of_uart_read_indicator 1226  
                 blink_LED@message 00C4      uart_write_unsigned_int@number 00AC  
