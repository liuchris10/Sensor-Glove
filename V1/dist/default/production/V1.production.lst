

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Jan 28 17:01:13 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48  0000                     
    49                           ; Version 1.44
    50                           ; Generated 14/09/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F25K80 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	idataBANK0
    85  0013EA                     __pidataBANK0:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _start_stop
    89  0013EA  0001               	dw	1
    90                           
    91                           ;initializer for _state
    92  0013EC  72                 	db	114
    93  0000                     _ANCON1bits	set	3932
    94  0000                     _RCREG1	set	4014
    95  0000                     _PIR1bits	set	3998
    96  0000                     _TXREG1	set	4013
    97  0000                     _TXSTA1bits	set	4012
    98  0000                     _SSPBUF	set	4041
    99  0000                     _PIE1bits	set	3997
   100  0000                     _SSPCON1bits	set	4038
   101  0000                     _SSPSTATbits	set	4039
   102  0000                     _RCSTA1bits	set	4011
   103  0000                     _BAUDCON1	set	4007
   104  0000                     _SPBRG1	set	4015
   105  0000                     _TXSTA1	set	4012
   106  0000                     _INTCON2bits	set	4081
   107  0000                     _RCONbits	set	4048
   108  0000                     _TRISBbits	set	3987
   109  0000                     _TRISC	set	3988
   110  0000                     _INTCON3bits	set	4080
   111  0000                     _INTCONbits	set	4082
   112  0000                     _LATCbits	set	3979
   113  0000                     _RC1IF	set	31989
   114                           
   115                           ; #config settings
   116  0000                     
   117                           	psect	cinit
   118  001144                     __pcinit:
   119                           	opt stack 0
   120  001144                     start_initialization:
   121                           	opt stack 0
   122  001144                     __initialization:
   123                           	opt stack 0
   124                           
   125                           ; Initialize objects allocated to BANK0 (3 bytes)
   126                           ; load TBLPTR registers with __pidataBANK0
   127  001144  0EEA               	movlw	low __pidataBANK0
   128  001146  6EF6               	movwf	tblptrl,c
   129  001148  0E13               	movlw	high __pidataBANK0
   130  00114A  6EF7               	movwf	tblptrh,c
   131  00114C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   132  00114E  6EF8               	movwf	tblptru,c
   133  001150  0009               	tblrd		*+	;fetch initializer
   134  001152  CFF5 F0F2          	movff	tablat,__pdataBANK0
   135  001156  0009               	tblrd		*+	;fetch initializer
   136  001158  CFF5 F0F3          	movff	tablat,__pdataBANK0+1
   137  00115C  0009               	tblrd		*+	;fetch initializer
   138  00115E  CFF5 F0F4          	movff	tablat,__pdataBANK0+2
   139                           
   140                           ; Clear objects allocated to BANK1 (48 bytes)
   141  001162  EE01  F000         	lfsr	0,__pbssBANK1
   142  001166  0E30               	movlw	48
   143  001168                     clear_0:
   144  001168  6AEE               	clrf	postinc0,c
   145  00116A  06E8               	decf	wreg,f,c
   146  00116C  E1FD               	bnz	clear_0
   147                           
   148                           ; Clear objects allocated to BANK0 (76 bytes)
   149  00116E  EE00  F060         	lfsr	0,__pbssBANK0
   150  001172  0E4C               	movlw	76
   151  001174                     clear_1:
   152  001174  6AEE               	clrf	postinc0,c
   153  001176  06E8               	decf	wreg,f,c
   154  001178  E1FD               	bnz	clear_1
   155                           
   156                           ; Clear objects allocated to COMRAM (38 bytes)
   157  00117A  EE00  F035         	lfsr	0,__pbssCOMRAM
   158  00117E  0E26               	movlw	38
   159  001180                     clear_2:
   160  001180  6AEE               	clrf	postinc0,c
   161  001182  06E8               	decf	wreg,f,c
   162  001184  E1FD               	bnz	clear_2
   163  001186                     end_of_initialization:
   164                           	opt stack 0
   165  001186                     __end_of__initialization:
   166                           	opt stack 0
   167  001186  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   168  001188  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   169  00118A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   170  00118C  6EF8               	movwf	tblptru,c
   171  00118E  0100               	movlb	0
   172  001190  EFB9  F003         	goto	_main	;jump to C main() function
   173                           tblptru	equ	0xFF8
   174                           tblptrh	equ	0xFF7
   175                           tblptrl	equ	0xFF6
   176                           tablat	equ	0xFF5
   177                           postinc0	equ	0xFEE
   178                           wreg	equ	0xFE8
   179                           
   180                           	psect	bssCOMRAM
   181  000035                     __pbssCOMRAM:
   182                           	opt stack 0
   183  000035                     _CDC_RESULT:
   184                           	opt stack 0
   185  000035                     	ds	24
   186  00004D                     _second_sensor:
   187                           	opt stack 0
   188  00004D                     	ds	2
   189  00004F                     _interrupt_values_cdc2:
   190                           	opt stack 0
   191  00004F                     	ds	6
   192  000055                     _interrupt_values_cdc1:
   193                           	opt stack 0
   194  000055                     	ds	6
   195                           tblptru	equ	0xFF8
   196                           tblptrh	equ	0xFF7
   197                           tblptrl	equ	0xFF6
   198                           tablat	equ	0xFF5
   199                           postinc0	equ	0xFEE
   200                           wreg	equ	0xFE8
   201                           
   202                           	psect	bssBANK0
   203  000060                     __pbssBANK0:
   204                           	opt stack 0
   205  000060                     setup_AD7147@F14945:
   206                           	opt stack 0
   207  000060                     	ds	16
   208  000070                     _num_sensors:
   209                           	opt stack 0
   210  000070                     	ds	2
   211  000072                     _on_off:
   212                           	opt stack 0
   213  000072                     	ds	2
   214  000074                     _cdc:
   215                           	opt stack 0
   216  000074                     	ds	2
   217  000076                     _device_ID:
   218                           	opt stack 0
   219  000076                     	ds	2
   220  000078                     _single_sensor:
   221                           	opt stack 0
   222  000078                     	ds	2
   223  00007A                     _break_loop:
   224                           	opt stack 0
   225  00007A                     	ds	1
   226  00007B                     _indicator:
   227                           	opt stack 0
   228  00007B                     	ds	1
   229  00007C                     _sensor_values:
   230                           	opt stack 0
   231  00007C                     	ds	48
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           tblptrl	equ	0xFF6
   235                           tablat	equ	0xFF5
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           
   239                           	psect	dataBANK0
   240  0000F2                     __pdataBANK0:
   241                           	opt stack 0
   242  0000F2                     _start_stop:
   243                           	opt stack 0
   244  0000F2                     	ds	2
   245  0000F4                     _state:
   246                           	opt stack 0
   247  0000F4                     	ds	1
   248                           tblptru	equ	0xFF8
   249                           tblptrh	equ	0xFF7
   250                           tblptrl	equ	0xFF6
   251                           tablat	equ	0xFF5
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	bssBANK1
   256  000100                     __pbssBANK1:
   257                           	opt stack 0
   258  000100                     _avail_sensors:
   259                           	opt stack 0
   260  000100                     	ds	48
   261                           tblptru	equ	0xFF8
   262                           tblptrh	equ	0xFF7
   263                           tblptrl	equ	0xFF6
   264                           tablat	equ	0xFF5
   265                           postinc0	equ	0xFEE
   266                           wreg	equ	0xFE8
   267                           
   268                           	psect	cstackBANK0
   269  0000AC                     __pcstackBANK0:
   270                           	opt stack 0
   271  0000AC                     ?_w16_r16_spi:
   272                           	opt stack 0
   273  0000AC                     ?_uart_read_unsigned_int:
   274                           	opt stack 0
   275  0000AC                     ?___awdiv:
   276                           	opt stack 0
   277  0000AC                     uart_write_char@data:
   278                           	opt stack 0
   279  0000AC                     get_CDC@cdc:
   280                           	opt stack 0
   281  0000AC                     w32_spi@address:
   282                           	opt stack 0
   283  0000AC                     w16_r16_spi@address:
   284                           	opt stack 0
   285  0000AC                     uart_write_unsigned_int@number:
   286                           	opt stack 0
   287  0000AC                     uart_read_indicator@count:
   288                           	opt stack 0
   289  0000AC                     ___awdiv@dividend:
   290                           	opt stack 0
   291  0000AC                     memset@p1:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x0
   295  0000AC                     	ds	2
   296  0000AE                     ??_w16_r16_spi:
   297  0000AE                     ??_uart_read_unsigned_int:
   298  0000AE                     uart_write_unsigned_int@char1:
   299                           	opt stack 0
   300  0000AE                     get_CDC@state:
   301                           	opt stack 0
   302  0000AE                     w32_spi@data:
   303                           	opt stack 0
   304  0000AE                     ___awdiv@divisor:
   305                           	opt stack 0
   306  0000AE                     memset@c:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x2
   310  0000AE                     	ds	1
   311  0000AF                     uart_write_unsigned_int@char2:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0x3
   315  0000AF                     	ds	1
   316  0000B0                     ??_w32_spi:
   317  0000B0                     ___awdiv@counter:
   318                           	opt stack 0
   319  0000B0                     sensor_CDC@sensor:
   320                           	opt stack 0
   321  0000B0                     w16_r16_spi@p1:
   322                           	opt stack 0
   323  0000B0                     uart_read_unsigned_int@message:
   324                           	opt stack 0
   325  0000B0                     memset@n:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x4
   329  0000B0                     	ds	1
   330  0000B1                     ___awdiv@sign:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0x5
   334  0000B1                     	ds	1
   335  0000B2                     uart_read_unsigned_int@part1:
   336                           	opt stack 0
   337  0000B2                     sensor_CDC@state:
   338                           	opt stack 0
   339  0000B2                     w32_spi@p1:
   340                           	opt stack 0
   341  0000B2                     w16_r16_spi@p2:
   342                           	opt stack 0
   343  0000B2                     ___awdiv@quotient:
   344                           	opt stack 0
   345  0000B2                     memset@p:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x6
   349  0000B2                     	ds	1
   350  0000B3                     uart_read_unsigned_int@part2:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x7
   354  0000B3                     	ds	1
   355  0000B4                     delay_ms@n:
   356                           	opt stack 0
   357  0000B4                     w32_spi@p2:
   358                           	opt stack 0
   359  0000B4                     w16_r16_spi@address_low:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x8
   363  0000B4                     	ds	2
   364  0000B6                     ??_delay_ms:
   365  0000B6                     w32_spi@p3:
   366                           	opt stack 0
   367  0000B6                     w16_r16_spi@address_high:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0xA
   371  0000B6                     	ds	1
   372  0000B7                     delay_ms@j:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0xB
   376  0000B7                     	ds	1
   377  0000B8                     w32_spi@p4:
   378                           	opt stack 0
   379  0000B8                     w16_r16_spi@result:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0xC
   383  0000B8                     	ds	2
   384  0000BA                     w32_spi@address_low:
   385                           	opt stack 0
   386  0000BA                     w16_r16_spi@blank_low:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0xE
   390  0000BA                     	ds	2
   391  0000BC                     w32_spi@address_high:
   392                           	opt stack 0
   393  0000BC                     w16_r16_spi@blank_high:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x10
   397  0000BC                     	ds	2
   398  0000BE                     w32_spi@data_low:
   399                           	opt stack 0
   400  0000BE                     w16_r16_spi@p3:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x12
   404  0000BE                     	ds	2
   405  0000C0                     w32_spi@data_high:
   406                           	opt stack 0
   407  0000C0                     w16_r16_spi@p4:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x14
   411  0000C0                     	ds	2
   412  0000C2                     ?_get_ID:
   413                           	opt stack 0
   414  0000C2                     write_AD7147@RegisterStartAddress:
   415                           	opt stack 0
   416  0000C2                     read_AD7147@DataBuffer:
   417                           	opt stack 0
   418  0000C2                     read_sensor@sensor_values:
   419                           	opt stack 0
   420  0000C2                     get_ID@cdc:
   421                           	opt stack 0
   422  0000C2                     switch_LED@cdc:
   423                           	opt stack 0
   424  0000C2                     blink_LED@cdc:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x16
   428  0000C2                     	ds	2
   429  0000C4                     ??_get_ID:
   430  0000C4                     write_AD7147@NumberOfRegisters:
   431                           	opt stack 0
   432  0000C4                     read_AD7147@RegisterStartAddress:
   433                           	opt stack 0
   434  0000C4                     read_sensor@sensor:
   435                           	opt stack 0
   436  0000C4                     switch_LED@state:
   437                           	opt stack 0
   438  0000C4                     blink_LED@message:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x18
   442  0000C4                     	ds	1
   443  0000C5                     get_ID@result:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x19
   447  0000C5                     	ds	1
   448  0000C6                     ??_read_sensor:
   449  0000C6                     write_AD7147@OutputBuffer:
   450                           	opt stack 0
   451  0000C6                     read_AD7147@NumberOfRegisters:
   452                           	opt stack 0
   453  0000C6                     switch_LED@message:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x1A
   457  0000C6                     	ds	2
   458  0000C8                     write_AD7147@index:
   459                           	opt stack 0
   460  0000C8                     read_AD7147@cdc:
   461                           	opt stack 0
   462  0000C8                     switch_LED@message_157:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x1C
   466  0000C8                     	ds	2
   467  0000CA                     write_AD7147@cdc:
   468                           	opt stack 0
   469  0000CA                     read_AD7147@Register_Values:
   470                           	opt stack 0
   471  0000CA                     read_sensor@register1:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x1E
   475  0000CA                     	ds	2
   476  0000CC                     ??_write_AD7147:
   477  0000CC                     read_AD7147@i:
   478                           	opt stack 0
   479  0000CC                     read_sensor@cdc_sensor:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x20
   483  0000CC                     	ds	2
   484  0000CE                     write_AD7147@Register_Value:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x22
   488  0000CE                     	ds	2
   489  0000D0                     write_AD7147@Data_Value:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x24
   493  0000D0                     	ds	2
   494  0000D2                     write_AD7147@i:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x26
   498  0000D2                     	ds	2
   499  0000D4                     setup_AD7147@DataBuffer:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x28
   503  0000D4                     	ds	2
   504  0000D6                     setup_AD7147@cdc:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x2A
   508  0000D6                     	ds	2
   509  0000D8                     setup_AD7147@StageBuffer:
   510                           	opt stack 0
   511                           
   512                           ; 16 bytes @ 0x2C
   513  0000D8                     	ds	16
   514  0000E8                     ??_main:
   515                           
   516                           ; 1 bytes @ 0x3C
   517  0000E8                     	ds	4
   518  0000EC                     main@index:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x40
   522  0000EC                     	ds	2
   523  0000EE                     main@k:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x42
   527  0000EE                     	ds	2
   528  0000F0                     main@i:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x44
   532  0000F0                     	ds	2
   533                           tblptru	equ	0xFF8
   534                           tblptrh	equ	0xFF7
   535                           tblptrl	equ	0xFF6
   536                           tablat	equ	0xFF5
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           
   540                           	psect	cstackCOMRAM
   541  000001                     __pcstackCOMRAM:
   542                           	opt stack 0
   543  000001                     ?_r16_spi:
   544                           	opt stack 0
   545  000001                     ?i2_w16_r16_spi:
   546                           	opt stack 0
   547  000001                     i2get_CDC@cdc:
   548                           	opt stack 0
   549  000001                     i2w16_r16_spi@address:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x0
   553  000001                     	ds	2
   554  000003                     ??_r16_spi:
   555  000003                     ??i2_w16_r16_spi:
   556  000003                     i2get_CDC@state:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x2
   560  000003                     	ds	2
   561  000005                     r16_spi@blank_low:
   562                           	opt stack 0
   563  000005                     i2w16_r16_spi@p1:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x4
   567  000005                     	ds	2
   568  000007                     r16_spi@blank_high:
   569                           	opt stack 0
   570  000007                     i2w16_r16_spi@p2:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x6
   574  000007                     	ds	2
   575  000009                     r16_spi@p1:
   576                           	opt stack 0
   577  000009                     i2w16_r16_spi@address_low:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x8
   581  000009                     	ds	2
   582  00000B                     r16_spi@p2:
   583                           	opt stack 0
   584  00000B                     i2w16_r16_spi@address_high:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0xA
   588  00000B                     	ds	2
   589  00000D                     r16_spi@result:
   590                           	opt stack 0
   591  00000D                     i2w16_r16_spi@result:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0xC
   595  00000D                     	ds	2
   596  00000F                     i2w16_r16_spi@blank_low:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0xE
   600  00000F                     	ds	2
   601  000011                     i2w16_r16_spi@blank_high:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x10
   605  000011                     	ds	2
   606  000013                     i2w16_r16_spi@p3:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x12
   610  000013                     	ds	2
   611  000015                     i2w16_r16_spi@p4:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x14
   615  000015                     	ds	2
   616  000017                     read_cdc1@sensor_values:
   617                           	opt stack 0
   618  000017                     read_cdc2@sensor_values:
   619                           	opt stack 0
   620  000017                     i2read_AD7147@DataBuffer:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x16
   624  000017                     	ds	2
   625  000019                     read_cdc1@i:
   626                           	opt stack 0
   627  000019                     read_cdc2@i:
   628                           	opt stack 0
   629  000019                     i2read_AD7147@RegisterStartAddress:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x18
   633  000019                     	ds	2
   634  00001B                     i2read_AD7147@NumberOfRegisters:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x1A
   638  00001B                     	ds	2
   639  00001D                     i2read_AD7147@cdc:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x1C
   643  00001D                     	ds	2
   644  00001F                     i2read_AD7147@Register_Values:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x1E
   648  00001F                     	ds	2
   649  000021                     i2read_AD7147@i:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x20
   653  000021                     	ds	2
   654  000023                     ??_ISR:
   655                           
   656                           ; 1 bytes @ 0x22
   657  000023                     	ds	18
   658                           tblptru	equ	0xFF8
   659                           tblptrh	equ	0xFF7
   660                           tblptrl	equ	0xFF6
   661                           tablat	equ	0xFF5
   662                           postinc0	equ	0xFEE
   663                           wreg	equ	0xFE8
   664                           
   665 ;;
   666 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   667 ;;
   668 ;; *************** function _main *****************
   669 ;; Defined at:
   670 ;;		line 39 in file "main.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;  index           2   64[BANK0 ] unsigned int 
   675 ;;  i               2   68[BANK0 ] unsigned int 
   676 ;;  k               2   66[BANK0 ] unsigned int 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   687 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   688 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   689 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   690 ;;Total ram usage:       10 bytes
   691 ;; Hardware stack levels required when called:    6
   692 ;; This function calls:
   693 ;;		_blink_LED
   694 ;;		_delay_ms
   695 ;;		_get_ID
   696 ;;		_init_interrupts
   697 ;;		_memset
   698 ;;		_read_AD7147
   699 ;;		_read_sensor
   700 ;;		_setup_AD7147
   701 ;;		_setup_mcu
   702 ;;		_setup_spi
   703 ;;		_switch_LED
   704 ;;		_uart_read_char
   705 ;;		_uart_read_indicator
   706 ;;		_uart_read_unsigned_int
   707 ;;		_uart_write_char
   708 ;;		_uart_write_unsigned_int
   709 ;; This function is called by:
   710 ;;		Startup code after reset
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714                           	psect	text0
   715  000772                     __ptext0:
   716                           	opt stack 0
   717  000772                     _main:
   718                           	opt stack 25
   719                           
   720                           ;main.c: 41: delay_ms(500);
   721                           
   722                           ;incstack = 0
   723  000772  0E01               	movlw	1
   724  000774  0100               	movlb	0	; () banked
   725  000776  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
   726  000778  0EF4               	movlw	244
   727  00077A  6FB4               	movwf	delay_ms@n& (0+255),b
   728  00077C  EC11  F009         	call	_delay_ms	;wreg free
   729                           
   730                           ;main.c: 42: setup_mcu();
   731  000780  ECF0  F009         	call	_setup_mcu	;wreg free
   732                           
   733                           ;main.c: 43: setup_spi();
   734  000784  ECC4  F009         	call	_setup_spi	;wreg free
   735                           
   736                           ;main.c: 44: setup_AD7147(interrupt_values_cdc1, 1);
   737  000788  0E55               	movlw	low _interrupt_values_cdc1
   738  00078A  0100               	movlb	0	; () banked
   739  00078C  6FD4               	movwf	setup_AD7147@DataBuffer& (0+255),b
   740  00078E  0E00               	movlw	high _interrupt_values_cdc1
   741  000790  6FD5               	movwf	(setup_AD7147@DataBuffer+1)& (0+255),b
   742  000792  0E00               	movlw	0
   743  000794  6FD7               	movwf	(setup_AD7147@cdc+1)& (0+255),b
   744  000796  0E01               	movlw	1
   745  000798  6FD6               	movwf	setup_AD7147@cdc& (0+255),b
   746  00079A  EC89  F000         	call	_setup_AD7147	;wreg free
   747                           
   748                           ;main.c: 47: blink_LED(1);
   749  00079E  0E00               	movlw	0
   750  0007A0  0100               	movlb	0	; () banked
   751  0007A2  6FC3               	movwf	(blink_LED@cdc+1)& (0+255),b
   752  0007A4  0E01               	movlw	1
   753  0007A6  6FC2               	movwf	blink_LED@cdc& (0+255),b
   754  0007A8  EC34  F005         	call	_blink_LED	;wreg free
   755                           
   756                           ;main.c: 48: read_AD7147(interrupt_values_cdc1, 0x008, 3, 1);
   757  0007AC  0E55               	movlw	low _interrupt_values_cdc1
   758  0007AE  0100               	movlb	0	; () banked
   759  0007B0  6FC2               	movwf	read_AD7147@DataBuffer& (0+255),b
   760  0007B2  0E00               	movlw	high _interrupt_values_cdc1
   761  0007B4  6FC3               	movwf	(read_AD7147@DataBuffer+1)& (0+255),b
   762  0007B6  0E00               	movlw	0
   763  0007B8  6FC5               	movwf	(read_AD7147@RegisterStartAddress+1)& (0+255),b
   764  0007BA  0E08               	movlw	8
   765  0007BC  6FC4               	movwf	read_AD7147@RegisterStartAddress& (0+255),b
   766  0007BE  0E00               	movlw	0
   767  0007C0  6FC7               	movwf	(read_AD7147@NumberOfRegisters+1)& (0+255),b
   768  0007C2  0E03               	movlw	3
   769  0007C4  6FC6               	movwf	read_AD7147@NumberOfRegisters& (0+255),b
   770  0007C6  0E00               	movlw	0
   771  0007C8  6FC9               	movwf	(read_AD7147@cdc+1)& (0+255),b
   772  0007CA  0E01               	movlw	1
   773  0007CC  6FC8               	movwf	read_AD7147@cdc& (0+255),b
   774  0007CE  EC3C  F007         	call	_read_AD7147	;wreg free
   775                           
   776                           ;main.c: 49: init_interrupts();
   777  0007D2  EC94  F009         	call	_init_interrupts	;wreg free
   778  0007D6                     
   779                           ;main.c: 51: {
   780                           ;main.c: 52: indicator = uart_read_char();
   781  0007D6  ECCF  F009         	call	_uart_read_char	;wreg free
   782  0007DA  0100               	movlb	0	; () banked
   783  0007DC  6F7B               	movwf	_indicator& (0+255),b
   784                           
   785                           ;main.c: 53: switch (state)
   786  0007DE  D136               	goto	l160
   787  0007E0                     
   788                           ; BSR set to: 0
   789                           ;main.c: 59: single_sensor = uart_read_unsigned_int();
   790                           
   791                           ; BSR set to: 0
   792  0007E0  EC52  F009         	call	_uart_read_unsigned_int	;wreg free
   793  0007E4  C0AC  F078         	movff	?_uart_read_unsigned_int,_single_sensor
   794  0007E8  C0AD  F079         	movff	?_uart_read_unsigned_int+1,_single_sensor+1
   795                           
   796                           ;main.c: 60: uart_write_unsigned_int(sensor_values[single_sensor]);
   797  0007EC  90D8               	bcf	status,0,c
   798  0007EE  0100               	movlb	0	; () banked
   799  0007F0  3578               	rlcf	_single_sensor& (0+255),w,b
   800  0007F2  6ED9               	movwf	fsr2l,c
   801  0007F4  3579               	rlcf	(_single_sensor+1)& (0+255),w,b
   802  0007F6  6EDA               	movwf	fsr2h,c
   803  0007F8  0E7C               	movlw	low _sensor_values
   804  0007FA  26D9               	addwf	fsr2l,f,c
   805  0007FC  0E00               	movlw	high _sensor_values
   806  0007FE  22DA               	addwfc	fsr2h,f,c
   807  000800  CFDE F0AC          	movff	postinc2,uart_write_unsigned_int@number
   808  000804  CFDD F0AD          	movff	postdec2,uart_write_unsigned_int@number+1
   809  000808  ECB6  F009         	call	_uart_write_unsigned_int	;wreg free
   810  00080C  D101               	goto	l2497
   811  00080E                     
   812                           ; BSR set to: 0
   813                           ;main.c: 64: cdc = uart_read_unsigned_int();
   814                           
   815                           ; BSR set to: 0
   816  00080E  EC52  F009         	call	_uart_read_unsigned_int	;wreg free
   817  000812  C0AC  F074         	movff	?_uart_read_unsigned_int,_cdc
   818  000816  C0AD  F075         	movff	?_uart_read_unsigned_int+1,_cdc+1
   819                           
   820                           ;main.c: 65: blink_LED(cdc);
   821  00081A  C074  F0C2         	movff	_cdc,blink_LED@cdc
   822  00081E  C075  F0C3         	movff	_cdc+1,blink_LED@cdc+1
   823  000822  EC34  F005         	call	_blink_LED	;wreg free
   824  000826  D0F4               	goto	l2497
   825  000828                     
   826                           ; BSR set to: 0
   827                           ;main.c: 69: cdc = uart_read_unsigned_int();
   828                           
   829                           ; BSR set to: 0
   830  000828  EC52  F009         	call	_uart_read_unsigned_int	;wreg free
   831  00082C  C0AC  F074         	movff	?_uart_read_unsigned_int,_cdc
   832  000830  C0AD  F075         	movff	?_uart_read_unsigned_int+1,_cdc+1
   833                           
   834                           ;main.c: 70: on_off = uart_read_unsigned_int();
   835  000834  EC52  F009         	call	_uart_read_unsigned_int	;wreg free
   836  000838  C0AC  F072         	movff	?_uart_read_unsigned_int,_on_off
   837  00083C  C0AD  F073         	movff	?_uart_read_unsigned_int+1,_on_off+1
   838                           
   839                           ;main.c: 71: switch_LED(cdc, on_off);
   840  000840  C074  F0C2         	movff	_cdc,switch_LED@cdc
   841  000844  C075  F0C3         	movff	_cdc+1,switch_LED@cdc+1
   842  000848  C072  F0C4         	movff	_on_off,switch_LED@state
   843  00084C  C073  F0C5         	movff	_on_off+1,switch_LED@state+1
   844  000850  ECBA  F006         	call	_switch_LED	;wreg free
   845  000854  D0DD               	goto	l2497
   846  000856                     
   847                           ; BSR set to: 0
   848                           ;main.c: 75: cdc = uart_read_unsigned_int();
   849                           
   850                           ; BSR set to: 0
   851  000856  EC52  F009         	call	_uart_read_unsigned_int	;wreg free
   852  00085A  C0AC  F074         	movff	?_uart_read_unsigned_int,_cdc
   853  00085E  C0AD  F075         	movff	?_uart_read_unsigned_int+1,_cdc+1
   854                           
   855                           ;main.c: 76: device_ID = get_ID(cdc);
   856  000862  C074  F0C2         	movff	_cdc,get_ID@cdc
   857  000866  C075  F0C3         	movff	_cdc+1,get_ID@cdc+1
   858  00086A  EC73  F008         	call	_get_ID	;wreg free
   859  00086E  C0C2  F076         	movff	?_get_ID,_device_ID
   860  000872  C0C3  F077         	movff	?_get_ID+1,_device_ID+1
   861                           
   862                           ;main.c: 77: uart_write_unsigned_int(device_ID);
   863  000876  C076  F0AC         	movff	_device_ID,uart_write_unsigned_int@number
   864  00087A  C077  F0AD         	movff	_device_ID+1,uart_write_unsigned_int@number+1
   865  00087E  ECB6  F009         	call	_uart_write_unsigned_int	;wreg free
   866  000882  D0C6               	goto	l2497
   867  000884                     
   868                           ; BSR set to: 0
   869                           
   870                           ; BSR set to: 0
   871  000884  517B               	movf	_indicator& (0+255),w,b
   872                           
   873                           ; Switch size 1, requested type "space"
   874                           ; Number of cases is 4, Range of values is 98 to 119
   875                           ; switch strategies available:
   876                           ; Name         Instructions Cycles
   877                           ; simple_byte           13     7 (average)
   878                           ;	Chosen strategy is simple_byte
   879  000886  0A62               	xorlw	98	; case 98
   880  000888  B4D8               	btfsc	status,2,c
   881  00088A  D7AA               	goto	l163
   882  00088C  0A04               	xorlw	4	; case 102
   883  00088E  B4D8               	btfsc	status,2,c
   884  000890  D7BE               	goto	l165
   885  000892  0A0E               	xorlw	14	; case 104
   886  000894  B4D8               	btfsc	status,2,c
   887  000896  D7C8               	goto	l166
   888  000898  0A1F               	xorlw	31	; case 119
   889  00089A  B4D8               	btfsc	status,2,c
   890  00089C  D7DC               	goto	l167
   891                           
   892                           ; BSR set to: 0
   893                           ;main.c: 81: break;
   894  00089E  D79B               	goto	l159
   895  0008A0                     
   896                           ; BSR set to: 0
   897                           ;main.c: 87: single_sensor = uart_read_unsigned_int();
   898                           
   899                           ; BSR set to: 0
   900  0008A0  EC52  F009         	call	_uart_read_unsigned_int	;wreg free
   901  0008A4  C0AC  F078         	movff	?_uart_read_unsigned_int,_single_sensor
   902  0008A8  C0AD  F079         	movff	?_uart_read_unsigned_int+1,_single_sensor+1
   903                           
   904                           ;main.c: 88: read_sensor(sensor_values, single_sensor);
   905  0008AC  0E7C               	movlw	low _sensor_values
   906  0008AE  0100               	movlb	0	; () banked
   907  0008B0  6FC2               	movwf	read_sensor@sensor_values& (0+255),b
   908  0008B2  0E00               	movlw	high _sensor_values
   909  0008B4  6FC3               	movwf	(read_sensor@sensor_values+1)& (0+255),b
   910  0008B6  C078  F0C4         	movff	_single_sensor,read_sensor@sensor
   911  0008BA  C079  F0C5         	movff	_single_sensor+1,read_sensor@sensor+1
   912  0008BE  EC94  F005         	call	_read_sensor	;wreg free
   913                           
   914                           ;main.c: 89: uart_write_unsigned_int(sensor_values[single_sensor]);
   915  0008C2  90D8               	bcf	status,0,c
   916  0008C4  0100               	movlb	0	; () banked
   917  0008C6  3578               	rlcf	_single_sensor& (0+255),w,b
   918  0008C8  6ED9               	movwf	fsr2l,c
   919  0008CA  3579               	rlcf	(_single_sensor+1)& (0+255),w,b
   920  0008CC  6EDA               	movwf	fsr2h,c
   921  0008CE  0E7C               	movlw	low _sensor_values
   922  0008D0  26D9               	addwf	fsr2l,f,c
   923  0008D2  0E00               	movlw	high _sensor_values
   924  0008D4  22DA               	addwfc	fsr2h,f,c
   925  0008D6  CFDE F0AC          	movff	postinc2,uart_write_unsigned_int@number
   926  0008DA  CFDD F0AD          	movff	postdec2,uart_write_unsigned_int@number+1
   927  0008DE  ECB6  F009         	call	_uart_write_unsigned_int	;wreg free
   928                           
   929                           ;main.c: 90: break;
   930  0008E2  D779               	goto	l159
   931  0008E4                     
   932                           ;main.c: 93: {
   933                           ;main.c: 94: uart_write_char('s');
   934  0008E4  0E73               	movlw	115
   935  0008E6  ECE3  F009         	call	_uart_write_char
   936                           
   937                           ;main.c: 95: for(unsigned int i = 0; i<24; i++)
   938  0008EA  0E00               	movlw	0
   939  0008EC  0100               	movlb	0	; () banked
   940  0008EE  6FF1               	movwf	(main@i+1)& (0+255),b
   941  0008F0  0E00               	movlw	0
   942  0008F2  6FF0               	movwf	main@i& (0+255),b
   943  0008F4                     l2451:
   944                           
   945                           ; BSR set to: 0
   946  0008F4  51F1               	movf	(main@i+1)& (0+255),w,b
   947  0008F6  E124               	bnz	l2463
   948  0008F8  0E18               	movlw	24
   949  0008FA  5DF0               	subwf	main@i& (0+255),w,b
   950  0008FC  B0D8               	btfsc	status,0,c
   951  0008FE  D020               	goto	u1260
   952                           
   953                           ; BSR set to: 0
   954                           ;main.c: 96: {
   955                           ;main.c: 97: if(avail_sensors[i] == 1)
   956                           
   957                           ; BSR set to: 0
   958                           
   959                           ; BSR set to: 0
   960  000900  90D8               	bcf	status,0,c
   961  000902  35F0               	rlcf	main@i& (0+255),w,b
   962  000904  6ED9               	movwf	fsr2l,c
   963  000906  35F1               	rlcf	(main@i+1)& (0+255),w,b
   964  000908  6EDA               	movwf	fsr2h,c
   965  00090A  0E00               	movlw	low _avail_sensors
   966  00090C  26D9               	addwf	fsr2l,f,c
   967  00090E  0E01               	movlw	high _avail_sensors
   968  000910  22DA               	addwfc	fsr2h,f,c
   969  000912  04DE               	decf	postinc2,w,c
   970  000914  10DE               	iorwf	postinc2,w,c
   971  000916  A4D8               	btfss	status,2,c
   972  000918  D00F               	goto	l178
   973                           
   974                           ; BSR set to: 0
   975                           ;main.c: 98: {
   976                           ;main.c: 99: uart_write_unsigned_int(sensor_values[i]);
   977  00091A  90D8               	bcf	status,0,c
   978  00091C  35F0               	rlcf	main@i& (0+255),w,b
   979  00091E  6ED9               	movwf	fsr2l,c
   980  000920  35F1               	rlcf	(main@i+1)& (0+255),w,b
   981  000922  6EDA               	movwf	fsr2h,c
   982  000924  0E7C               	movlw	low _sensor_values
   983  000926  26D9               	addwf	fsr2l,f,c
   984  000928  0E00               	movlw	high _sensor_values
   985  00092A  22DA               	addwfc	fsr2h,f,c
   986  00092C  CFDE F0AC          	movff	postinc2,uart_write_unsigned_int@number
   987  000930  CFDD F0AD          	movff	postdec2,uart_write_unsigned_int@number+1
   988  000934  ECB6  F009         	call	_uart_write_unsigned_int	;wreg free
   989  000938                     l178:
   990  000938  0100               	movlb	0	; () banked
   991  00093A  4BF0               	infsnz	main@i& (0+255),f,b
   992  00093C  2BF1               	incf	(main@i+1)& (0+255),f,b
   993  00093E  D7DA               	goto	l2451
   994  000940                     u1260:
   995  000940                     l2463:
   996                           
   997                           ; BSR set to: 0
   998                           ;main.c: 100: }
   999                           ;main.c: 101: }
  1000                           ;main.c: 102: break_loop = uart_read_indicator();
  1001  000940  ECEE  F008         	call	_uart_read_indicator	;wreg free
  1002  000944  0100               	movlb	0	; () banked
  1003  000946  6F7A               	movwf	_break_loop& (0+255),b
  1004                           
  1005                           ; BSR set to: 0
  1006                           ;main.c: 103: if(break_loop == 'z')
  1007  000948  0E7A               	movlw	122
  1008  00094A  197A               	xorwf	_break_loop& (0+255),w,b
  1009  00094C  A4D8               	btfss	status,2,c
  1010  00094E  D006               	goto	l179
  1011                           
  1012                           ; BSR set to: 0
  1013                           ;main.c: 104: {
  1014                           ;main.c: 105: start_stop = 0;
  1015  000950  0E00               	movlw	0
  1016  000952  6FF3               	movwf	(_start_stop+1)& (0+255),b
  1017  000954  0E00               	movlw	0
  1018  000956  6FF2               	movwf	_start_stop& (0+255),b
  1019                           
  1020                           ;main.c: 106: state = 'r';
  1021  000958  0E72               	movlw	114
  1022  00095A  6FF4               	movwf	_state& (0+255),b
  1023  00095C                     l179:
  1024                           
  1025                           ; BSR set to: 0
  1026                           
  1027                           ; BSR set to: 0
  1028  00095C  0100               	movlb	0	; () banked
  1029  00095E  05F2               	decf	_start_stop& (0+255),w,b
  1030  000960  11F3               	iorwf	(_start_stop+1)& (0+255),w,b
  1031  000962  B4D8               	btfsc	status,2,c
  1032  000964  D7BF               	goto	l175
  1033                           
  1034                           ; BSR set to: 0
  1035                           ;main.c: 107: }
  1036                           ;main.c: 108: }
  1037                           ;main.c: 109: start_stop = 1;
  1038                           
  1039                           ; BSR set to: 0
  1040  000966  0E00               	movlw	0
  1041  000968  6FF3               	movwf	(_start_stop+1)& (0+255),b
  1042  00096A  0E01               	movlw	1
  1043  00096C  6FF2               	movwf	_start_stop& (0+255),b
  1044                           
  1045                           ;main.c: 110: break;
  1046  00096E  D733               	goto	l159
  1047  000970                     L1:
  1048  000970  6FF4               	movwf	_state& (0+255),b
  1049                           
  1050                           ; BSR set to: 0
  1051                           ;main.c: 114: }
  1052                           
  1053                           ;main.c: 113: break;
  1054  000972  D731               	goto	l159
  1055  000974                     
  1056                           ; BSR set to: 0
  1057                           
  1058                           ; BSR set to: 0
  1059  000974  517B               	movf	_indicator& (0+255),w,b
  1060                           
  1061                           ; Switch size 1, requested type "space"
  1062                           ; Number of cases is 2, Range of values is 117 to 118
  1063                           ; switch strategies available:
  1064                           ; Name         Instructions Cycles
  1065                           ; simple_byte            7     4 (average)
  1066                           ;	Chosen strategy is simple_byte
  1067  000976  0A75               	xorlw	117	; case 117
  1068  000978  B4D8               	btfsc	status,2,c
  1069  00097A  D792               	goto	l171
  1070  00097C  0A03               	xorlw	3	; case 118
  1071  00097E  B4D8               	btfsc	status,2,c
  1072  000980  D7ED               	goto	l179
  1073  000982  D057               	goto	l197
  1074  000984                     
  1075                           ; BSR set to: 0
  1076                           ;main.c: 121: memset(avail_sensors, 0, 24*sizeof(avail_sensors[0]));
  1077                           
  1078                           ; BSR set to: 0
  1079  000984  0E00               	movlw	low _avail_sensors
  1080  000986  6FAC               	movwf	memset@p1& (0+255),b
  1081  000988  0E01               	movlw	high _avail_sensors
  1082  00098A  6FAD               	movwf	(memset@p1+1)& (0+255),b
  1083  00098C  0E00               	movlw	0
  1084  00098E  6FAF               	movwf	(memset@c+1)& (0+255),b
  1085  000990  0E00               	movlw	0
  1086  000992  6FAE               	movwf	memset@c& (0+255),b
  1087  000994  0E00               	movlw	0
  1088  000996  6FB1               	movwf	(memset@n+1)& (0+255),b
  1089  000998  0E30               	movlw	48
  1090  00099A  6FB0               	movwf	memset@n& (0+255),b
  1091  00099C  EC6A  F009         	call	_memset	;wreg free
  1092                           
  1093                           ;main.c: 122: num_sensors = uart_read_unsigned_int();
  1094  0009A0  EC52  F009         	call	_uart_read_unsigned_int	;wreg free
  1095  0009A4  C0AC  F070         	movff	?_uart_read_unsigned_int,_num_sensors
  1096  0009A8  C0AD  F071         	movff	?_uart_read_unsigned_int+1,_num_sensors+1
  1097                           
  1098                           ;main.c: 123: for(unsigned int k = 0; k < num_sensors; k++)
  1099  0009AC  0E00               	movlw	0
  1100  0009AE  0100               	movlb	0	; () banked
  1101  0009B0  6FEF               	movwf	(main@k+1)& (0+255),b
  1102  0009B2  0E00               	movlw	0
  1103  0009B4  6FEE               	movwf	main@k& (0+255),b
  1104  0009B6  D022               	goto	l185
  1105  0009B8                     
  1106                           ; BSR set to: 0
  1107                           ;main.c: 124: {
  1108                           ;main.c: 125: unsigned int index = uart_read_unsigned_int();
  1109                           
  1110                           ; BSR set to: 0
  1111  0009B8  EC52  F009         	call	_uart_read_unsigned_int	;wreg free
  1112  0009BC  C0AC  F0EC         	movff	?_uart_read_unsigned_int,main@index
  1113  0009C0  C0AD  F0ED         	movff	?_uart_read_unsigned_int+1,main@index+1
  1114                           
  1115                           ;main.c: 126: avail_sensors[index-1] = 1;
  1116  0009C4  0EFE               	movlw	254
  1117  0009C6  0100               	movlb	0	; () banked
  1118  0009C8  6FE8               	movwf	??_main& (0+255),b
  1119  0009CA  0EFF               	movlw	255
  1120  0009CC  6FE9               	movwf	(??_main+1)& (0+255),b
  1121  0009CE  C0EC  F0EA         	movff	main@index,??_main+2
  1122  0009D2  C0ED  F0EB         	movff	main@index+1,??_main+3
  1123  0009D6  90D8               	bcf	status,0,c
  1124  0009D8  37EA               	rlcf	(??_main+2)& (0+255),f,b
  1125  0009DA  37EB               	rlcf	(??_main+3)& (0+255),f,b
  1126  0009DC  51E8               	movf	??_main& (0+255),w,b
  1127  0009DE  27EA               	addwf	(??_main+2)& (0+255),f,b
  1128  0009E0  51E9               	movf	(??_main+1)& (0+255),w,b
  1129  0009E2  23EB               	addwfc	(??_main+3)& (0+255),f,b
  1130  0009E4  0E00               	movlw	low _avail_sensors
  1131  0009E6  25EA               	addwf	(??_main+2)& (0+255),w,b
  1132  0009E8  6ED9               	movwf	fsr2l,c
  1133  0009EA  0E01               	movlw	high _avail_sensors
  1134  0009EC  21EB               	addwfc	(??_main+3)& (0+255),w,b
  1135  0009EE  6EDA               	movwf	fsr2h,c
  1136  0009F0  0E01               	movlw	1
  1137  0009F2  6EDE               	movwf	postinc2,c
  1138  0009F4  0E00               	movlw	0
  1139  0009F6  6EDD               	movwf	postdec2,c
  1140                           
  1141                           ; BSR set to: 0
  1142  0009F8  4BEE               	infsnz	main@k& (0+255),f,b
  1143  0009FA  2BEF               	incf	(main@k+1)& (0+255),f,b
  1144  0009FC                     l185:
  1145                           
  1146                           ; BSR set to: 0
  1147                           
  1148                           ; BSR set to: 0
  1149  0009FC  5170               	movf	_num_sensors& (0+255),w,b
  1150  0009FE  5DEE               	subwf	main@k& (0+255),w,b
  1151  000A00  5171               	movf	(_num_sensors+1)& (0+255),w,b
  1152  000A02  59EF               	subwfb	(main@k+1)& (0+255),w,b
  1153  000A04  A0D8               	btfss	status,0,c
  1154  000A06  D7D8               	goto	l186
  1155                           
  1156                           ; BSR set to: 0
  1157  000A08  D014               	goto	l197
  1158  000A0A                     
  1159                           ; BSR set to: 0
  1160                           ;main.c: 131: uart_write_char('e');
  1161                           
  1162                           ; BSR set to: 0
  1163  000A0A  0E65               	movlw	101
  1164  000A0C  ECE3  F009         	call	_uart_write_char
  1165  000A10                     l2497:
  1166                           
  1167                           ;main.c: 132: state = 'r';
  1168  000A10  0E72               	movlw	114
  1169  000A12  0100               	movlb	0	; () banked
  1170  000A14  D7AD               	goto	L1
  1171  000A16                     
  1172                           ; BSR set to: 0
  1173                           
  1174                           ; BSR set to: 0
  1175  000A16  517B               	movf	_indicator& (0+255),w,b
  1176                           
  1177                           ; Switch size 1, requested type "space"
  1178                           ; Number of cases is 2, Range of values is 101 to 110
  1179                           ; switch strategies available:
  1180                           ; Name         Instructions Cycles
  1181                           ; simple_byte            7     4 (average)
  1182                           ;	Chosen strategy is simple_byte
  1183  000A18  0A65               	xorlw	101	; case 101
  1184  000A1A  B4D8               	btfsc	status,2,c
  1185  000A1C  D7F6               	goto	l189
  1186  000A1E  0A0B               	xorlw	11	; case 110
  1187  000A20  B4D8               	btfsc	status,2,c
  1188  000A22  D7B0               	goto	l184
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;main.c: 137: break;
  1192  000A24  D6D8               	goto	l159
  1193  000A26                     
  1194                           ; BSR set to: 0
  1195                           ;main.c: 143: state = 's';
  1196                           
  1197                           ; BSR set to: 0
  1198  000A26  0E73               	movlw	115
  1199  000A28  D7A3               	goto	L1
  1200  000A2A                     
  1201                           ; BSR set to: 0
  1202                           ;main.c: 146: state = 'c';
  1203                           
  1204                           ; BSR set to: 0
  1205  000A2A  0E63               	movlw	99
  1206  000A2C  D7A1               	goto	L1
  1207  000A2E                     
  1208                           ; BSR set to: 0
  1209                           ;main.c: 149: state = 'p';
  1210                           
  1211                           ; BSR set to: 0
  1212  000A2E  0E70               	movlw	112
  1213  000A30  D79F               	goto	L1
  1214  000A32                     l197:
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;main.c: 152: state = 'r';
  1218                           
  1219                           ; BSR set to: 0
  1220  000A32  0E72               	movlw	114
  1221  000A34  D79D               	goto	L1
  1222  000A36                     
  1223                           ; BSR set to: 0
  1224                           
  1225                           ; BSR set to: 0
  1226  000A36  517B               	movf	_indicator& (0+255),w,b
  1227                           
  1228                           ; Switch size 1, requested type "space"
  1229                           ; Number of cases is 3, Range of values is 99 to 115
  1230                           ; switch strategies available:
  1231                           ; Name         Instructions Cycles
  1232                           ; simple_byte           10     6 (average)
  1233                           ;	Chosen strategy is simple_byte
  1234  000A38  0A63               	xorlw	99	; case 99
  1235  000A3A  B4D8               	btfsc	status,2,c
  1236  000A3C  D7F6               	goto	l195
  1237  000A3E  0A13               	xorlw	19	; case 112
  1238  000A40  B4D8               	btfsc	status,2,c
  1239  000A42  D7F5               	goto	l196
  1240  000A44  0A03               	xorlw	3	; case 115
  1241  000A46  B4D8               	btfsc	status,2,c
  1242  000A48  D7EE               	goto	l193
  1243  000A4A  D7F3               	goto	l197
  1244  000A4C                     l160:
  1245                           
  1246                           ; BSR set to: 0
  1247                           
  1248                           ; BSR set to: 0
  1249  000A4C  51F4               	movf	_state& (0+255),w,b
  1250                           
  1251                           ; Switch size 1, requested type "space"
  1252                           ; Number of cases is 4, Range of values is 99 to 115
  1253                           ; switch strategies available:
  1254                           ; Name         Instructions Cycles
  1255                           ; simple_byte           13     7 (average)
  1256                           ;	Chosen strategy is simple_byte
  1257  000A4E  0A63               	xorlw	99	; case 99
  1258  000A50  B4D8               	btfsc	status,2,c
  1259  000A52  D790               	goto	l170
  1260  000A54  0A13               	xorlw	19	; case 112
  1261  000A56  B4D8               	btfsc	status,2,c
  1262  000A58  D7DE               	goto	l183
  1263  000A5A  0A02               	xorlw	2	; case 114
  1264  000A5C  B4D8               	btfsc	status,2,c
  1265  000A5E  D7EB               	goto	l192
  1266  000A60  0A01               	xorlw	1	; case 115
  1267  000A62  B4D8               	btfsc	status,2,c
  1268  000A64  D70F               	goto	l162
  1269                           
  1270                           ; BSR set to: 0
  1271                           
  1272                           ; BSR set to: 0
  1273  000A66  D6B7               	goto	l159
  1274  000A68                     __end_of_main:
  1275                           	opt stack 0
  1276                           tblptru	equ	0xFF8
  1277                           tblptrh	equ	0xFF7
  1278                           tblptrl	equ	0xFF6
  1279                           tablat	equ	0xFF5
  1280                           postinc0	equ	0xFEE
  1281                           wreg	equ	0xFE8
  1282                           postinc2	equ	0xFDE
  1283                           postdec2	equ	0xFDD
  1284                           fsr2h	equ	0xFDA
  1285                           fsr2l	equ	0xFD9
  1286                           status	equ	0xFD8
  1287                           
  1288 ;; *************** function _uart_write_unsigned_int *****************
  1289 ;; Defined at:
  1290 ;;		line 39 in file "uart.c"
  1291 ;; Parameters:    Size  Location     Type
  1292 ;;  number          2    0[BANK0 ] unsigned int 
  1293 ;; Auto vars:     Size  Location     Type
  1294 ;;  char2           1    3[BANK0 ] unsigned char 
  1295 ;;  char1           1    2[BANK0 ] unsigned char 
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      void 
  1298 ;; Registers used:
  1299 ;;		wreg, status,2
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1305 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1306 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1308 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1309 ;;Total ram usage:        4 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; Hardware stack levels required when called:    3
  1312 ;; This function calls:
  1313 ;;		Nothing
  1314 ;; This function is called by:
  1315 ;;		_main
  1316 ;;		_uart_send_sensors
  1317 ;; This function uses a non-reentrant model
  1318 ;;
  1319                           
  1320                           	psect	text1
  1321  00136C                     __ptext1:
  1322                           	opt stack 0
  1323  00136C                     _uart_write_unsigned_int:
  1324                           	opt stack 27
  1325                           
  1326                           ;uart.c: 41: char char1 = number & 0xFF;
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;incstack = 0
  1330  00136C  C0AC  F0AE         	movff	uart_write_unsigned_int@number,uart_write_unsigned_int@char1
  1331                           
  1332                           ;uart.c: 42: char char2 = number >> 8;
  1333  001370  0100               	movlb	0	; () banked
  1334  001372  51AD               	movf	(uart_write_unsigned_int@number+1)& (0+255),w,b
  1335  001374  6FAF               	movwf	uart_write_unsigned_int@char2& (0+255),b
  1336  001376                     
  1337                           ; BSR set to: 0
  1338  001376  A2AC               	btfss	4012,1,c	;volatile
  1339  001378  D7FE               	goto	l345
  1340                           
  1341                           ;uart.c: 45: TXREG1 = char1;
  1342  00137A  C0AE  FFAD         	movff	uart_write_unsigned_int@char1,4013	;volatile
  1343  00137E  A2AC               	btfss	4012,1,c	;volatile
  1344  001380  D7FE               	goto	l348
  1345                           
  1346                           ;uart.c: 47: TXREG1 = char2;
  1347  001382  C0AF  FFAD         	movff	uart_write_unsigned_int@char2,4013	;volatile
  1348  001386  0012               	return		;funcret
  1349  001388                     __end_of_uart_write_unsigned_int:
  1350                           	opt stack 0
  1351                           tblptru	equ	0xFF8
  1352                           tblptrh	equ	0xFF7
  1353                           tblptrl	equ	0xFF6
  1354                           tablat	equ	0xFF5
  1355                           postinc0	equ	0xFEE
  1356                           wreg	equ	0xFE8
  1357                           postinc2	equ	0xFDE
  1358                           postdec2	equ	0xFDD
  1359                           fsr2h	equ	0xFDA
  1360                           fsr2l	equ	0xFD9
  1361                           status	equ	0xFD8
  1362                           
  1363 ;; *************** function _uart_write_char *****************
  1364 ;; Defined at:
  1365 ;;		line 24 in file "uart.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;  data            1    wreg     unsigned char 
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;  data            1    0[BANK0 ] unsigned char 
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      void 
  1372 ;; Registers used:
  1373 ;;		wreg
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1380 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1382 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1383 ;;Total ram usage:        1 bytes
  1384 ;; Hardware stack levels used:    1
  1385 ;; Hardware stack levels required when called:    3
  1386 ;; This function calls:
  1387 ;;		Nothing
  1388 ;; This function is called by:
  1389 ;;		_main
  1390 ;;		_uart_write_string
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           	psect	text2
  1395  0013C6                     __ptext2:
  1396                           	opt stack 0
  1397  0013C6                     _uart_write_char:
  1398                           	opt stack 27
  1399                           
  1400                           ;incstack = 0
  1401                           ;uart_write_char@data stored from wreg
  1402  0013C6  0100               	movlb	0	; () banked
  1403  0013C8  6FAC               	movwf	uart_write_char@data& (0+255),b
  1404  0013CA                     
  1405                           ;uart.c: 26: while(!TXSTA1bits.TRMT);
  1406  0013CA  A2AC               	btfss	4012,1,c	;volatile
  1407  0013CC  D7FE               	goto	l2317
  1408                           
  1409                           ;uart.c: 28: TXREG1 = data;
  1410  0013CE  C0AC  FFAD         	movff	uart_write_char@data,4013	;volatile
  1411  0013D2  0012               	return		;funcret
  1412  0013D4                     __end_of_uart_write_char:
  1413                           	opt stack 0
  1414                           tblptru	equ	0xFF8
  1415                           tblptrh	equ	0xFF7
  1416                           tblptrl	equ	0xFF6
  1417                           tablat	equ	0xFF5
  1418                           postinc0	equ	0xFEE
  1419                           wreg	equ	0xFE8
  1420                           postinc2	equ	0xFDE
  1421                           postdec2	equ	0xFDD
  1422                           fsr2h	equ	0xFDA
  1423                           fsr2l	equ	0xFD9
  1424                           status	equ	0xFD8
  1425                           
  1426 ;; *************** function _uart_read_unsigned_int *****************
  1427 ;; Defined at:
  1428 ;;		line 131 in file "uart.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;		None
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;  message         2    4[BANK0 ] unsigned int 
  1433 ;;  part2           1    7[BANK0 ] unsigned char 
  1434 ;;  part1           1    6[BANK0 ] unsigned char 
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  2    0[BANK0 ] unsigned int 
  1437 ;; Registers used:
  1438 ;;		wreg, status,2, status,0, cstack
  1439 ;; Tracked objects:
  1440 ;;		On entry : 0/0
  1441 ;;		On exit  : 0/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1444 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1445 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1446 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1447 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1448 ;;Total ram usage:        8 bytes
  1449 ;; Hardware stack levels used:    1
  1450 ;; Hardware stack levels required when called:    4
  1451 ;; This function calls:
  1452 ;;		_uart_read_char
  1453 ;; This function is called by:
  1454 ;;		_main
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458                           	psect	text3
  1459  0012A4                     __ptext3:
  1460                           	opt stack 0
  1461  0012A4                     _uart_read_unsigned_int:
  1462                           	opt stack 26
  1463                           
  1464                           ;uart.c: 133: unsigned char part1 = uart_read_char();
  1465                           
  1466                           ;incstack = 0
  1467  0012A4  ECCF  F009         	call	_uart_read_char	;wreg free
  1468  0012A8  0100               	movlb	0	; () banked
  1469  0012AA  6FB2               	movwf	uart_read_unsigned_int@part1& (0+255),b
  1470                           
  1471                           ;uart.c: 134: unsigned char part2 = uart_read_char();
  1472  0012AC  ECCF  F009         	call	_uart_read_char	;wreg free
  1473  0012B0  0100               	movlb	0	; () banked
  1474  0012B2  6FB3               	movwf	uart_read_unsigned_int@part2& (0+255),b
  1475                           
  1476                           ; BSR set to: 0
  1477                           ;uart.c: 135: unsigned int message = (unsigned int)((part1 << 8) | part2);
  1478  0012B4  51B3               	movf	uart_read_unsigned_int@part2& (0+255),w,b
  1479  0012B6  C0B2  F0AE         	movff	uart_read_unsigned_int@part1,??_uart_read_unsigned_int
  1480  0012BA  6BAF               	clrf	(??_uart_read_unsigned_int+1)& (0+255),b
  1481  0012BC  C0AE  F0AF         	movff	??_uart_read_unsigned_int,??_uart_read_unsigned_int+1
  1482  0012C0  6BAE               	clrf	??_uart_read_unsigned_int& (0+255),b
  1483  0012C2  11AE               	iorwf	??_uart_read_unsigned_int& (0+255),w,b
  1484  0012C4  6FB0               	movwf	uart_read_unsigned_int@message& (0+255),b
  1485  0012C6  51AF               	movf	(??_uart_read_unsigned_int+1)& (0+255),w,b
  1486  0012C8  6FB1               	movwf	(uart_read_unsigned_int@message+1)& (0+255),b
  1487                           
  1488                           ; BSR set to: 0
  1489                           ;uart.c: 136: return message;
  1490  0012CA  C0B0  F0AC         	movff	uart_read_unsigned_int@message,?_uart_read_unsigned_int
  1491  0012CE  C0B1  F0AD         	movff	uart_read_unsigned_int@message+1,?_uart_read_unsigned_int+1
  1492  0012D2  0012               	return	
  1493  0012D4                     __end_of_uart_read_unsigned_int:
  1494                           	opt stack 0
  1495                           tblptru	equ	0xFF8
  1496                           tblptrh	equ	0xFF7
  1497                           tblptrl	equ	0xFF6
  1498                           tablat	equ	0xFF5
  1499                           postinc0	equ	0xFEE
  1500                           wreg	equ	0xFE8
  1501                           postinc2	equ	0xFDE
  1502                           postdec2	equ	0xFDD
  1503                           fsr2h	equ	0xFDA
  1504                           fsr2l	equ	0xFD9
  1505                           status	equ	0xFD8
  1506                           
  1507 ;; *************** function _uart_read_char *****************
  1508 ;; Defined at:
  1509 ;;		line 94 in file "uart.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;		None
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;		None
  1514 ;; Return value:  Size  Location     Type
  1515 ;;                  1    wreg      unsigned char 
  1516 ;; Registers used:
  1517 ;;		wreg, status,2
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1527 ;;Total ram usage:        0 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; Hardware stack levels required when called:    3
  1530 ;; This function calls:
  1531 ;;		Nothing
  1532 ;; This function is called by:
  1533 ;;		_main
  1534 ;;		_uart_read_unsigned_int
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text4
  1539  00139E                     __ptext4:
  1540                           	opt stack 0
  1541  00139E                     _uart_read_char:
  1542                           	opt stack 26
  1543                           
  1544                           ;uart.c: 96: while(PIR1bits.RC1IF == 0)
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;incstack = 0
  1548  00139E  D005               	goto	l385
  1549  0013A0                     l384:
  1550                           
  1551                           ;uart.c: 97: {
  1552                           ;uart.c: 98: if(RCSTA1bits.OERR == 1)
  1553  0013A0  A2AB               	btfss	4011,1,c	;volatile
  1554  0013A2  D003               	goto	l385
  1555                           
  1556                           ;uart.c: 99: {
  1557                           ;uart.c: 100: RCSTA1bits.OERR = 0;
  1558  0013A4  92AB               	bcf	4011,1,c	;volatile
  1559                           
  1560                           ;uart.c: 101: RCSTA1bits.CREN = 0;
  1561  0013A6  98AB               	bcf	4011,4,c	;volatile
  1562                           
  1563                           ;uart.c: 102: RCSTA1bits.CREN = 1;
  1564  0013A8  88AB               	bsf	4011,4,c	;volatile
  1565  0013AA                     l385:
  1566  0013AA  AA9E               	btfss	3998,5,c	;volatile
  1567  0013AC  D7F9               	goto	l384
  1568                           
  1569                           ;uart.c: 103: }
  1570                           ;uart.c: 104: }
  1571                           ;uart.c: 105: return RCREG1;
  1572  0013AE  50AE               	movf	4014,w,c	;volatile
  1573  0013B0  0012               	return	
  1574  0013B2                     __end_of_uart_read_char:
  1575                           	opt stack 0
  1576                           tblptru	equ	0xFF8
  1577                           tblptrh	equ	0xFF7
  1578                           tblptrl	equ	0xFF6
  1579                           tablat	equ	0xFF5
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           postinc2	equ	0xFDE
  1583                           postdec2	equ	0xFDD
  1584                           fsr2h	equ	0xFDA
  1585                           fsr2l	equ	0xFD9
  1586                           status	equ	0xFD8
  1587                           
  1588 ;; *************** function _uart_read_indicator *****************
  1589 ;; Defined at:
  1590 ;;		line 108 in file "uart.c"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;		None
  1593 ;; Auto vars:     Size  Location     Type
  1594 ;;  count           2    0[BANK0 ] unsigned int 
  1595 ;; Return value:  Size  Location     Type
  1596 ;;                  1    wreg      unsigned char 
  1597 ;; Registers used:
  1598 ;;		wreg, status,2, status,0
  1599 ;; Tracked objects:
  1600 ;;		On entry : 0/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1605 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1607 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1608 ;;Total ram usage:        2 bytes
  1609 ;; Hardware stack levels used:    1
  1610 ;; Hardware stack levels required when called:    3
  1611 ;; This function calls:
  1612 ;;		Nothing
  1613 ;; This function is called by:
  1614 ;;		_main
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text5
  1619  0011DC                     __ptext5:
  1620                           	opt stack 0
  1621  0011DC                     _uart_read_indicator:
  1622                           	opt stack 27
  1623                           
  1624                           ;uart.c: 110: unsigned int count = 0;
  1625                           
  1626                           ;incstack = 0
  1627  0011DC  0E00               	movlw	0
  1628  0011DE  0100               	movlb	0	; () banked
  1629  0011E0  6FAD               	movwf	(uart_read_indicator@count+1)& (0+255),b
  1630  0011E2  0E00               	movlw	0
  1631  0011E4  6FAC               	movwf	uart_read_indicator@count& (0+255),b
  1632                           
  1633                           ;uart.c: 111: while(PIR1bits.RC1IF == 0 && count < 5)
  1634  0011E6  D00B               	goto	l390
  1635  0011E8                     l391:
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;uart.c: 112: {
  1639                           ;uart.c: 113: if(RCSTA1bits.OERR == 1)
  1640  0011E8  A2AB               	btfss	4011,1,c	;volatile
  1641  0011EA  D003               	goto	l392
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;uart.c: 114: {
  1645                           ;uart.c: 115: RCSTA1bits.OERR = 0;
  1646  0011EC  92AB               	bcf	4011,1,c	;volatile
  1647                           
  1648                           ;uart.c: 116: RCSTA1bits.CREN = 0;
  1649  0011EE  98AB               	bcf	4011,4,c	;volatile
  1650                           
  1651                           ;uart.c: 117: RCSTA1bits.CREN = 1;
  1652  0011F0  88AB               	bsf	4011,4,c	;volatile
  1653  0011F2                     l392:
  1654                           
  1655                           ; BSR set to: 0
  1656                           ;uart.c: 118: }
  1657                           ;uart.c: 119: count = count + 1;
  1658                           
  1659                           ; BSR set to: 0
  1660  0011F2  0E01               	movlw	1
  1661  0011F4  25AC               	addwf	uart_read_indicator@count& (0+255),w,b
  1662  0011F6  6FAC               	movwf	uart_read_indicator@count& (0+255),b
  1663  0011F8  0E00               	movlw	0
  1664  0011FA  21AD               	addwfc	(uart_read_indicator@count+1)& (0+255),w,b
  1665  0011FC  6FAD               	movwf	(uart_read_indicator@count+1)& (0+255),b
  1666  0011FE                     l390:
  1667                           
  1668                           ; BSR set to: 0
  1669                           
  1670                           ; BSR set to: 0
  1671  0011FE  BA9E               	btfsc	3998,5,c	;volatile
  1672  001200  D006               	goto	u1130
  1673                           
  1674                           ; BSR set to: 0
  1675  001202  51AD               	movf	(uart_read_indicator@count+1)& (0+255),w,b
  1676  001204  E104               	bnz	l2331
  1677  001206  0E05               	movlw	5
  1678  001208  5DAC               	subwf	uart_read_indicator@count& (0+255),w,b
  1679  00120A  A0D8               	btfss	status,0,c
  1680  00120C  D7ED               	goto	l391
  1681  00120E                     u1130:
  1682  00120E                     l2331:
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;uart.c: 120: }
  1686                           ;uart.c: 121: if(count >= 5)
  1687  00120E  51AD               	movf	(uart_read_indicator@count+1)& (0+255),w,b
  1688  001210  E104               	bnz	u1140
  1689  001212  0E05               	movlw	5
  1690  001214  5DAC               	subwf	uart_read_indicator@count& (0+255),w,b
  1691  001216  A0D8               	btfss	status,0,c
  1692  001218  D002               	goto	l396
  1693  00121A                     u1140:
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;uart.c: 122: {
  1697                           ;uart.c: 123: return 0;
  1698  00121A  0E00               	movlw	0
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;uart.c: 124: }
  1702                           
  1703                           ; BSR set to: 0
  1704  00121C  0012               	return	
  1705  00121E                     l396:
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;uart.c: 125: else
  1709                           ;uart.c: 126: {
  1710                           ;uart.c: 127: return RCREG1;
  1711                           
  1712                           ; BSR set to: 0
  1713  00121E  50AE               	movf	4014,w,c	;volatile
  1714                           
  1715                           ; BSR set to: 0
  1716  001220  0012               	return	
  1717  001222                     __end_of_uart_read_indicator:
  1718                           	opt stack 0
  1719                           tblptru	equ	0xFF8
  1720                           tblptrh	equ	0xFF7
  1721                           tblptrl	equ	0xFF6
  1722                           tablat	equ	0xFF5
  1723                           postinc0	equ	0xFEE
  1724                           wreg	equ	0xFE8
  1725                           postinc2	equ	0xFDE
  1726                           postdec2	equ	0xFDD
  1727                           fsr2h	equ	0xFDA
  1728                           fsr2l	equ	0xFD9
  1729                           status	equ	0xFD8
  1730                           
  1731 ;; *************** function _switch_LED *****************
  1732 ;; Defined at:
  1733 ;;		line 392 in file "AD7147.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;  cdc             2   22[BANK0 ] unsigned int 
  1736 ;;  state           2   24[BANK0 ] unsigned int 
  1737 ;; Auto vars:     Size  Location     Type
  1738 ;;  message         2   28[BANK0 ] unsigned int 
  1739 ;;  message         2   26[BANK0 ] unsigned int 
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  1    wreg      void 
  1742 ;; Registers used:
  1743 ;;		wreg, status,2, status,0, cstack
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1749 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1750 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1752 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1753 ;;Total ram usage:        8 bytes
  1754 ;; Hardware stack levels used:    1
  1755 ;; Hardware stack levels required when called:    5
  1756 ;; This function calls:
  1757 ;;		_delay_ms
  1758 ;;		_get_CDC
  1759 ;;		_w32_spi
  1760 ;; This function is called by:
  1761 ;;		_main
  1762 ;; This function uses a non-reentrant model
  1763 ;;
  1764                           
  1765                           	psect	text6
  1766  000D74                     __ptext6:
  1767                           	opt stack 0
  1768  000D74                     _switch_LED:
  1769                           	opt stack 25
  1770                           
  1771                           ;AD7147.c: 394: get_CDC(cdc,0);
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;incstack = 0
  1775  000D74  C0C2  F0AC         	movff	switch_LED@cdc,get_CDC@cdc
  1776  000D78  C0C3  F0AD         	movff	switch_LED@cdc+1,get_CDC@cdc+1
  1777  000D7C  0E00               	movlw	0
  1778  000D7E  0100               	movlb	0	; () banked
  1779  000D80  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  1780  000D82  0E00               	movlw	0
  1781  000D84  6FAE               	movwf	get_CDC@state& (0+255),b
  1782  000D86  EC82  F009         	call	_get_CDC	;wreg free
  1783                           
  1784                           ;AD7147.c: 395: if (state==1)
  1785  000D8A  0100               	movlb	0	; () banked
  1786  000D8C  05C4               	decf	switch_LED@state& (0+255),w,b
  1787  000D8E  11C5               	iorwf	(switch_LED@state+1)& (0+255),w,b
  1788  000D90  A4D8               	btfss	status,2,c
  1789  000D92  D00F               	goto	l67
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;AD7147.c: 396: {
  1793                           ;AD7147.c: 397: unsigned int message = 0b0010000000000000;
  1794  000D94  0E20               	movlw	32
  1795  000D96  6FC7               	movwf	(switch_LED@message+1)& (0+255),b
  1796  000D98  0E00               	movlw	0
  1797  000D9A  6FC6               	movwf	switch_LED@message& (0+255),b
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;AD7147.c: 398: w32_spi((0xE000 + 0x005),message);
  1801  000D9C  0EE0               	movlw	224
  1802  000D9E  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  1803  000DA0  0E05               	movlw	5
  1804  000DA2  6FAC               	movwf	w32_spi@address& (0+255),b
  1805  000DA4  C0C6  F0AE         	movff	switch_LED@message,w32_spi@data
  1806  000DA8  C0C7  F0AF         	movff	switch_LED@message+1,w32_spi@data+1
  1807  000DAC  EC37  F008         	call	_w32_spi	;wreg free
  1808                           
  1809                           ;AD7147.c: 399: }
  1810  000DB0  D00F               	goto	l68
  1811  000DB2                     l67:
  1812                           
  1813                           ;AD7147.c: 400: else
  1814                           ;AD7147.c: 401: {
  1815                           ;AD7147.c: 402: unsigned int message = 0b0011000000000000;
  1816  000DB2  0E30               	movlw	48
  1817  000DB4  0100               	movlb	0	; () banked
  1818  000DB6  6FC9               	movwf	(switch_LED@message_157+1)& (0+255),b
  1819  000DB8  0E00               	movlw	0
  1820  000DBA  6FC8               	movwf	switch_LED@message_157& (0+255),b
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;AD7147.c: 403: w32_spi((0xE000 + 0x005),message);
  1824  000DBC  0EE0               	movlw	224
  1825  000DBE  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  1826  000DC0  0E05               	movlw	5
  1827  000DC2  6FAC               	movwf	w32_spi@address& (0+255),b
  1828  000DC4  C0C8  F0AE         	movff	switch_LED@message_157,w32_spi@data
  1829  000DC8  C0C9  F0AF         	movff	switch_LED@message_157+1,w32_spi@data+1
  1830  000DCC  EC37  F008         	call	_w32_spi	;wreg free
  1831  000DD0                     l68:
  1832                           
  1833                           ;AD7147.c: 404: }
  1834                           ;AD7147.c: 405: delay_ms(10);
  1835  000DD0  0E00               	movlw	0
  1836  000DD2  0100               	movlb	0	; () banked
  1837  000DD4  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  1838  000DD6  0E0A               	movlw	10
  1839  000DD8  6FB4               	movwf	delay_ms@n& (0+255),b
  1840  000DDA  EC11  F009         	call	_delay_ms	;wreg free
  1841                           
  1842                           ;AD7147.c: 406: get_CDC(cdc,1);
  1843  000DDE  C0C2  F0AC         	movff	switch_LED@cdc,get_CDC@cdc
  1844  000DE2  C0C3  F0AD         	movff	switch_LED@cdc+1,get_CDC@cdc+1
  1845  000DE6  0E00               	movlw	0
  1846  000DE8  0100               	movlb	0	; () banked
  1847  000DEA  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  1848  000DEC  0E01               	movlw	1
  1849  000DEE  6FAE               	movwf	get_CDC@state& (0+255),b
  1850  000DF0  EC82  F009         	call	_get_CDC	;wreg free
  1851  000DF4  0012               	return		;funcret
  1852  000DF6                     __end_of_switch_LED:
  1853                           	opt stack 0
  1854                           tblptru	equ	0xFF8
  1855                           tblptrh	equ	0xFF7
  1856                           tblptrl	equ	0xFF6
  1857                           tablat	equ	0xFF5
  1858                           postinc0	equ	0xFEE
  1859                           wreg	equ	0xFE8
  1860                           postinc2	equ	0xFDE
  1861                           postdec2	equ	0xFDD
  1862                           fsr2h	equ	0xFDA
  1863                           fsr2l	equ	0xFD9
  1864                           status	equ	0xFD8
  1865                           
  1866 ;; *************** function _setup_spi *****************
  1867 ;; Defined at:
  1868 ;;		line 4 in file "spi.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;		None
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;		None
  1873 ;; Return value:  Size  Location     Type
  1874 ;;                  1    wreg      void 
  1875 ;; Registers used:
  1876 ;;		None
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1886 ;;Total ram usage:        0 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; Hardware stack levels required when called:    3
  1889 ;; This function calls:
  1890 ;;		Nothing
  1891 ;; This function is called by:
  1892 ;;		_main
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text7
  1897  001388                     __ptext7:
  1898                           	opt stack 0
  1899  001388                     _setup_spi:
  1900                           	opt stack 27
  1901                           
  1902                           ;spi.c: 6: SSPSTATbits.SMP = 0;
  1903                           
  1904                           ;incstack = 0
  1905  001388  9EC7               	bcf	4039,7,c	;volatile
  1906                           
  1907                           ;spi.c: 7: SSPSTATbits.CKE = 0;
  1908  00138A  9CC7               	bcf	4039,6,c	;volatile
  1909                           
  1910                           ;spi.c: 9: SSPCON1bits.WCOL = 0;
  1911  00138C  9EC6               	bcf	4038,7,c	;volatile
  1912                           
  1913                           ;spi.c: 10: SSPCON1bits.CKP = 1;
  1914  00138E  88C6               	bsf	4038,4,c	;volatile
  1915                           
  1916                           ;spi.c: 12: SSPCON1bits.SSPM3 = 0;
  1917  001390  96C6               	bcf	4038,3,c	;volatile
  1918                           
  1919                           ;spi.c: 13: SSPCON1bits.SSPM2 = 0;
  1920  001392  94C6               	bcf	4038,2,c	;volatile
  1921                           
  1922                           ;spi.c: 14: SSPCON1bits.SSPM1 = 1;
  1923  001394  82C6               	bsf	4038,1,c	;volatile
  1924                           
  1925                           ;spi.c: 15: SSPCON1bits.SSPM0 = 0;
  1926  001396  90C6               	bcf	4038,0,c	;volatile
  1927                           
  1928                           ;spi.c: 17: PIE1bits.SSPIE = 0;
  1929  001398  969D               	bcf	3997,3,c	;volatile
  1930                           
  1931                           ;spi.c: 19: SSPCON1bits.SSPEN = 1;
  1932  00139A  8AC6               	bsf	4038,5,c	;volatile
  1933  00139C  0012               	return		;funcret
  1934  00139E                     __end_of_setup_spi:
  1935                           	opt stack 0
  1936                           tblptru	equ	0xFF8
  1937                           tblptrh	equ	0xFF7
  1938                           tblptrl	equ	0xFF6
  1939                           tablat	equ	0xFF5
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           postinc2	equ	0xFDE
  1943                           postdec2	equ	0xFDD
  1944                           fsr2h	equ	0xFDA
  1945                           fsr2l	equ	0xFD9
  1946                           status	equ	0xFD8
  1947                           
  1948 ;; *************** function _setup_mcu *****************
  1949 ;; Defined at:
  1950 ;;		line 5 in file "micro_setup.c"
  1951 ;; Parameters:    Size  Location     Type
  1952 ;;		None
  1953 ;; Auto vars:     Size  Location     Type
  1954 ;;		None
  1955 ;; Return value:  Size  Location     Type
  1956 ;;                  1    wreg      void 
  1957 ;; Registers used:
  1958 ;;		wreg, status,2, cstack
  1959 ;; Tracked objects:
  1960 ;;		On entry : 0/0
  1961 ;;		On exit  : 0/0
  1962 ;;		Unchanged: 0/0
  1963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1968 ;;Total ram usage:        0 bytes
  1969 ;; Hardware stack levels used:    1
  1970 ;; Hardware stack levels required when called:    4
  1971 ;; This function calls:
  1972 ;;		_init_uart
  1973 ;;		_setup_port
  1974 ;; This function is called by:
  1975 ;;		_main
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           	psect	text8
  1980  0013E0                     __ptext8:
  1981                           	opt stack 0
  1982  0013E0                     _setup_mcu:
  1983                           	opt stack 26
  1984                           
  1985                           ;micro_setup.c: 7: setup_port();
  1986                           
  1987                           ;incstack = 0
  1988  0013E0  ECEA  F009         	call	_setup_port	;wreg free
  1989                           
  1990                           ;micro_setup.c: 8: init_uart();
  1991  0013E4  ECD9  F009         	call	_init_uart	;wreg free
  1992  0013E8  0012               	return		;funcret
  1993  0013EA                     __end_of_setup_mcu:
  1994                           	opt stack 0
  1995                           tblptru	equ	0xFF8
  1996                           tblptrh	equ	0xFF7
  1997                           tblptrl	equ	0xFF6
  1998                           tablat	equ	0xFF5
  1999                           postinc0	equ	0xFEE
  2000                           wreg	equ	0xFE8
  2001                           postinc2	equ	0xFDE
  2002                           postdec2	equ	0xFDD
  2003                           fsr2h	equ	0xFDA
  2004                           fsr2l	equ	0xFD9
  2005                           status	equ	0xFD8
  2006                           
  2007 ;; *************** function _setup_port *****************
  2008 ;; Defined at:
  2009 ;;		line 11 in file "micro_setup.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;		None
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;		None
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      void 
  2016 ;; Registers used:
  2017 ;;		wreg, status,2
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2027 ;;Total ram usage:        0 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; Hardware stack levels required when called:    3
  2030 ;; This function calls:
  2031 ;;		Nothing
  2032 ;; This function is called by:
  2033 ;;		_setup_mcu
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036                           
  2037                           	psect	text9
  2038  0013D4                     __ptext9:
  2039                           	opt stack 0
  2040  0013D4                     _setup_port:
  2041                           	opt stack 26
  2042                           
  2043                           ;micro_setup.c: 15: TRISC = 0b10010000;
  2044                           
  2045                           ;incstack = 0
  2046  0013D4  0E90               	movlw	144
  2047  0013D6  6E94               	movwf	3988,c	;volatile
  2048                           
  2049                           ;micro_setup.c: 16: LATCbits.LATC1=1;
  2050  0013D8  828B               	bsf	3979,1,c	;volatile
  2051                           
  2052                           ;micro_setup.c: 17: LATCbits.LATC0=1;
  2053  0013DA  808B               	bsf	3979,0,c	;volatile
  2054                           
  2055                           ;micro_setup.c: 18: LATCbits.LATC2=1;
  2056  0013DC  848B               	bsf	3979,2,c	;volatile
  2057  0013DE  0012               	return		;funcret
  2058  0013E0                     __end_of_setup_port:
  2059                           	opt stack 0
  2060                           tblptru	equ	0xFF8
  2061                           tblptrh	equ	0xFF7
  2062                           tblptrl	equ	0xFF6
  2063                           tablat	equ	0xFF5
  2064                           postinc0	equ	0xFEE
  2065                           wreg	equ	0xFE8
  2066                           postinc2	equ	0xFDE
  2067                           postdec2	equ	0xFDD
  2068                           fsr2h	equ	0xFDA
  2069                           fsr2l	equ	0xFD9
  2070                           status	equ	0xFD8
  2071                           
  2072 ;; *************** function _init_uart *****************
  2073 ;; Defined at:
  2074 ;;		line 46 in file "micro_setup.c"
  2075 ;; Parameters:    Size  Location     Type
  2076 ;;		None
  2077 ;; Auto vars:     Size  Location     Type
  2078 ;;		None
  2079 ;; Return value:  Size  Location     Type
  2080 ;;                  1    wreg      void 
  2081 ;; Registers used:
  2082 ;;		wreg, status,2
  2083 ;; Tracked objects:
  2084 ;;		On entry : 0/0
  2085 ;;		On exit  : 0/0
  2086 ;;		Unchanged: 0/0
  2087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2092 ;;Total ram usage:        0 bytes
  2093 ;; Hardware stack levels used:    1
  2094 ;; Hardware stack levels required when called:    3
  2095 ;; This function calls:
  2096 ;;		Nothing
  2097 ;; This function is called by:
  2098 ;;		_setup_mcu
  2099 ;; This function uses a non-reentrant model
  2100 ;;
  2101                           
  2102                           	psect	text10
  2103  0013B2                     __ptext10:
  2104                           	opt stack 0
  2105  0013B2                     _init_uart:
  2106                           	opt stack 26
  2107                           
  2108                           ;micro_setup.c: 48: TXSTA1 = 0b00100000;
  2109                           
  2110                           ;incstack = 0
  2111  0013B2  0E20               	movlw	32
  2112  0013B4  6EAC               	movwf	4012,c	;volatile
  2113                           
  2114                           ;micro_setup.c: 62: SPBRG1 = 12;
  2115  0013B6  0E0C               	movlw	12
  2116  0013B8  6EAF               	movwf	4015,c	;volatile
  2117                           
  2118                           ;micro_setup.c: 64: BAUDCON1 = 0b00000000;
  2119  0013BA  0E00               	movlw	0
  2120  0013BC  6EA7               	movwf	4007,c	;volatile
  2121                           
  2122                           ;micro_setup.c: 84: RCSTA1bits.SPEN=1;
  2123  0013BE  8EAB               	bsf	4011,7,c	;volatile
  2124                           
  2125                           ;micro_setup.c: 85: RCSTA1bits.RX9=0;
  2126  0013C0  9CAB               	bcf	4011,6,c	;volatile
  2127                           
  2128                           ;micro_setup.c: 86: RCSTA1bits.CREN=1;
  2129  0013C2  88AB               	bsf	4011,4,c	;volatile
  2130  0013C4  0012               	return		;funcret
  2131  0013C6                     __end_of_init_uart:
  2132                           	opt stack 0
  2133                           tblptru	equ	0xFF8
  2134                           tblptrh	equ	0xFF7
  2135                           tblptrl	equ	0xFF6
  2136                           tablat	equ	0xFF5
  2137                           postinc0	equ	0xFEE
  2138                           wreg	equ	0xFE8
  2139                           postinc2	equ	0xFDE
  2140                           postdec2	equ	0xFDD
  2141                           fsr2h	equ	0xFDA
  2142                           fsr2l	equ	0xFD9
  2143                           status	equ	0xFD8
  2144                           
  2145 ;; *************** function _setup_AD7147 *****************
  2146 ;; Defined at:
  2147 ;;		line 6 in file "AD7147.c"
  2148 ;; Parameters:    Size  Location     Type
  2149 ;;  DataBuffer      2   40[BANK0 ] PTR unsigned int 
  2150 ;;		 -> interrupt_values_cdc1(6), 
  2151 ;;  cdc             2   42[BANK0 ] unsigned int 
  2152 ;; Auto vars:     Size  Location     Type
  2153 ;;  StageBuffer    16   44[BANK0 ] unsigned int [8]
  2154 ;; Return value:  Size  Location     Type
  2155 ;;                  1    wreg      void 
  2156 ;; Registers used:
  2157 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2158 ;; Tracked objects:
  2159 ;;		On entry : 0/0
  2160 ;;		On exit  : 0/0
  2161 ;;		Unchanged: 0/0
  2162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2163 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2164 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2166 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2167 ;;Total ram usage:       20 bytes
  2168 ;; Hardware stack levels used:    1
  2169 ;; Hardware stack levels required when called:    5
  2170 ;; This function calls:
  2171 ;;		_read_AD7147
  2172 ;;		_write_AD7147
  2173 ;; This function is called by:
  2174 ;;		_main
  2175 ;; This function uses a non-reentrant model
  2176 ;;
  2177                           
  2178                           	psect	text11
  2179  000112                     __ptext11:
  2180                           	opt stack 0
  2181  000112                     _setup_AD7147:
  2182                           	opt stack 25
  2183                           
  2184                           ;AD7147.c: 8: unsigned int StageBuffer[8] = {0};
  2185                           
  2186                           ;incstack = 0
  2187  000112  EE20  F060         	lfsr	2,setup_AD7147@F14945
  2188  000116  EE10  F0D8         	lfsr	1,setup_AD7147@StageBuffer
  2189  00011A  0E0F               	movlw	15
  2190  00011C                     u1001:
  2191  00011C  CFDB FFE3          	movff	plusw2,plusw1
  2192  000120  06E8               	decf	wreg,f,c
  2193  000122  E2FC               	bc	u1001
  2194                           
  2195                           ;AD7147.c: 23: StageBuffer[0] = 0x3FFE;
  2196  000124  0E3F               	movlw	63
  2197  000126  0100               	movlb	0	; () banked
  2198  000128  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2199  00012A  0EFE               	movlw	254
  2200  00012C  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;AD7147.c: 24: StageBuffer[1] = 0x1FFF;
  2204  00012E  0E1F               	movlw	31
  2205  000130  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2206  000132  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;AD7147.c: 25: StageBuffer[2] = 0x0100;
  2210  000134  0E01               	movlw	1
  2211  000136  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2212  000138  0E00               	movlw	0
  2213  00013A  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;AD7147.c: 26: StageBuffer[3] = 0x2121;
  2217  00013C  0E21               	movlw	33
  2218  00013E  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2219  000140  0E21               	movlw	33
  2220  000142  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;AD7147.c: 27: StageBuffer[4] = 500;
  2224  000144  0E01               	movlw	1
  2225  000146  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2226  000148  0EF4               	movlw	244
  2227  00014A  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;AD7147.c: 28: StageBuffer[5] = 500;
  2231  00014C  0E01               	movlw	1
  2232  00014E  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2233  000150  0EF4               	movlw	244
  2234  000152  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;AD7147.c: 29: StageBuffer[6] = 600;
  2238  000154  0E02               	movlw	2
  2239  000156  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2240  000158  0E58               	movlw	88
  2241  00015A  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;AD7147.c: 30: StageBuffer[7] = 600;
  2245  00015C  0E02               	movlw	2
  2246  00015E  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2247  000160  0E58               	movlw	88
  2248  000162  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;AD7147.c: 31: write_AD7147(0x080, 8, StageBuffer, 0, cdc);
  2252  000164  0E00               	movlw	0
  2253  000166  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2254  000168  0E80               	movlw	128
  2255  00016A  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2256  00016C  0E00               	movlw	0
  2257  00016E  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2258  000170  0E08               	movlw	8
  2259  000172  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2260  000174  0ED8               	movlw	low setup_AD7147@StageBuffer
  2261  000176  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2262  000178  0E00               	movlw	high setup_AD7147@StageBuffer
  2263  00017A  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2264  00017C  0E00               	movlw	0
  2265  00017E  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2266  000180  0E00               	movlw	0
  2267  000182  6FC8               	movwf	write_AD7147@index& (0+255),b
  2268  000184  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2269  000188  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2270  00018C  ECE5  F005         	call	_write_AD7147	;wreg free
  2271                           
  2272                           ;AD7147.c: 36: StageBuffer[0]=0x3FFB;
  2273  000190  0E3F               	movlw	63
  2274  000192  0100               	movlb	0	; () banked
  2275  000194  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2276  000196  0EFB               	movlw	251
  2277  000198  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;AD7147.c: 37: StageBuffer[1]=0x1FFF;
  2281  00019A  0E1F               	movlw	31
  2282  00019C  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2283  00019E  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;AD7147.c: 38: StageBuffer[2]=0x0100;
  2287  0001A0  0E01               	movlw	1
  2288  0001A2  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2289  0001A4  0E00               	movlw	0
  2290  0001A6  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2291                           
  2292                           ; BSR set to: 0
  2293                           ;AD7147.c: 39: StageBuffer[3]=0x2121;
  2294  0001A8  0E21               	movlw	33
  2295  0001AA  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2296  0001AC  0E21               	movlw	33
  2297  0001AE  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;AD7147.c: 40: StageBuffer[4]=500;
  2301  0001B0  0E01               	movlw	1
  2302  0001B2  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2303  0001B4  0EF4               	movlw	244
  2304  0001B6  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;AD7147.c: 41: StageBuffer[5]=500;
  2308  0001B8  0E01               	movlw	1
  2309  0001BA  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2310  0001BC  0EF4               	movlw	244
  2311  0001BE  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;AD7147.c: 42: StageBuffer[6]=600;
  2315  0001C0  0E02               	movlw	2
  2316  0001C2  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2317  0001C4  0E58               	movlw	88
  2318  0001C6  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;AD7147.c: 43: StageBuffer[7]=600;
  2322  0001C8  0E02               	movlw	2
  2323  0001CA  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2324  0001CC  0E58               	movlw	88
  2325  0001CE  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;AD7147.c: 44: write_AD7147(0x088, 8, StageBuffer, 0, cdc);
  2329  0001D0  0E00               	movlw	0
  2330  0001D2  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2331  0001D4  0E88               	movlw	136
  2332  0001D6  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2333  0001D8  0E00               	movlw	0
  2334  0001DA  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2335  0001DC  0E08               	movlw	8
  2336  0001DE  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2337  0001E0  0ED8               	movlw	low setup_AD7147@StageBuffer
  2338  0001E2  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2339  0001E4  0E00               	movlw	high setup_AD7147@StageBuffer
  2340  0001E6  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2341  0001E8  0E00               	movlw	0
  2342  0001EA  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2343  0001EC  0E00               	movlw	0
  2344  0001EE  6FC8               	movwf	write_AD7147@index& (0+255),b
  2345  0001F0  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2346  0001F4  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2347  0001F8  ECE5  F005         	call	_write_AD7147	;wreg free
  2348                           
  2349                           ;AD7147.c: 49: StageBuffer[0]=0x3FEF;
  2350  0001FC  0E3F               	movlw	63
  2351  0001FE  0100               	movlb	0	; () banked
  2352  000200  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2353  000202  0EEF               	movlw	239
  2354  000204  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;AD7147.c: 50: StageBuffer[1]=0x1FFF;
  2358  000206  0E1F               	movlw	31
  2359  000208  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2360  00020A  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;AD7147.c: 51: StageBuffer[2]=0x0100;
  2364  00020C  0E01               	movlw	1
  2365  00020E  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2366  000210  0E00               	movlw	0
  2367  000212  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;AD7147.c: 52: StageBuffer[3]=0x2121;
  2371  000214  0E21               	movlw	33
  2372  000216  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2373  000218  0E21               	movlw	33
  2374  00021A  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;AD7147.c: 53: StageBuffer[4]=500;
  2378  00021C  0E01               	movlw	1
  2379  00021E  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2380  000220  0EF4               	movlw	244
  2381  000222  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2382                           
  2383                           ; BSR set to: 0
  2384                           ;AD7147.c: 54: StageBuffer[5]=500;
  2385  000224  0E01               	movlw	1
  2386  000226  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2387  000228  0EF4               	movlw	244
  2388  00022A  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;AD7147.c: 55: StageBuffer[6]=600;
  2392  00022C  0E02               	movlw	2
  2393  00022E  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2394  000230  0E58               	movlw	88
  2395  000232  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;AD7147.c: 56: StageBuffer[7]=600;
  2399  000234  0E02               	movlw	2
  2400  000236  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2401  000238  0E58               	movlw	88
  2402  00023A  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;AD7147.c: 57: write_AD7147(0x090, 8, StageBuffer, 0, cdc);
  2406  00023C  0E00               	movlw	0
  2407  00023E  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2408  000240  0E90               	movlw	144
  2409  000242  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2410  000244  0E00               	movlw	0
  2411  000246  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2412  000248  0E08               	movlw	8
  2413  00024A  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2414  00024C  0ED8               	movlw	low setup_AD7147@StageBuffer
  2415  00024E  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2416  000250  0E00               	movlw	high setup_AD7147@StageBuffer
  2417  000252  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2418  000254  0E00               	movlw	0
  2419  000256  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2420  000258  0E00               	movlw	0
  2421  00025A  6FC8               	movwf	write_AD7147@index& (0+255),b
  2422  00025C  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2423  000260  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2424  000264  ECE5  F005         	call	_write_AD7147	;wreg free
  2425                           
  2426                           ;AD7147.c: 62: StageBuffer[0]=0x3FBF;
  2427  000268  0E3F               	movlw	63
  2428  00026A  0100               	movlb	0	; () banked
  2429  00026C  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2430  00026E  0EBF               	movlw	191
  2431  000270  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;AD7147.c: 63: StageBuffer[1]=0x1FFF;
  2435  000272  0E1F               	movlw	31
  2436  000274  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2437  000276  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2438                           
  2439                           ; BSR set to: 0
  2440                           ;AD7147.c: 64: StageBuffer[2]=0x0100;
  2441  000278  0E01               	movlw	1
  2442  00027A  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2443  00027C  0E00               	movlw	0
  2444  00027E  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2445                           
  2446                           ; BSR set to: 0
  2447                           ;AD7147.c: 65: StageBuffer[3]=0x2121;
  2448  000280  0E21               	movlw	33
  2449  000282  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2450  000284  0E21               	movlw	33
  2451  000286  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;AD7147.c: 66: StageBuffer[4]=500;
  2455  000288  0E01               	movlw	1
  2456  00028A  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2457  00028C  0EF4               	movlw	244
  2458  00028E  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;AD7147.c: 67: StageBuffer[5]=500;
  2462  000290  0E01               	movlw	1
  2463  000292  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2464  000294  0EF4               	movlw	244
  2465  000296  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;AD7147.c: 68: StageBuffer[6]=600;
  2469  000298  0E02               	movlw	2
  2470  00029A  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2471  00029C  0E58               	movlw	88
  2472  00029E  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;AD7147.c: 69: StageBuffer[7]=600;
  2476  0002A0  0E02               	movlw	2
  2477  0002A2  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2478  0002A4  0E58               	movlw	88
  2479  0002A6  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;AD7147.c: 70: write_AD7147(0x098, 8, StageBuffer, 0, cdc);
  2483  0002A8  0E00               	movlw	0
  2484  0002AA  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2485  0002AC  0E98               	movlw	152
  2486  0002AE  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2487  0002B0  0E00               	movlw	0
  2488  0002B2  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2489  0002B4  0E08               	movlw	8
  2490  0002B6  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2491  0002B8  0ED8               	movlw	low setup_AD7147@StageBuffer
  2492  0002BA  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2493  0002BC  0E00               	movlw	high setup_AD7147@StageBuffer
  2494  0002BE  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2495  0002C0  0E00               	movlw	0
  2496  0002C2  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2497  0002C4  0E00               	movlw	0
  2498  0002C6  6FC8               	movwf	write_AD7147@index& (0+255),b
  2499  0002C8  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2500  0002CC  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2501  0002D0  ECE5  F005         	call	_write_AD7147	;wreg free
  2502                           
  2503                           ;AD7147.c: 75: StageBuffer[0]=0x3EFF;
  2504  0002D4  0E3E               	movlw	62
  2505  0002D6  0100               	movlb	0	; () banked
  2506  0002D8  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2507  0002DA  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;AD7147.c: 76: StageBuffer[1]=0x1FFF;
  2511  0002DC  0E1F               	movlw	31
  2512  0002DE  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2513  0002E0  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;AD7147.c: 77: StageBuffer[2]=0x0100;
  2517  0002E2  0E01               	movlw	1
  2518  0002E4  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2519  0002E6  0E00               	movlw	0
  2520  0002E8  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;AD7147.c: 78: StageBuffer[3]=0x2121;
  2524  0002EA  0E21               	movlw	33
  2525  0002EC  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2526  0002EE  0E21               	movlw	33
  2527  0002F0  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2528                           
  2529                           ; BSR set to: 0
  2530                           ;AD7147.c: 79: StageBuffer[4]=500;
  2531  0002F2  0E01               	movlw	1
  2532  0002F4  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2533  0002F6  0EF4               	movlw	244
  2534  0002F8  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;AD7147.c: 80: StageBuffer[5]=500;
  2538  0002FA  0E01               	movlw	1
  2539  0002FC  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2540  0002FE  0EF4               	movlw	244
  2541  000300  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;AD7147.c: 81: StageBuffer[6]=600;
  2545  000302  0E02               	movlw	2
  2546  000304  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2547  000306  0E58               	movlw	88
  2548  000308  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;AD7147.c: 82: StageBuffer[7]=600;
  2552  00030A  0E02               	movlw	2
  2553  00030C  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2554  00030E  0E58               	movlw	88
  2555  000310  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;AD7147.c: 83: write_AD7147(0x0A0, 8, StageBuffer,0, cdc);
  2559  000312  0E00               	movlw	0
  2560  000314  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2561  000316  0EA0               	movlw	160
  2562  000318  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2563  00031A  0E00               	movlw	0
  2564  00031C  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2565  00031E  0E08               	movlw	8
  2566  000320  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2567  000322  0ED8               	movlw	low setup_AD7147@StageBuffer
  2568  000324  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2569  000326  0E00               	movlw	high setup_AD7147@StageBuffer
  2570  000328  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2571  00032A  0E00               	movlw	0
  2572  00032C  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2573  00032E  0E00               	movlw	0
  2574  000330  6FC8               	movwf	write_AD7147@index& (0+255),b
  2575  000332  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2576  000336  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2577  00033A  ECE5  F005         	call	_write_AD7147	;wreg free
  2578                           
  2579                           ;AD7147.c: 88: StageBuffer[0]=0x3BFF;
  2580  00033E  0E3B               	movlw	59
  2581  000340  0100               	movlb	0	; () banked
  2582  000342  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2583  000344  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;AD7147.c: 89: StageBuffer[1]=0x1FFF;
  2587  000346  0E1F               	movlw	31
  2588  000348  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2589  00034A  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;AD7147.c: 90: StageBuffer[2]=0x0100;
  2593  00034C  0E01               	movlw	1
  2594  00034E  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2595  000350  0E00               	movlw	0
  2596  000352  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;AD7147.c: 91: StageBuffer[3]=0x2121;
  2600  000354  0E21               	movlw	33
  2601  000356  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2602  000358  0E21               	movlw	33
  2603  00035A  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;AD7147.c: 92: StageBuffer[4]=500;
  2607  00035C  0E01               	movlw	1
  2608  00035E  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2609  000360  0EF4               	movlw	244
  2610  000362  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;AD7147.c: 93: StageBuffer[5]=500;
  2614  000364  0E01               	movlw	1
  2615  000366  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2616  000368  0EF4               	movlw	244
  2617  00036A  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2618                           
  2619                           ; BSR set to: 0
  2620                           ;AD7147.c: 94: StageBuffer[6]=600;
  2621  00036C  0E02               	movlw	2
  2622  00036E  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2623  000370  0E58               	movlw	88
  2624  000372  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;AD7147.c: 95: StageBuffer[7]=600;
  2628  000374  0E02               	movlw	2
  2629  000376  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2630  000378  0E58               	movlw	88
  2631  00037A  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;AD7147.c: 96: write_AD7147(0x0A8, 8, StageBuffer,0, cdc);
  2635  00037C  0E00               	movlw	0
  2636  00037E  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2637  000380  0EA8               	movlw	168
  2638  000382  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2639  000384  0E00               	movlw	0
  2640  000386  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2641  000388  0E08               	movlw	8
  2642  00038A  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2643  00038C  0ED8               	movlw	low setup_AD7147@StageBuffer
  2644  00038E  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2645  000390  0E00               	movlw	high setup_AD7147@StageBuffer
  2646  000392  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2647  000394  0E00               	movlw	0
  2648  000396  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2649  000398  0E00               	movlw	0
  2650  00039A  6FC8               	movwf	write_AD7147@index& (0+255),b
  2651  00039C  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2652  0003A0  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2653  0003A4  ECE5  F005         	call	_write_AD7147	;wreg free
  2654                           
  2655                           ;AD7147.c: 101: StageBuffer[0]=0x3FFF;
  2656  0003A8  0E3F               	movlw	63
  2657  0003AA  0100               	movlb	0	; () banked
  2658  0003AC  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2659  0003AE  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;AD7147.c: 102: StageBuffer[1]=0xDFFF;
  2663  0003B0  0EDF               	movlw	223
  2664  0003B2  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2665  0003B4  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;AD7147.c: 103: StageBuffer[2]=0x0100;
  2669  0003B6  0E01               	movlw	1
  2670  0003B8  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2671  0003BA  0E00               	movlw	0
  2672  0003BC  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;AD7147.c: 104: StageBuffer[3]=0x2121;
  2676  0003BE  0E21               	movlw	33
  2677  0003C0  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2678  0003C2  0E21               	movlw	33
  2679  0003C4  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;AD7147.c: 105: StageBuffer[4]=500;
  2683  0003C6  0E01               	movlw	1
  2684  0003C8  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2685  0003CA  0EF4               	movlw	244
  2686  0003CC  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;AD7147.c: 106: StageBuffer[5]=500;
  2690  0003CE  0E01               	movlw	1
  2691  0003D0  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2692  0003D2  0EF4               	movlw	244
  2693  0003D4  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;AD7147.c: 107: StageBuffer[6]=600;
  2697  0003D6  0E02               	movlw	2
  2698  0003D8  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2699  0003DA  0E58               	movlw	88
  2700  0003DC  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;AD7147.c: 108: StageBuffer[7]=600;
  2704  0003DE  0E02               	movlw	2
  2705  0003E0  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2706  0003E2  0E58               	movlw	88
  2707  0003E4  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;AD7147.c: 109: write_AD7147(0x0B0, 8, StageBuffer, 0, cdc);
  2711  0003E6  0E00               	movlw	0
  2712  0003E8  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2713  0003EA  0EB0               	movlw	176
  2714  0003EC  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2715  0003EE  0E00               	movlw	0
  2716  0003F0  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2717  0003F2  0E08               	movlw	8
  2718  0003F4  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2719  0003F6  0ED8               	movlw	low setup_AD7147@StageBuffer
  2720  0003F8  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2721  0003FA  0E00               	movlw	high setup_AD7147@StageBuffer
  2722  0003FC  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2723  0003FE  0E00               	movlw	0
  2724  000400  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2725  000402  0E00               	movlw	0
  2726  000404  6FC8               	movwf	write_AD7147@index& (0+255),b
  2727  000406  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2728  00040A  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2729  00040E  ECE5  F005         	call	_write_AD7147	;wreg free
  2730                           
  2731                           ;AD7147.c: 114: StageBuffer[0]=0x3FFF;
  2732  000412  0E3F               	movlw	63
  2733  000414  0100               	movlb	0	; () banked
  2734  000416  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2735  000418  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;AD7147.c: 115: StageBuffer[1]=0xDFFF;
  2739  00041A  0EDF               	movlw	223
  2740  00041C  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2741  00041E  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;AD7147.c: 116: StageBuffer[2]=0x0100;
  2745  000420  0E01               	movlw	1
  2746  000422  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2747  000424  0E00               	movlw	0
  2748  000426  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;AD7147.c: 117: StageBuffer[3]=0x2121;
  2752  000428  0E21               	movlw	33
  2753  00042A  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2754  00042C  0E21               	movlw	33
  2755  00042E  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2756                           
  2757                           ; BSR set to: 0
  2758                           ;AD7147.c: 118: StageBuffer[4]=500;
  2759  000430  0E01               	movlw	1
  2760  000432  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2761  000434  0EF4               	movlw	244
  2762  000436  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;AD7147.c: 119: StageBuffer[5]=500;
  2766  000438  0E01               	movlw	1
  2767  00043A  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2768  00043C  0EF4               	movlw	244
  2769  00043E  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;AD7147.c: 120: StageBuffer[6]=600;
  2773  000440  0E02               	movlw	2
  2774  000442  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2775  000444  0E58               	movlw	88
  2776  000446  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;AD7147.c: 121: StageBuffer[7]=600;
  2780  000448  0E02               	movlw	2
  2781  00044A  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2782  00044C  0E58               	movlw	88
  2783  00044E  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2784                           
  2785                           ; BSR set to: 0
  2786                           ;AD7147.c: 122: write_AD7147(0x0B8, 8, StageBuffer, 0, cdc);
  2787  000450  0E00               	movlw	0
  2788  000452  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2789  000454  0EB8               	movlw	184
  2790  000456  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2791  000458  0E00               	movlw	0
  2792  00045A  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2793  00045C  0E08               	movlw	8
  2794  00045E  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2795  000460  0ED8               	movlw	low setup_AD7147@StageBuffer
  2796  000462  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2797  000464  0E00               	movlw	high setup_AD7147@StageBuffer
  2798  000466  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2799  000468  0E00               	movlw	0
  2800  00046A  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2801  00046C  0E00               	movlw	0
  2802  00046E  6FC8               	movwf	write_AD7147@index& (0+255),b
  2803  000470  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2804  000474  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2805  000478  ECE5  F005         	call	_write_AD7147	;wreg free
  2806                           
  2807                           ;AD7147.c: 127: StageBuffer[0]=0x3FFF;
  2808  00047C  0E3F               	movlw	63
  2809  00047E  0100               	movlb	0	; () banked
  2810  000480  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2811  000482  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;AD7147.c: 128: StageBuffer[1]=0xDFFF;
  2815  000484  0EDF               	movlw	223
  2816  000486  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2817  000488  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;AD7147.c: 129: StageBuffer[2]=0x0100;
  2821  00048A  0E01               	movlw	1
  2822  00048C  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2823  00048E  0E00               	movlw	0
  2824  000490  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;AD7147.c: 130: StageBuffer[3]=0x2121;
  2828  000492  0E21               	movlw	33
  2829  000494  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2830  000496  0E21               	movlw	33
  2831  000498  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;AD7147.c: 131: StageBuffer[4]=500;
  2835  00049A  0E01               	movlw	1
  2836  00049C  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2837  00049E  0EF4               	movlw	244
  2838  0004A0  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;AD7147.c: 132: StageBuffer[5]=500;
  2842  0004A2  0E01               	movlw	1
  2843  0004A4  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2844  0004A6  0EF4               	movlw	244
  2845  0004A8  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;AD7147.c: 133: StageBuffer[6]=600;
  2849  0004AA  0E02               	movlw	2
  2850  0004AC  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2851  0004AE  0E58               	movlw	88
  2852  0004B0  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;AD7147.c: 134: StageBuffer[7]=600;
  2856  0004B2  0E02               	movlw	2
  2857  0004B4  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2858  0004B6  0E58               	movlw	88
  2859  0004B8  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;AD7147.c: 135: write_AD7147(0x0C0, 8, StageBuffer, 0, cdc);
  2863  0004BA  0E00               	movlw	0
  2864  0004BC  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2865  0004BE  0EC0               	movlw	192
  2866  0004C0  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2867  0004C2  0E00               	movlw	0
  2868  0004C4  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2869  0004C6  0E08               	movlw	8
  2870  0004C8  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2871  0004CA  0ED8               	movlw	low setup_AD7147@StageBuffer
  2872  0004CC  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2873  0004CE  0E00               	movlw	high setup_AD7147@StageBuffer
  2874  0004D0  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2875  0004D2  0E00               	movlw	0
  2876  0004D4  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2877  0004D6  0E00               	movlw	0
  2878  0004D8  6FC8               	movwf	write_AD7147@index& (0+255),b
  2879  0004DA  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2880  0004DE  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2881  0004E2  ECE5  F005         	call	_write_AD7147	;wreg free
  2882                           
  2883                           ;AD7147.c: 140: StageBuffer[0]=0x3FFF;
  2884  0004E6  0E3F               	movlw	63
  2885  0004E8  0100               	movlb	0	; () banked
  2886  0004EA  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2887  0004EC  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;AD7147.c: 141: StageBuffer[1]=0xDFFF;
  2891  0004EE  0EDF               	movlw	223
  2892  0004F0  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2893  0004F2  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;AD7147.c: 142: StageBuffer[2]=0x0000;
  2897  0004F4  0E00               	movlw	0
  2898  0004F6  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2899  0004F8  0E00               	movlw	0
  2900  0004FA  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;AD7147.c: 143: StageBuffer[3]=0x2626;
  2904  0004FC  0E26               	movlw	38
  2905  0004FE  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2906  000500  0E26               	movlw	38
  2907  000502  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2908                           
  2909                           ; BSR set to: 0
  2910                           ;AD7147.c: 144: StageBuffer[4]=4000;
  2911  000504  0E0F               	movlw	15
  2912  000506  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2913  000508  0EA0               	movlw	160
  2914  00050A  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;AD7147.c: 145: StageBuffer[5]=2500;
  2918  00050C  0E09               	movlw	9
  2919  00050E  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2920  000510  0EC4               	movlw	196
  2921  000512  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;AD7147.c: 146: StageBuffer[6]=4000;
  2925  000514  0E0F               	movlw	15
  2926  000516  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2927  000518  0EA0               	movlw	160
  2928  00051A  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;AD7147.c: 147: StageBuffer[7]=600;
  2932  00051C  0E02               	movlw	2
  2933  00051E  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2934  000520  0E58               	movlw	88
  2935  000522  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;AD7147.c: 148: write_AD7147(0x0C8, 8, StageBuffer, 0, cdc);
  2939  000524  0E00               	movlw	0
  2940  000526  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2941  000528  0EC8               	movlw	200
  2942  00052A  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2943  00052C  0E00               	movlw	0
  2944  00052E  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2945  000530  0E08               	movlw	8
  2946  000532  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2947  000534  0ED8               	movlw	low setup_AD7147@StageBuffer
  2948  000536  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2949  000538  0E00               	movlw	high setup_AD7147@StageBuffer
  2950  00053A  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2951  00053C  0E00               	movlw	0
  2952  00053E  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2953  000540  0E00               	movlw	0
  2954  000542  6FC8               	movwf	write_AD7147@index& (0+255),b
  2955  000544  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2956  000548  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2957  00054C  ECE5  F005         	call	_write_AD7147	;wreg free
  2958                           
  2959                           ;AD7147.c: 153: StageBuffer[0]=0x3FFF;
  2960  000550  0E3F               	movlw	63
  2961  000552  0100               	movlb	0	; () banked
  2962  000554  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2963  000556  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;AD7147.c: 154: StageBuffer[1]=0xDFFF;
  2967  000558  0EDF               	movlw	223
  2968  00055A  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2969  00055C  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;AD7147.c: 155: StageBuffer[2]=0x0100;
  2973  00055E  0E01               	movlw	1
  2974  000560  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2975  000562  0E00               	movlw	0
  2976  000564  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;AD7147.c: 156: StageBuffer[3]=0x2121;
  2980  000566  0E21               	movlw	33
  2981  000568  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2982  00056A  0E21               	movlw	33
  2983  00056C  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;AD7147.c: 157: StageBuffer[4]=500;
  2987  00056E  0E01               	movlw	1
  2988  000570  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2989  000572  0EF4               	movlw	244
  2990  000574  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;AD7147.c: 158: StageBuffer[5]=500;
  2994  000576  0E01               	movlw	1
  2995  000578  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2996  00057A  0EF4               	movlw	244
  2997  00057C  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;AD7147.c: 159: StageBuffer[6]=600;
  3001  00057E  0E02               	movlw	2
  3002  000580  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3003  000582  0E58               	movlw	88
  3004  000584  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;AD7147.c: 160: StageBuffer[7]=600;
  3008  000586  0E02               	movlw	2
  3009  000588  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3010  00058A  0E58               	movlw	88
  3011  00058C  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;AD7147.c: 161: write_AD7147(0x0D0, 8, StageBuffer, 0, cdc);
  3015  00058E  0E00               	movlw	0
  3016  000590  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3017  000592  0ED0               	movlw	208
  3018  000594  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3019  000596  0E00               	movlw	0
  3020  000598  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3021  00059A  0E08               	movlw	8
  3022  00059C  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3023  00059E  0ED8               	movlw	low setup_AD7147@StageBuffer
  3024  0005A0  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3025  0005A2  0E00               	movlw	high setup_AD7147@StageBuffer
  3026  0005A4  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3027  0005A6  0E00               	movlw	0
  3028  0005A8  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3029  0005AA  0E00               	movlw	0
  3030  0005AC  6FC8               	movwf	write_AD7147@index& (0+255),b
  3031  0005AE  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3032  0005B2  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3033  0005B6  ECE5  F005         	call	_write_AD7147	;wreg free
  3034                           
  3035                           ;AD7147.c: 166: StageBuffer[0]=0x3FFF;
  3036  0005BA  0E3F               	movlw	63
  3037  0005BC  0100               	movlb	0	; () banked
  3038  0005BE  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  3039  0005C0  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  3040                           
  3041                           ; BSR set to: 0
  3042                           ;AD7147.c: 167: StageBuffer[1]=0xDFFF;
  3043  0005C2  0EDF               	movlw	223
  3044  0005C4  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  3045  0005C6  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;AD7147.c: 168: StageBuffer[2]=0x0100;
  3049  0005C8  0E01               	movlw	1
  3050  0005CA  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3051  0005CC  0E00               	movlw	0
  3052  0005CE  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;AD7147.c: 169: StageBuffer[3]=0x2121;
  3056  0005D0  0E21               	movlw	33
  3057  0005D2  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  3058  0005D4  0E21               	movlw	33
  3059  0005D6  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;AD7147.c: 170: StageBuffer[4]=500;
  3063  0005D8  0E01               	movlw	1
  3064  0005DA  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  3065  0005DC  0EF4               	movlw	244
  3066  0005DE  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;AD7147.c: 171: StageBuffer[5]=500;
  3070  0005E0  0E01               	movlw	1
  3071  0005E2  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  3072  0005E4  0EF4               	movlw	244
  3073  0005E6  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;AD7147.c: 172: StageBuffer[6]=600;
  3077  0005E8  0E02               	movlw	2
  3078  0005EA  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3079  0005EC  0E58               	movlw	88
  3080  0005EE  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;AD7147.c: 173: StageBuffer[7]=600;
  3084  0005F0  0E02               	movlw	2
  3085  0005F2  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3086  0005F4  0E58               	movlw	88
  3087  0005F6  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;AD7147.c: 174: write_AD7147(0x0D8, 8, StageBuffer, 0, cdc);
  3091  0005F8  0E00               	movlw	0
  3092  0005FA  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3093  0005FC  0ED8               	movlw	216
  3094  0005FE  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3095  000600  0E00               	movlw	0
  3096  000602  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3097  000604  0E08               	movlw	8
  3098  000606  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3099  000608  0ED8               	movlw	low setup_AD7147@StageBuffer
  3100  00060A  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3101  00060C  0E00               	movlw	high setup_AD7147@StageBuffer
  3102  00060E  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3103  000610  0E00               	movlw	0
  3104  000612  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3105  000614  0E00               	movlw	0
  3106  000616  6FC8               	movwf	write_AD7147@index& (0+255),b
  3107  000618  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3108  00061C  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3109  000620  ECE5  F005         	call	_write_AD7147	;wreg free
  3110                           
  3111                           ;AD7147.c: 189: StageBuffer[0] = 0x0052;
  3112  000624  0E00               	movlw	0
  3113  000626  0100               	movlb	0	; () banked
  3114  000628  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  3115  00062A  0E52               	movlw	82
  3116  00062C  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;AD7147.c: 190: write_AD7147(0x000, 1, StageBuffer, 0, cdc);
  3120  00062E  0E00               	movlw	0
  3121  000630  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3122  000632  0E00               	movlw	0
  3123  000634  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3124  000636  0E00               	movlw	0
  3125  000638  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3126  00063A  0E01               	movlw	1
  3127  00063C  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3128  00063E  0ED8               	movlw	low setup_AD7147@StageBuffer
  3129  000640  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3130  000642  0E00               	movlw	high setup_AD7147@StageBuffer
  3131  000644  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3132  000646  0E00               	movlw	0
  3133  000648  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3134  00064A  0E00               	movlw	0
  3135  00064C  6FC8               	movwf	write_AD7147@index& (0+255),b
  3136  00064E  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3137  000652  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3138  000656  ECE5  F005         	call	_write_AD7147	;wreg free
  3139                           
  3140                           ;AD7147.c: 193: read_AD7147(DataBuffer, 0x008, 3, cdc);
  3141  00065A  C0D4  F0C2         	movff	setup_AD7147@DataBuffer,read_AD7147@DataBuffer
  3142  00065E  C0D5  F0C3         	movff	setup_AD7147@DataBuffer+1,read_AD7147@DataBuffer+1
  3143  000662  0E00               	movlw	0
  3144  000664  0100               	movlb	0	; () banked
  3145  000666  6FC5               	movwf	(read_AD7147@RegisterStartAddress+1)& (0+255),b
  3146  000668  0E08               	movlw	8
  3147  00066A  6FC4               	movwf	read_AD7147@RegisterStartAddress& (0+255),b
  3148  00066C  0E00               	movlw	0
  3149  00066E  6FC7               	movwf	(read_AD7147@NumberOfRegisters+1)& (0+255),b
  3150  000670  0E03               	movlw	3
  3151  000672  6FC6               	movwf	read_AD7147@NumberOfRegisters& (0+255),b
  3152  000674  C0D6  F0C8         	movff	setup_AD7147@cdc,read_AD7147@cdc
  3153  000678  C0D7  F0C9         	movff	setup_AD7147@cdc+1,read_AD7147@cdc+1
  3154  00067C  EC3C  F007         	call	_read_AD7147	;wreg free
  3155                           
  3156                           ;AD7147.c: 201: StageBuffer[2] = 0x3230;
  3157  000680  0E32               	movlw	50
  3158  000682  0100               	movlb	0	; () banked
  3159  000684  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3160  000686  0E30               	movlw	48
  3161  000688  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;AD7147.c: 206: StageBuffer[3] = 0x0819;
  3165  00068A  0E08               	movlw	8
  3166  00068C  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  3167  00068E  0E19               	movlw	25
  3168  000690  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;AD7147.c: 210: StageBuffer[4] = 0x0832;
  3172  000692  0E08               	movlw	8
  3173  000694  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  3174  000696  0E32               	movlw	50
  3175  000698  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;AD7147.c: 226: StageBuffer[5] = 0x0000;
  3179  00069A  0E00               	movlw	0
  3180  00069C  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  3181  00069E  0E00               	movlw	0
  3182  0006A0  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;AD7147.c: 241: StageBuffer[6] = 0x0000;
  3186  0006A2  0E00               	movlw	0
  3187  0006A4  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3188  0006A6  0E00               	movlw	0
  3189  0006A8  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;AD7147.c: 257: StageBuffer[7] = 0x0020;
  3193  0006AA  0E00               	movlw	0
  3194  0006AC  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3195  0006AE  0E20               	movlw	32
  3196  0006B0  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;AD7147.c: 258: write_AD7147(0x002, 6, StageBuffer, 2, cdc);
  3200  0006B2  0E00               	movlw	0
  3201  0006B4  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3202  0006B6  0E02               	movlw	2
  3203  0006B8  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3204  0006BA  0E00               	movlw	0
  3205  0006BC  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3206  0006BE  0E06               	movlw	6
  3207  0006C0  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3208  0006C2  0ED8               	movlw	low setup_AD7147@StageBuffer
  3209  0006C4  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3210  0006C6  0E00               	movlw	high setup_AD7147@StageBuffer
  3211  0006C8  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3212  0006CA  0E00               	movlw	0
  3213  0006CC  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3214  0006CE  0E02               	movlw	2
  3215  0006D0  6FC8               	movwf	write_AD7147@index& (0+255),b
  3216  0006D2  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3217  0006D6  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3218  0006DA  ECE5  F005         	call	_write_AD7147	;wreg free
  3219                           
  3220                           ;AD7147.c: 276: StageBuffer[1] = 0x003F;
  3221  0006DE  0E00               	movlw	0
  3222  0006E0  0100               	movlb	0	; () banked
  3223  0006E2  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  3224  0006E4  0E3F               	movlw	63
  3225  0006E6  6FDA               	movwf	(setup_AD7147@StageBuffer+2)& (0+255),b
  3226                           
  3227                           ; BSR set to: 0
  3228                           ;AD7147.c: 277: write_AD7147(0x001, 1, StageBuffer, 1, cdc);
  3229  0006E8  0E00               	movlw	0
  3230  0006EA  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3231  0006EC  0E01               	movlw	1
  3232  0006EE  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3233  0006F0  0E00               	movlw	0
  3234  0006F2  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3235  0006F4  0E01               	movlw	1
  3236  0006F6  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3237  0006F8  0ED8               	movlw	low setup_AD7147@StageBuffer
  3238  0006FA  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3239  0006FC  0E00               	movlw	high setup_AD7147@StageBuffer
  3240  0006FE  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3241  000700  0E00               	movlw	0
  3242  000702  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3243  000704  0E01               	movlw	1
  3244  000706  6FC8               	movwf	write_AD7147@index& (0+255),b
  3245  000708  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3246  00070C  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3247  000710  ECE5  F005         	call	_write_AD7147	;wreg free
  3248                           
  3249                           ;AD7147.c: 286: StageBuffer[2] = 0x4000;
  3250  000714  0E40               	movlw	64
  3251  000716  0100               	movlb	0	; () banked
  3252  000718  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3253  00071A  0E00               	movlw	0
  3254  00071C  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;AD7147.c: 287: write_AD7147(0x002, 1, StageBuffer, 2, cdc);
  3258  00071E  0E00               	movlw	0
  3259  000720  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3260  000722  0E02               	movlw	2
  3261  000724  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3262  000726  0E00               	movlw	0
  3263  000728  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3264  00072A  0E01               	movlw	1
  3265  00072C  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3266  00072E  0ED8               	movlw	low setup_AD7147@StageBuffer
  3267  000730  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3268  000732  0E00               	movlw	high setup_AD7147@StageBuffer
  3269  000734  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3270  000736  0E00               	movlw	0
  3271  000738  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3272  00073A  0E02               	movlw	2
  3273  00073C  6FC8               	movwf	write_AD7147@index& (0+255),b
  3274  00073E  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3275  000742  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3276  000746  ECE5  F005         	call	_write_AD7147	;wreg free
  3277                           
  3278                           ;AD7147.c: 290: read_AD7147(DataBuffer, 0x008, 3, cdc);
  3279  00074A  C0D4  F0C2         	movff	setup_AD7147@DataBuffer,read_AD7147@DataBuffer
  3280  00074E  C0D5  F0C3         	movff	setup_AD7147@DataBuffer+1,read_AD7147@DataBuffer+1
  3281  000752  0E00               	movlw	0
  3282  000754  0100               	movlb	0	; () banked
  3283  000756  6FC5               	movwf	(read_AD7147@RegisterStartAddress+1)& (0+255),b
  3284  000758  0E08               	movlw	8
  3285  00075A  6FC4               	movwf	read_AD7147@RegisterStartAddress& (0+255),b
  3286  00075C  0E00               	movlw	0
  3287  00075E  6FC7               	movwf	(read_AD7147@NumberOfRegisters+1)& (0+255),b
  3288  000760  0E03               	movlw	3
  3289  000762  6FC6               	movwf	read_AD7147@NumberOfRegisters& (0+255),b
  3290  000764  C0D6  F0C8         	movff	setup_AD7147@cdc,read_AD7147@cdc
  3291  000768  C0D7  F0C9         	movff	setup_AD7147@cdc+1,read_AD7147@cdc+1
  3292  00076C  EC3C  F007         	call	_read_AD7147	;wreg free
  3293  000770  0012               	return		;funcret
  3294  000772                     __end_of_setup_AD7147:
  3295                           	opt stack 0
  3296                           tblptru	equ	0xFF8
  3297                           tblptrh	equ	0xFF7
  3298                           tblptrl	equ	0xFF6
  3299                           tablat	equ	0xFF5
  3300                           postinc0	equ	0xFEE
  3301                           wreg	equ	0xFE8
  3302                           plusw1	equ	0xFE3
  3303                           postinc2	equ	0xFDE
  3304                           postdec2	equ	0xFDD
  3305                           plusw2	equ	0xFDB
  3306                           fsr2h	equ	0xFDA
  3307                           fsr2l	equ	0xFD9
  3308                           status	equ	0xFD8
  3309                           
  3310 ;; *************** function _write_AD7147 *****************
  3311 ;; Defined at:
  3312 ;;		line 294 in file "AD7147.c"
  3313 ;; Parameters:    Size  Location     Type
  3314 ;;  RegisterStar    2   22[BANK0 ] unsigned int 
  3315 ;;  NumberOfRegi    2   24[BANK0 ] unsigned int 
  3316 ;;  OutputBuffer    2   26[BANK0 ] PTR unsigned int 
  3317 ;;		 -> setup_AD7147@StageBuffer(16), 
  3318 ;;  index           2   28[BANK0 ] unsigned int 
  3319 ;;  cdc             2   30[BANK0 ] unsigned int 
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;  i               2   38[BANK0 ] unsigned int 
  3322 ;;  Data_Value      2   36[BANK0 ] unsigned int 
  3323 ;;  Register_Val    2   34[BANK0 ] unsigned int 
  3324 ;; Return value:  Size  Location     Type
  3325 ;;                  1    wreg      void 
  3326 ;; Registers used:
  3327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3333 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3334 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3335 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3336 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3337 ;;Total ram usage:       18 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; Hardware stack levels required when called:    4
  3340 ;; This function calls:
  3341 ;;		_get_CDC
  3342 ;;		_w32_spi
  3343 ;; This function is called by:
  3344 ;;		_setup_AD7147
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           	psect	text12
  3349  000BCA                     __ptext12:
  3350                           	opt stack 0
  3351  000BCA                     _write_AD7147:
  3352                           	opt stack 25
  3353                           
  3354                           ;AD7147.c: 296: get_CDC(cdc,0);
  3355                           
  3356                           ;incstack = 0
  3357  000BCA  C0CA  F0AC         	movff	write_AD7147@cdc,get_CDC@cdc
  3358  000BCE  C0CB  F0AD         	movff	write_AD7147@cdc+1,get_CDC@cdc+1
  3359  000BD2  0E00               	movlw	0
  3360  000BD4  0100               	movlb	0	; () banked
  3361  000BD6  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3362  000BD8  0E00               	movlw	0
  3363  000BDA  6FAE               	movwf	get_CDC@state& (0+255),b
  3364  000BDC  EC82  F009         	call	_get_CDC	;wreg free
  3365                           
  3366                           ;AD7147.c: 297: unsigned int Register_Value = 0xE000 + RegisterStartAddress;
  3367  000BE0  0E00               	movlw	0
  3368  000BE2  0100               	movlb	0	; () banked
  3369  000BE4  25C2               	addwf	write_AD7147@RegisterStartAddress& (0+255),w,b
  3370  000BE6  6FCE               	movwf	write_AD7147@Register_Value& (0+255),b
  3371  000BE8  0EE0               	movlw	224
  3372  000BEA  21C3               	addwfc	(write_AD7147@RegisterStartAddress+1)& (0+255),w,b
  3373  000BEC  6FCF               	movwf	(write_AD7147@Register_Value+1)& (0+255),b
  3374                           
  3375                           ; BSR set to: 0
  3376                           ;AD7147.c: 298: unsigned int Data_Value = 0;
  3377  000BEE  0E00               	movlw	0
  3378  000BF0  6FD1               	movwf	(write_AD7147@Data_Value+1)& (0+255),b
  3379  000BF2  0E00               	movlw	0
  3380  000BF4  6FD0               	movwf	write_AD7147@Data_Value& (0+255),b
  3381                           
  3382                           ; BSR set to: 0
  3383                           ;AD7147.c: 299: for (unsigned int i=0; i<NumberOfRegisters; i++)
  3384  000BF6  0E00               	movlw	0
  3385  000BF8  6FD3               	movwf	(write_AD7147@i+1)& (0+255),b
  3386  000BFA  0E00               	movlw	0
  3387  000BFC  6FD2               	movwf	write_AD7147@i& (0+255),b
  3388  000BFE  D022               	goto	l26
  3389  000C00                     
  3390                           ; BSR set to: 0
  3391                           ;AD7147.c: 300: {
  3392                           ;AD7147.c: 301: Data_Value = OutputBuffer[index+i];
  3393                           
  3394                           ; BSR set to: 0
  3395  000C00  51D2               	movf	write_AD7147@i& (0+255),w,b
  3396  000C02  25C8               	addwf	write_AD7147@index& (0+255),w,b
  3397  000C04  6FCC               	movwf	??_write_AD7147& (0+255),b
  3398  000C06  51D3               	movf	(write_AD7147@i+1)& (0+255),w,b
  3399  000C08  21C9               	addwfc	(write_AD7147@index+1)& (0+255),w,b
  3400  000C0A  6FCD               	movwf	(??_write_AD7147+1)& (0+255),b
  3401  000C0C  90D8               	bcf	status,0,c
  3402  000C0E  37CC               	rlcf	??_write_AD7147& (0+255),f,b
  3403  000C10  37CD               	rlcf	(??_write_AD7147+1)& (0+255),f,b
  3404  000C12  51CC               	movf	??_write_AD7147& (0+255),w,b
  3405  000C14  25C6               	addwf	write_AD7147@OutputBuffer& (0+255),w,b
  3406  000C16  6ED9               	movwf	fsr2l,c
  3407  000C18  51CD               	movf	(??_write_AD7147+1)& (0+255),w,b
  3408  000C1A  21C7               	addwfc	(write_AD7147@OutputBuffer+1)& (0+255),w,b
  3409  000C1C  6EDA               	movwf	fsr2h,c
  3410  000C1E  CFDE F0D0          	movff	postinc2,write_AD7147@Data_Value
  3411  000C22  CFDD F0D1          	movff	postdec2,write_AD7147@Data_Value+1
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;AD7147.c: 302: w32_spi(Register_Value+i,Data_Value);
  3415  000C26  51D2               	movf	write_AD7147@i& (0+255),w,b
  3416  000C28  25CE               	addwf	write_AD7147@Register_Value& (0+255),w,b
  3417  000C2A  6FAC               	movwf	w32_spi@address& (0+255),b
  3418  000C2C  51D3               	movf	(write_AD7147@i+1)& (0+255),w,b
  3419  000C2E  21CF               	addwfc	(write_AD7147@Register_Value+1)& (0+255),w,b
  3420  000C30  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  3421  000C32  C0D0  F0AE         	movff	write_AD7147@Data_Value,w32_spi@data
  3422  000C36  C0D1  F0AF         	movff	write_AD7147@Data_Value+1,w32_spi@data+1
  3423  000C3A  EC37  F008         	call	_w32_spi	;wreg free
  3424  000C3E  0100               	movlb	0	; () banked
  3425  000C40  4BD2               	infsnz	write_AD7147@i& (0+255),f,b
  3426  000C42  2BD3               	incf	(write_AD7147@i+1)& (0+255),f,b
  3427  000C44                     l26:
  3428                           
  3429                           ; BSR set to: 0
  3430                           
  3431                           ; BSR set to: 0
  3432  000C44  51C4               	movf	write_AD7147@NumberOfRegisters& (0+255),w,b
  3433  000C46  5DD2               	subwf	write_AD7147@i& (0+255),w,b
  3434  000C48  51C5               	movf	(write_AD7147@NumberOfRegisters+1)& (0+255),w,b
  3435  000C4A  59D3               	subwfb	(write_AD7147@i+1)& (0+255),w,b
  3436  000C4C  A0D8               	btfss	status,0,c
  3437  000C4E  D7D8               	goto	l27
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;AD7147.c: 303: }
  3441                           ;AD7147.c: 304: get_CDC(cdc,1);
  3442                           
  3443                           ; BSR set to: 0
  3444  000C50  C0CA  F0AC         	movff	write_AD7147@cdc,get_CDC@cdc
  3445  000C54  C0CB  F0AD         	movff	write_AD7147@cdc+1,get_CDC@cdc+1
  3446  000C58  0E00               	movlw	0
  3447  000C5A  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3448  000C5C  0E01               	movlw	1
  3449  000C5E  6FAE               	movwf	get_CDC@state& (0+255),b
  3450  000C60  EC82  F009         	call	_get_CDC	;wreg free
  3451  000C64  0012               	return		;funcret
  3452  000C66                     __end_of_write_AD7147:
  3453                           	opt stack 0
  3454                           tblptru	equ	0xFF8
  3455                           tblptrh	equ	0xFF7
  3456                           tblptrl	equ	0xFF6
  3457                           tablat	equ	0xFF5
  3458                           postinc0	equ	0xFEE
  3459                           wreg	equ	0xFE8
  3460                           plusw1	equ	0xFE3
  3461                           postinc2	equ	0xFDE
  3462                           postdec2	equ	0xFDD
  3463                           plusw2	equ	0xFDB
  3464                           fsr2h	equ	0xFDA
  3465                           fsr2l	equ	0xFD9
  3466                           status	equ	0xFD8
  3467                           
  3468 ;; *************** function _read_AD7147 *****************
  3469 ;; Defined at:
  3470 ;;		line 307 in file "AD7147.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;  DataBuffer      2   22[BANK0 ] PTR unsigned int 
  3473 ;;		 -> interrupt_values_cdc2(6), interrupt_values_cdc1(6), 
  3474 ;;  RegisterStar    2   24[BANK0 ] unsigned int 
  3475 ;;  NumberOfRegi    2   26[BANK0 ] unsigned int 
  3476 ;;  cdc             2   28[BANK0 ] unsigned int 
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;  i               2   32[BANK0 ] unsigned int 
  3479 ;;  Register_Val    2   30[BANK0 ] unsigned int 
  3480 ;; Return value:  Size  Location     Type
  3481 ;;                  1    wreg      void 
  3482 ;; Registers used:
  3483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 0/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3489 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3490 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3492 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3493 ;;Total ram usage:       12 bytes
  3494 ;; Hardware stack levels used:    1
  3495 ;; Hardware stack levels required when called:    4
  3496 ;; This function calls:
  3497 ;;		_get_CDC
  3498 ;;		_w16_r16_spi
  3499 ;; This function is called by:
  3500 ;;		_setup_AD7147
  3501 ;;		_main
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           	psect	text13
  3506  000E78                     __ptext13:
  3507                           	opt stack 0
  3508  000E78                     _read_AD7147:
  3509                           	opt stack 25
  3510                           
  3511                           ;AD7147.c: 309: get_CDC(cdc,0);
  3512                           
  3513                           ;incstack = 0
  3514  000E78  C0C8  F0AC         	movff	read_AD7147@cdc,get_CDC@cdc
  3515  000E7C  C0C9  F0AD         	movff	read_AD7147@cdc+1,get_CDC@cdc+1
  3516  000E80  0E00               	movlw	0
  3517  000E82  0100               	movlb	0	; () banked
  3518  000E84  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3519  000E86  0E00               	movlw	0
  3520  000E88  6FAE               	movwf	get_CDC@state& (0+255),b
  3521  000E8A  EC82  F009         	call	_get_CDC	;wreg free
  3522                           
  3523                           ;AD7147.c: 310: unsigned int Register_Values = 0xE400 + RegisterStartAddress;
  3524  000E8E  0E00               	movlw	0
  3525  000E90  0100               	movlb	0	; () banked
  3526  000E92  25C4               	addwf	read_AD7147@RegisterStartAddress& (0+255),w,b
  3527  000E94  6FCA               	movwf	read_AD7147@Register_Values& (0+255),b
  3528  000E96  0EE4               	movlw	228
  3529  000E98  21C5               	addwfc	(read_AD7147@RegisterStartAddress+1)& (0+255),w,b
  3530  000E9A  6FCB               	movwf	(read_AD7147@Register_Values+1)& (0+255),b
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;AD7147.c: 311: for (unsigned int i=0; i<NumberOfRegisters; i++)
  3534  000E9C  0E00               	movlw	0
  3535  000E9E  6FCD               	movwf	(read_AD7147@i+1)& (0+255),b
  3536  000EA0  0E00               	movlw	0
  3537  000EA2  6FCC               	movwf	read_AD7147@i& (0+255),b
  3538  000EA4  D018               	goto	l32
  3539  000EA6                     
  3540                           ; BSR set to: 0
  3541                           ;AD7147.c: 312: {
  3542                           ;AD7147.c: 313: DataBuffer[i]=w16_r16_spi(Register_Values+i);
  3543                           
  3544                           ; BSR set to: 0
  3545  000EA6  51CC               	movf	read_AD7147@i& (0+255),w,b
  3546  000EA8  25CA               	addwf	read_AD7147@Register_Values& (0+255),w,b
  3547  000EAA  6FAC               	movwf	w16_r16_spi@address& (0+255),b
  3548  000EAC  51CD               	movf	(read_AD7147@i+1)& (0+255),w,b
  3549  000EAE  21CB               	addwfc	(read_AD7147@Register_Values+1)& (0+255),w,b
  3550  000EB0  6FAD               	movwf	(w16_r16_spi@address+1)& (0+255),b
  3551  000EB2  EC33  F006         	call	_w16_r16_spi	;wreg free
  3552  000EB6  90D8               	bcf	status,0,c
  3553  000EB8  0100               	movlb	0	; () banked
  3554  000EBA  35CC               	rlcf	read_AD7147@i& (0+255),w,b
  3555  000EBC  6ED9               	movwf	fsr2l,c
  3556  000EBE  35CD               	rlcf	(read_AD7147@i+1)& (0+255),w,b
  3557  000EC0  6EDA               	movwf	fsr2h,c
  3558  000EC2  51C2               	movf	read_AD7147@DataBuffer& (0+255),w,b
  3559  000EC4  26D9               	addwf	fsr2l,f,c
  3560  000EC6  51C3               	movf	(read_AD7147@DataBuffer+1)& (0+255),w,b
  3561  000EC8  22DA               	addwfc	fsr2h,f,c
  3562  000ECA  C0AC  FFDE         	movff	?_w16_r16_spi,postinc2
  3563  000ECE  C0AD  FFDD         	movff	?_w16_r16_spi+1,postdec2
  3564                           
  3565                           ; BSR set to: 0
  3566  000ED2  4BCC               	infsnz	read_AD7147@i& (0+255),f,b
  3567  000ED4  2BCD               	incf	(read_AD7147@i+1)& (0+255),f,b
  3568  000ED6                     l32:
  3569                           
  3570                           ; BSR set to: 0
  3571                           
  3572                           ; BSR set to: 0
  3573  000ED6  51C6               	movf	read_AD7147@NumberOfRegisters& (0+255),w,b
  3574  000ED8  5DCC               	subwf	read_AD7147@i& (0+255),w,b
  3575  000EDA  51C7               	movf	(read_AD7147@NumberOfRegisters+1)& (0+255),w,b
  3576  000EDC  59CD               	subwfb	(read_AD7147@i+1)& (0+255),w,b
  3577  000EDE  A0D8               	btfss	status,0,c
  3578  000EE0  D7E2               	goto	l33
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;AD7147.c: 314: }
  3582                           ;AD7147.c: 315: get_CDC(cdc,1);
  3583                           
  3584                           ; BSR set to: 0
  3585  000EE2  C0C8  F0AC         	movff	read_AD7147@cdc,get_CDC@cdc
  3586  000EE6  C0C9  F0AD         	movff	read_AD7147@cdc+1,get_CDC@cdc+1
  3587  000EEA  0E00               	movlw	0
  3588  000EEC  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3589  000EEE  0E01               	movlw	1
  3590  000EF0  6FAE               	movwf	get_CDC@state& (0+255),b
  3591  000EF2  EC82  F009         	call	_get_CDC	;wreg free
  3592  000EF6  0012               	return		;funcret
  3593  000EF8                     __end_of_read_AD7147:
  3594                           	opt stack 0
  3595                           tblptru	equ	0xFF8
  3596                           tblptrh	equ	0xFF7
  3597                           tblptrl	equ	0xFF6
  3598                           tablat	equ	0xFF5
  3599                           postinc0	equ	0xFEE
  3600                           wreg	equ	0xFE8
  3601                           plusw1	equ	0xFE3
  3602                           postinc2	equ	0xFDE
  3603                           postdec2	equ	0xFDD
  3604                           plusw2	equ	0xFDB
  3605                           fsr2h	equ	0xFDA
  3606                           fsr2l	equ	0xFD9
  3607                           status	equ	0xFD8
  3608                           
  3609 ;; *************** function _read_sensor *****************
  3610 ;; Defined at:
  3611 ;;		line 318 in file "AD7147.c"
  3612 ;; Parameters:    Size  Location     Type
  3613 ;;  sensor_value    2   22[BANK0 ] PTR unsigned int 
  3614 ;;		 -> sensor_values(48), 
  3615 ;;  sensor          2   24[BANK0 ] unsigned int 
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;  cdc_sensor      2   32[BANK0 ] unsigned int 
  3618 ;;  register1       2   30[BANK0 ] unsigned int 
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  1    wreg      void 
  3621 ;; Registers used:
  3622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3628 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3629 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3630 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3631 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3632 ;;Total ram usage:       12 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    5
  3635 ;; This function calls:
  3636 ;;		_sensor_CDC
  3637 ;;		_w16_r16_spi
  3638 ;; This function is called by:
  3639 ;;		_main
  3640 ;; This function uses a non-reentrant model
  3641 ;;
  3642                           
  3643                           	psect	text14
  3644  000B28                     __ptext14:
  3645                           	opt stack 0
  3646  000B28                     _read_sensor:
  3647                           	opt stack 25
  3648                           
  3649                           ;AD7147.c: 320: unsigned int cdc_sensor = 0;
  3650                           
  3651                           ;incstack = 0
  3652  000B28  0E00               	movlw	0
  3653  000B2A  0100               	movlb	0	; () banked
  3654  000B2C  6FCD               	movwf	(read_sensor@cdc_sensor+1)& (0+255),b
  3655  000B2E  0E00               	movlw	0
  3656  000B30  6FCC               	movwf	read_sensor@cdc_sensor& (0+255),b
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;AD7147.c: 321: if (sensor > 12)
  3660  000B32  51C5               	movf	(read_sensor@sensor+1)& (0+255),w,b
  3661  000B34  E104               	bnz	u1010
  3662  000B36  0E0D               	movlw	13
  3663  000B38  5DC4               	subwf	read_sensor@sensor& (0+255),w,b
  3664  000B3A  A0D8               	btfss	status,0,c
  3665  000B3C  D007               	goto	l38
  3666  000B3E                     u1010:
  3667                           
  3668                           ; BSR set to: 0
  3669                           ;AD7147.c: 322: {
  3670                           ;AD7147.c: 323: cdc_sensor = sensor - 12;
  3671  000B3E  0EF4               	movlw	244
  3672  000B40  25C4               	addwf	read_sensor@sensor& (0+255),w,b
  3673  000B42  6FCC               	movwf	read_sensor@cdc_sensor& (0+255),b
  3674  000B44  0EFF               	movlw	255
  3675  000B46  21C5               	addwfc	(read_sensor@sensor+1)& (0+255),w,b
  3676  000B48  6FCD               	movwf	(read_sensor@cdc_sensor+1)& (0+255),b
  3677                           
  3678                           ;AD7147.c: 324: }
  3679  000B4A  D004               	goto	l39
  3680  000B4C                     l38:
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;AD7147.c: 325: else
  3684                           ;AD7147.c: 326: {
  3685                           ;AD7147.c: 327: cdc_sensor = sensor;
  3686  000B4C  C0C4  F0CC         	movff	read_sensor@sensor,read_sensor@cdc_sensor
  3687  000B50  C0C5  F0CD         	movff	read_sensor@sensor+1,read_sensor@cdc_sensor+1
  3688  000B54                     l39:
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;AD7147.c: 328: }
  3692                           ;AD7147.c: 329: unsigned int register1 = 0xE400 + 0x00A + cdc_sensor;
  3693                           
  3694                           ; BSR set to: 0
  3695  000B54  0E0A               	movlw	10
  3696  000B56  25CC               	addwf	read_sensor@cdc_sensor& (0+255),w,b
  3697  000B58  6FCA               	movwf	read_sensor@register1& (0+255),b
  3698  000B5A  0EE4               	movlw	228
  3699  000B5C  21CD               	addwfc	(read_sensor@cdc_sensor+1)& (0+255),w,b
  3700  000B5E  6FCB               	movwf	(read_sensor@register1+1)& (0+255),b
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;AD7147.c: 330: sensor_CDC(sensor, 0);
  3704  000B60  C0C4  F0B0         	movff	read_sensor@sensor,sensor_CDC@sensor
  3705  000B64  C0C5  F0B1         	movff	read_sensor@sensor+1,sensor_CDC@sensor+1
  3706  000B68  0E00               	movlw	0
  3707  000B6A  6FB3               	movwf	(sensor_CDC@state+1)& (0+255),b
  3708  000B6C  0E00               	movlw	0
  3709  000B6E  6FB2               	movwf	sensor_CDC@state& (0+255),b
  3710  000B70  EC34  F009         	call	_sensor_CDC	;wreg free
  3711                           
  3712                           ;AD7147.c: 331: sensor_values[sensor-1] = w16_r16_spi(register1);
  3713  000B74  C0CA  F0AC         	movff	read_sensor@register1,w16_r16_spi@address
  3714  000B78  C0CB  F0AD         	movff	read_sensor@register1+1,w16_r16_spi@address+1
  3715  000B7C  EC33  F006         	call	_w16_r16_spi	;wreg free
  3716  000B80  0EFE               	movlw	254
  3717  000B82  0100               	movlb	0	; () banked
  3718  000B84  6FC6               	movwf	??_read_sensor& (0+255),b
  3719  000B86  0EFF               	movlw	255
  3720  000B88  6FC7               	movwf	(??_read_sensor+1)& (0+255),b
  3721  000B8A  C0C4  F0C8         	movff	read_sensor@sensor,??_read_sensor+2
  3722  000B8E  C0C5  F0C9         	movff	read_sensor@sensor+1,??_read_sensor+3
  3723  000B92  90D8               	bcf	status,0,c
  3724  000B94  37C8               	rlcf	(??_read_sensor+2)& (0+255),f,b
  3725  000B96  37C9               	rlcf	(??_read_sensor+3)& (0+255),f,b
  3726  000B98  51C6               	movf	??_read_sensor& (0+255),w,b
  3727  000B9A  27C8               	addwf	(??_read_sensor+2)& (0+255),f,b
  3728  000B9C  51C7               	movf	(??_read_sensor+1)& (0+255),w,b
  3729  000B9E  23C9               	addwfc	(??_read_sensor+3)& (0+255),f,b
  3730  000BA0  51C8               	movf	(??_read_sensor+2)& (0+255),w,b
  3731  000BA2  25C2               	addwf	read_sensor@sensor_values& (0+255),w,b
  3732  000BA4  6ED9               	movwf	fsr2l,c
  3733  000BA6  51C9               	movf	(??_read_sensor+3)& (0+255),w,b
  3734  000BA8  21C3               	addwfc	(read_sensor@sensor_values+1)& (0+255),w,b
  3735  000BAA  6EDA               	movwf	fsr2h,c
  3736  000BAC  C0AC  FFDE         	movff	?_w16_r16_spi,postinc2
  3737  000BB0  C0AD  FFDD         	movff	?_w16_r16_spi+1,postdec2
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;AD7147.c: 332: sensor_CDC(sensor, 1);
  3741  000BB4  C0C4  F0B0         	movff	read_sensor@sensor,sensor_CDC@sensor
  3742  000BB8  C0C5  F0B1         	movff	read_sensor@sensor+1,sensor_CDC@sensor+1
  3743  000BBC  0E00               	movlw	0
  3744  000BBE  6FB3               	movwf	(sensor_CDC@state+1)& (0+255),b
  3745  000BC0  0E01               	movlw	1
  3746  000BC2  6FB2               	movwf	sensor_CDC@state& (0+255),b
  3747  000BC4  EC34  F009         	call	_sensor_CDC	;wreg free
  3748  000BC8  0012               	return		;funcret
  3749  000BCA                     __end_of_read_sensor:
  3750                           	opt stack 0
  3751                           tblptru	equ	0xFF8
  3752                           tblptrh	equ	0xFF7
  3753                           tblptrl	equ	0xFF6
  3754                           tablat	equ	0xFF5
  3755                           postinc0	equ	0xFEE
  3756                           wreg	equ	0xFE8
  3757                           plusw1	equ	0xFE3
  3758                           postinc2	equ	0xFDE
  3759                           postdec2	equ	0xFDD
  3760                           plusw2	equ	0xFDB
  3761                           fsr2h	equ	0xFDA
  3762                           fsr2l	equ	0xFD9
  3763                           status	equ	0xFD8
  3764                           
  3765 ;; *************** function _sensor_CDC *****************
  3766 ;; Defined at:
  3767 ;;		line 370 in file "AD7147.c"
  3768 ;; Parameters:    Size  Location     Type
  3769 ;;  sensor          2    4[BANK0 ] unsigned int 
  3770 ;;  state           2    6[BANK0 ] unsigned int 
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;		None
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      void 
  3775 ;; Registers used:
  3776 ;;		wreg, status,2, status,0, cstack
  3777 ;; Tracked objects:
  3778 ;;		On entry : 0/0
  3779 ;;		On exit  : 0/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3782 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3785 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3786 ;;Total ram usage:        4 bytes
  3787 ;; Hardware stack levels used:    1
  3788 ;; Hardware stack levels required when called:    4
  3789 ;; This function calls:
  3790 ;;		_get_CDC
  3791 ;; This function is called by:
  3792 ;;		_read_sensor
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           	psect	text15
  3797  001268                     __ptext15:
  3798                           	opt stack 0
  3799  001268                     _sensor_CDC:
  3800                           	opt stack 25
  3801                           
  3802                           ;AD7147.c: 374: if (sensor > 12)
  3803                           
  3804                           ;incstack = 0
  3805  001268  0100               	movlb	0	; () banked
  3806  00126A  51B1               	movf	(sensor_CDC@sensor+1)& (0+255),w,b
  3807  00126C  E104               	bnz	u880
  3808  00126E  0E0D               	movlw	13
  3809  001270  5DB0               	subwf	sensor_CDC@sensor& (0+255),w,b
  3810  001272  A0D8               	btfss	status,0,c
  3811  001274  D00B               	goto	l59
  3812  001276                     u880:
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;AD7147.c: 375: {
  3816                           ;AD7147.c: 376: get_CDC(2,state);
  3817  001276  0E00               	movlw	0
  3818  001278  6FAD               	movwf	(get_CDC@cdc+1)& (0+255),b
  3819  00127A  0E02               	movlw	2
  3820  00127C  6FAC               	movwf	get_CDC@cdc& (0+255),b
  3821  00127E  C0B2  F0AE         	movff	sensor_CDC@state,get_CDC@state
  3822  001282  C0B3  F0AF         	movff	sensor_CDC@state+1,get_CDC@state+1
  3823  001286  EC82  F009         	call	_get_CDC	;wreg free
  3824                           
  3825                           ;AD7147.c: 377: }
  3826  00128A  0012               	return	
  3827  00128C                     l59:
  3828                           
  3829                           ;AD7147.c: 378: else
  3830                           ;AD7147.c: 379: {
  3831                           ;AD7147.c: 380: get_CDC(1,state);
  3832  00128C  0E00               	movlw	0
  3833  00128E  0100               	movlb	0	; () banked
  3834  001290  6FAD               	movwf	(get_CDC@cdc+1)& (0+255),b
  3835  001292  0E01               	movlw	1
  3836  001294  6FAC               	movwf	get_CDC@cdc& (0+255),b
  3837  001296  C0B2  F0AE         	movff	sensor_CDC@state,get_CDC@state
  3838  00129A  C0B3  F0AF         	movff	sensor_CDC@state+1,get_CDC@state+1
  3839  00129E  EC82  F009         	call	_get_CDC	;wreg free
  3840  0012A2  0012               	return	
  3841  0012A4                     __end_of_sensor_CDC:
  3842                           	opt stack 0
  3843                           tblptru	equ	0xFF8
  3844                           tblptrh	equ	0xFF7
  3845                           tblptrl	equ	0xFF6
  3846                           tablat	equ	0xFF5
  3847                           postinc0	equ	0xFEE
  3848                           wreg	equ	0xFE8
  3849                           plusw1	equ	0xFE3
  3850                           postinc2	equ	0xFDE
  3851                           postdec2	equ	0xFDD
  3852                           plusw2	equ	0xFDB
  3853                           fsr2h	equ	0xFDA
  3854                           fsr2l	equ	0xFD9
  3855                           status	equ	0xFD8
  3856                           
  3857 ;; *************** function _memset *****************
  3858 ;; Defined at:
  3859 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\memset.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;  p1              2    0[BANK0 ] PTR void 
  3862 ;;		 -> avail_sensors(48), 
  3863 ;;  c               2    2[BANK0 ] int 
  3864 ;;  n               2    4[BANK0 ] unsigned int 
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;  p               2    6[BANK0 ] PTR unsigned char 
  3867 ;;		 -> avail_sensors(48), 
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  2    0[BANK0 ] PTR void 
  3870 ;; Registers used:
  3871 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3877 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3878 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3880 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3881 ;;Total ram usage:        8 bytes
  3882 ;; Hardware stack levels used:    1
  3883 ;; Hardware stack levels required when called:    3
  3884 ;; This function calls:
  3885 ;;		Nothing
  3886 ;; This function is called by:
  3887 ;;		_main
  3888 ;; This function uses a non-reentrant model
  3889 ;;
  3890                           
  3891                           	psect	text16
  3892  0012D4                     __ptext16:
  3893                           	opt stack 0
  3894  0012D4                     _memset:
  3895                           	opt stack 27
  3896                           
  3897                           ;incstack = 0
  3898  0012D4  C0AC  F0B2         	movff	memset@p1,memset@p
  3899  0012D8  C0AD  F0B3         	movff	memset@p1+1,memset@p+1
  3900  0012DC  D009               	goto	l835
  3901  0012DE                     l2345:
  3902  0012DE  C0B2  FFD9         	movff	memset@p,fsr2l
  3903  0012E2  C0B3  FFDA         	movff	memset@p+1,fsr2h
  3904  0012E6  C0AE  FFDF         	movff	memset@c,indf2
  3905  0012EA  0100               	movlb	0	; () banked
  3906  0012EC  4BB2               	infsnz	memset@p& (0+255),f,b
  3907  0012EE  2BB3               	incf	(memset@p+1)& (0+255),f,b
  3908  0012F0                     l835:
  3909                           
  3910                           ; BSR set to: 0
  3911  0012F0  0100               	movlb	0	; () banked
  3912  0012F2  07B0               	decf	memset@n& (0+255),f,b
  3913  0012F4  A0D8               	btfss	status,0,c
  3914  0012F6  07B1               	decf	(memset@n+1)& (0+255),f,b
  3915  0012F8  29B0               	incf	memset@n& (0+255),w,b
  3916  0012FA  E1F1               	bnz	l2345
  3917  0012FC  29B1               	incf	(memset@n+1)& (0+255),w,b
  3918  0012FE  B4D8               	btfsc	status,2,c
  3919  001300  0012               	return	
  3920  001302  D7ED               	goto	l836
  3921  001304                     __end_of_memset:
  3922                           	opt stack 0
  3923                           tblptru	equ	0xFF8
  3924                           tblptrh	equ	0xFF7
  3925                           tblptrl	equ	0xFF6
  3926                           tablat	equ	0xFF5
  3927                           postinc0	equ	0xFEE
  3928                           wreg	equ	0xFE8
  3929                           plusw1	equ	0xFE3
  3930                           indf2	equ	0xFDF
  3931                           postinc2	equ	0xFDE
  3932                           postdec2	equ	0xFDD
  3933                           plusw2	equ	0xFDB
  3934                           fsr2h	equ	0xFDA
  3935                           fsr2l	equ	0xFD9
  3936                           status	equ	0xFD8
  3937                           
  3938 ;; *************** function _init_interrupts *****************
  3939 ;; Defined at:
  3940 ;;		line 20 in file "micro_setup.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;		None
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;		None
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      void 
  3947 ;; Registers used:
  3948 ;;		None
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3958 ;;Total ram usage:        0 bytes
  3959 ;; Hardware stack levels used:    1
  3960 ;; Hardware stack levels required when called:    3
  3961 ;; This function calls:
  3962 ;;		Nothing
  3963 ;; This function is called by:
  3964 ;;		_main
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text17
  3969  001328                     __ptext17:
  3970                           	opt stack 0
  3971  001328                     _init_interrupts:
  3972                           	opt stack 27
  3973                           
  3974                           ;micro_setup.c: 22: ANCON1bits.ANSEL10 = 0;
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;incstack = 0
  3978  001328  010F               	movlb	15	; () banked
  3979  00132A  955C               	bcf	92,2,b	;volatile
  3980                           
  3981                           ;micro_setup.c: 23: ANCON1bits.ANSEL8 = 0;
  3982  00132C  915C               	bcf	92,0,b	;volatile
  3983                           
  3984                           ;micro_setup.c: 24: TRISBbits.TRISB0 = 1;
  3985  00132E  8093               	bsf	3987,0,c	;volatile
  3986                           
  3987                           ;micro_setup.c: 25: TRISBbits.TRISB1 = 1;
  3988  001330  8293               	bsf	3987,1,c	;volatile
  3989                           
  3990                           ;micro_setup.c: 27: RCONbits.IPEN = 1;
  3991  001332  8ED0               	bsf	4048,7,c	;volatile
  3992                           
  3993                           ;micro_setup.c: 31: INTCONbits.INT0IE = 1;
  3994  001334  88F2               	bsf	intcon,4,c	;volatile
  3995                           
  3996                           ;micro_setup.c: 32: INTCON2bits.INTEDG0 = 0;
  3997  001336  9CF1               	bcf	intcon2,6,c	;volatile
  3998                           
  3999                           ;micro_setup.c: 33: INTCONbits.INT0IF = 0;
  4000  001338  92F2               	bcf	intcon,1,c	;volatile
  4001                           
  4002                           ;micro_setup.c: 36: INTCON3bits.INT1P = 1;
  4003  00133A  8CF0               	bsf	intcon3,6,c	;volatile
  4004                           
  4005                           ;micro_setup.c: 37: INTCON3bits.INT1IE = 1;
  4006  00133C  86F0               	bsf	intcon3,3,c	;volatile
  4007                           
  4008                           ;micro_setup.c: 38: INTCON2bits.INTEDG1 = 0;
  4009  00133E  9AF1               	bcf	intcon2,5,c	;volatile
  4010                           
  4011                           ;micro_setup.c: 39: INTCON3bits.INT1IF = 0;
  4012  001340  90F0               	bcf	intcon3,0,c	;volatile
  4013                           
  4014                           ;micro_setup.c: 41: INTCONbits.PEIE = 1;
  4015  001342  8CF2               	bsf	intcon,6,c	;volatile
  4016                           
  4017                           ;micro_setup.c: 42: INTCONbits.GIE = 1;
  4018  001344  8EF2               	bsf	intcon,7,c	;volatile
  4019                           
  4020                           ;micro_setup.c: 44: (INTCONbits.GIE = 1);
  4021  001346  8EF2               	bsf	intcon,7,c	;volatile
  4022                           
  4023                           ; BSR set to: 15
  4024  001348  0012               	return		;funcret
  4025  00134A                     __end_of_init_interrupts:
  4026                           	opt stack 0
  4027                           tblptru	equ	0xFF8
  4028                           tblptrh	equ	0xFF7
  4029                           tblptrl	equ	0xFF6
  4030                           tablat	equ	0xFF5
  4031                           intcon	equ	0xFF2
  4032                           intcon2	equ	0xFF1
  4033                           intcon3	equ	0xFF0
  4034                           postinc0	equ	0xFEE
  4035                           wreg	equ	0xFE8
  4036                           plusw1	equ	0xFE3
  4037                           indf2	equ	0xFDF
  4038                           postinc2	equ	0xFDE
  4039                           postdec2	equ	0xFDD
  4040                           plusw2	equ	0xFDB
  4041                           fsr2h	equ	0xFDA
  4042                           fsr2l	equ	0xFD9
  4043                           status	equ	0xFD8
  4044                           
  4045 ;; *************** function _get_ID *****************
  4046 ;; Defined at:
  4047 ;;		line 384 in file "AD7147.c"
  4048 ;; Parameters:    Size  Location     Type
  4049 ;;  cdc             2   22[BANK0 ] unsigned int 
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  result          2   25[BANK0 ] unsigned int 
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  2   22[BANK0 ] unsigned int 
  4054 ;; Registers used:
  4055 ;;		wreg, status,2, status,0, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4061 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4062 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4063 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4064 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4065 ;;Total ram usage:        5 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:    4
  4068 ;; This function calls:
  4069 ;;		_get_CDC
  4070 ;;		_w16_r16_spi
  4071 ;; This function is called by:
  4072 ;;		_main
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           	psect	text18
  4077  0010E6                     __ptext18:
  4078                           	opt stack 0
  4079  0010E6                     _get_ID:
  4080                           	opt stack 26
  4081                           
  4082                           ;AD7147.c: 386: get_CDC(cdc,0);
  4083                           
  4084                           ; BSR set to: 15
  4085                           ;incstack = 0
  4086  0010E6  C0C2  F0AC         	movff	get_ID@cdc,get_CDC@cdc
  4087  0010EA  C0C3  F0AD         	movff	get_ID@cdc+1,get_CDC@cdc+1
  4088  0010EE  0E00               	movlw	0
  4089  0010F0  0100               	movlb	0	; () banked
  4090  0010F2  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4091  0010F4  0E00               	movlw	0
  4092  0010F6  6FAE               	movwf	get_CDC@state& (0+255),b
  4093  0010F8  EC82  F009         	call	_get_CDC	;wreg free
  4094                           
  4095                           ;AD7147.c: 387: unsigned int result = (w16_r16_spi(0xE400 + 0x017) & 0b1111111111110000)
      +                           >> 4;
  4096  0010FC  0EE4               	movlw	228
  4097  0010FE  0100               	movlb	0	; () banked
  4098  001100  6FAD               	movwf	(w16_r16_spi@address+1)& (0+255),b
  4099  001102  0E17               	movlw	23
  4100  001104  6FAC               	movwf	w16_r16_spi@address& (0+255),b
  4101  001106  EC33  F006         	call	_w16_r16_spi	;wreg free
  4102  00110A  0E04               	movlw	4
  4103  00110C  0100               	movlb	0	; () banked
  4104  00110E  6FC4               	movwf	??_get_ID& (0+255),b
  4105  001110                     u1065:
  4106  001110  90D8               	bcf	status,0,c
  4107  001112  33AD               	rrcf	(?_w16_r16_spi+1)& (0+255),f,b
  4108  001114  33AC               	rrcf	?_w16_r16_spi& (0+255),f,b
  4109  001116  2FC4               	decfsz	??_get_ID& (0+255),f,b
  4110  001118  D7FB               	goto	u1065
  4111  00111A  0EFF               	movlw	255
  4112  00111C  15AC               	andwf	?_w16_r16_spi& (0+255),w,b
  4113  00111E  6FC5               	movwf	get_ID@result& (0+255),b
  4114  001120  0E0F               	movlw	15
  4115  001122  15AD               	andwf	(?_w16_r16_spi+1)& (0+255),w,b
  4116  001124  6FC6               	movwf	(get_ID@result+1)& (0+255),b
  4117                           
  4118                           ;AD7147.c: 388: get_CDC(cdc,1);
  4119  001126  C0C2  F0AC         	movff	get_ID@cdc,get_CDC@cdc
  4120  00112A  C0C3  F0AD         	movff	get_ID@cdc+1,get_CDC@cdc+1
  4121  00112E  0E00               	movlw	0
  4122  001130  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4123  001132  0E01               	movlw	1
  4124  001134  6FAE               	movwf	get_CDC@state& (0+255),b
  4125  001136  EC82  F009         	call	_get_CDC	;wreg free
  4126                           
  4127                           ;AD7147.c: 389: return result;
  4128  00113A  C0C5  F0C2         	movff	get_ID@result,?_get_ID
  4129  00113E  C0C6  F0C3         	movff	get_ID@result+1,?_get_ID+1
  4130  001142  0012               	return	
  4131  001144                     __end_of_get_ID:
  4132                           	opt stack 0
  4133                           tblptru	equ	0xFF8
  4134                           tblptrh	equ	0xFF7
  4135                           tblptrl	equ	0xFF6
  4136                           tablat	equ	0xFF5
  4137                           intcon	equ	0xFF2
  4138                           intcon2	equ	0xFF1
  4139                           intcon3	equ	0xFF0
  4140                           postinc0	equ	0xFEE
  4141                           wreg	equ	0xFE8
  4142                           plusw1	equ	0xFE3
  4143                           indf2	equ	0xFDF
  4144                           postinc2	equ	0xFDE
  4145                           postdec2	equ	0xFDD
  4146                           plusw2	equ	0xFDB
  4147                           fsr2h	equ	0xFDA
  4148                           fsr2l	equ	0xFD9
  4149                           status	equ	0xFD8
  4150                           
  4151 ;; *************** function _w16_r16_spi *****************
  4152 ;; Defined at:
  4153 ;;		line 89 in file "spi.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;  address         2    0[BANK0 ] unsigned int 
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;  p4              2   20[BANK0 ] unsigned int 
  4158 ;;  p3              2   18[BANK0 ] unsigned int 
  4159 ;;  blank_high      2   16[BANK0 ] unsigned int 
  4160 ;;  blank_low       2   14[BANK0 ] unsigned int 
  4161 ;;  result          2   12[BANK0 ] unsigned int 
  4162 ;;  address_high    2   10[BANK0 ] unsigned int 
  4163 ;;  address_low     2    8[BANK0 ] unsigned int 
  4164 ;;  p2              2    6[BANK0 ] unsigned int 
  4165 ;;  p1              2    4[BANK0 ] unsigned int 
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  2    0[BANK0 ] unsigned int 
  4168 ;; Registers used:
  4169 ;;		wreg, status,2, status,0
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4175 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4176 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4177 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4178 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4179 ;;Total ram usage:       22 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    3
  4182 ;; This function calls:
  4183 ;;		Nothing
  4184 ;; This function is called by:
  4185 ;;		_read_AD7147
  4186 ;;		_read_sensor
  4187 ;;		_get_ID
  4188 ;;		_read_sensors
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           	psect	text19
  4193  000C66                     __ptext19:
  4194                           	opt stack 0
  4195  000C66                     _w16_r16_spi:
  4196                           	opt stack 25
  4197                           
  4198                           ;spi.c: 91: unsigned int address_low, address_high, result;
  4199                           ;spi.c: 92: unsigned int blank_low = 0x000;
  4200                           
  4201                           ;incstack = 0
  4202  000C66  0E00               	movlw	0
  4203  000C68  0100               	movlb	0	; () banked
  4204  000C6A  6FBB               	movwf	(w16_r16_spi@blank_low+1)& (0+255),b
  4205  000C6C  0E00               	movlw	0
  4206  000C6E  6FBA               	movwf	w16_r16_spi@blank_low& (0+255),b
  4207                           
  4208                           ;spi.c: 93: unsigned int blank_high = 0x000;
  4209  000C70  0E00               	movlw	0
  4210  000C72  6FBD               	movwf	(w16_r16_spi@blank_high+1)& (0+255),b
  4211  000C74  0E00               	movlw	0
  4212  000C76  6FBC               	movwf	w16_r16_spi@blank_high& (0+255),b
  4213                           
  4214                           ;spi.c: 94: unsigned int p1, p2, p3, p4;
  4215                           ;spi.c: 96: address_low = address & 0xFF;
  4216  000C78  51AC               	movf	w16_r16_spi@address& (0+255),w,b
  4217  000C7A  6FB4               	movwf	w16_r16_spi@address_low& (0+255),b
  4218  000C7C  6BB5               	clrf	(w16_r16_spi@address_low+1)& (0+255),b
  4219                           
  4220                           ;spi.c: 97: address_high = (address >> 8) & 0xFF;
  4221  000C7E  C0AC  F0AE         	movff	w16_r16_spi@address,??_w16_r16_spi
  4222  000C82  C0AD  F0AF         	movff	w16_r16_spi@address+1,??_w16_r16_spi+1
  4223  000C86  C0AF  F0AE         	movff	??_w16_r16_spi+1,??_w16_r16_spi
  4224  000C8A  6BAF               	clrf	(??_w16_r16_spi+1)& (0+255),b
  4225  000C8C  51AE               	movf	??_w16_r16_spi& (0+255),w,b
  4226  000C8E  6FB6               	movwf	w16_r16_spi@address_high& (0+255),b
  4227  000C90  6BB7               	clrf	(w16_r16_spi@address_high+1)& (0+255),b
  4228                           
  4229                           ; BSR set to: 0
  4230                           ;spi.c: 99: SSPBUF = address_high;
  4231  000C92  C0B6  FFC9         	movff	w16_r16_spi@address_high,4041	;volatile
  4232  000C96                     
  4233                           ; BSR set to: 0
  4234  000C96  A0C7               	btfss	4039,0,c	;volatile
  4235  000C98  D7FE               	goto	l299
  4236                           
  4237                           ;spi.c: 101: p1 = SSPBUF;
  4238  000C9A  CFC9 F0B0          	movff	4041,w16_r16_spi@p1	;volatile
  4239  000C9E  0100               	movlb	0	; () banked
  4240  000CA0  6BB1               	clrf	(w16_r16_spi@p1+1)& (0+255),b
  4241                           
  4242                           ;spi.c: 103: SSPBUF = address_low;
  4243  000CA2  C0B4  FFC9         	movff	w16_r16_spi@address_low,4041	;volatile
  4244  000CA6                     
  4245                           ; BSR set to: 0
  4246  000CA6  A0C7               	btfss	4039,0,c	;volatile
  4247  000CA8  D7FE               	goto	l302
  4248                           
  4249                           ;spi.c: 105: p2 = SSPBUF;
  4250  000CAA  CFC9 F0B2          	movff	4041,w16_r16_spi@p2	;volatile
  4251  000CAE  0100               	movlb	0	; () banked
  4252  000CB0  6BB3               	clrf	(w16_r16_spi@p2+1)& (0+255),b
  4253                           
  4254                           ;spi.c: 107: SSPBUF = blank_high;
  4255  000CB2  C0BC  FFC9         	movff	w16_r16_spi@blank_high,4041	;volatile
  4256  000CB6                     
  4257                           ; BSR set to: 0
  4258  000CB6  A0C7               	btfss	4039,0,c	;volatile
  4259  000CB8  D7FE               	goto	l305
  4260                           
  4261                           ;spi.c: 109: p3 = SSPBUF;
  4262  000CBA  CFC9 F0BE          	movff	4041,w16_r16_spi@p3	;volatile
  4263  000CBE  0100               	movlb	0	; () banked
  4264  000CC0  6BBF               	clrf	(w16_r16_spi@p3+1)& (0+255),b
  4265                           
  4266                           ;spi.c: 111: SSPBUF = blank_low;
  4267  000CC2  C0BA  FFC9         	movff	w16_r16_spi@blank_low,4041	;volatile
  4268  000CC6                     
  4269                           ; BSR set to: 0
  4270  000CC6  A0C7               	btfss	4039,0,c	;volatile
  4271  000CC8  D7FE               	goto	l308
  4272                           
  4273                           ;spi.c: 113: p4 = SSPBUF;
  4274  000CCA  CFC9 F0C0          	movff	4041,w16_r16_spi@p4	;volatile
  4275  000CCE  0100               	movlb	0	; () banked
  4276  000CD0  6BC1               	clrf	(w16_r16_spi@p4+1)& (0+255),b
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;spi.c: 115: result = (p3 << 8) + p4;
  4280  000CD2  51BE               	movf	w16_r16_spi@p3& (0+255),w,b
  4281  000CD4  6FAF               	movwf	(??_w16_r16_spi+1)& (0+255),b
  4282  000CD6  6BAE               	clrf	??_w16_r16_spi& (0+255),b
  4283  000CD8  51C0               	movf	w16_r16_spi@p4& (0+255),w,b
  4284  000CDA  25AE               	addwf	??_w16_r16_spi& (0+255),w,b
  4285  000CDC  6FB8               	movwf	w16_r16_spi@result& (0+255),b
  4286  000CDE  51C1               	movf	(w16_r16_spi@p4+1)& (0+255),w,b
  4287  000CE0  21AF               	addwfc	(??_w16_r16_spi+1)& (0+255),w,b
  4288  000CE2  6FB9               	movwf	(w16_r16_spi@result+1)& (0+255),b
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;spi.c: 116: return result;
  4292  000CE4  C0B8  F0AC         	movff	w16_r16_spi@result,?_w16_r16_spi
  4293  000CE8  C0B9  F0AD         	movff	w16_r16_spi@result+1,?_w16_r16_spi+1
  4294  000CEC  0012               	return	
  4295  000CEE                     __end_of_w16_r16_spi:
  4296                           	opt stack 0
  4297                           tblptru	equ	0xFF8
  4298                           tblptrh	equ	0xFF7
  4299                           tblptrl	equ	0xFF6
  4300                           tablat	equ	0xFF5
  4301                           intcon	equ	0xFF2
  4302                           intcon2	equ	0xFF1
  4303                           intcon3	equ	0xFF0
  4304                           postinc0	equ	0xFEE
  4305                           wreg	equ	0xFE8
  4306                           plusw1	equ	0xFE3
  4307                           indf2	equ	0xFDF
  4308                           postinc2	equ	0xFDE
  4309                           postdec2	equ	0xFDD
  4310                           plusw2	equ	0xFDB
  4311                           fsr2h	equ	0xFDA
  4312                           fsr2l	equ	0xFD9
  4313                           status	equ	0xFD8
  4314                           
  4315 ;; *************** function _blink_LED *****************
  4316 ;; Defined at:
  4317 ;;		line 409 in file "AD7147.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;  cdc             2   22[BANK0 ] unsigned int 
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;  message         2   24[BANK0 ] unsigned int 
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  1    wreg      void 
  4324 ;; Registers used:
  4325 ;;		wreg, status,2, status,0, cstack
  4326 ;; Tracked objects:
  4327 ;;		On entry : 0/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4331 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4332 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4334 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4335 ;;Total ram usage:        4 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; Hardware stack levels required when called:    5
  4338 ;; This function calls:
  4339 ;;		_delay_ms
  4340 ;;		_get_CDC
  4341 ;;		_w32_spi
  4342 ;; This function is called by:
  4343 ;;		_main
  4344 ;; This function uses a non-reentrant model
  4345 ;;
  4346                           
  4347                           	psect	text20
  4348  000A68                     __ptext20:
  4349                           	opt stack 0
  4350  000A68                     _blink_LED:
  4351                           	opt stack 25
  4352                           
  4353                           ;AD7147.c: 411: get_CDC(cdc,0);
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;incstack = 0
  4357  000A68  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4358  000A6C  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4359  000A70  0E00               	movlw	0
  4360  000A72  0100               	movlb	0	; () banked
  4361  000A74  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4362  000A76  0E00               	movlw	0
  4363  000A78  6FAE               	movwf	get_CDC@state& (0+255),b
  4364  000A7A  EC82  F009         	call	_get_CDC	;wreg free
  4365                           
  4366                           ;AD7147.c: 412: unsigned int message = 0b0010000000000000;
  4367  000A7E  0E20               	movlw	32
  4368  000A80  0100               	movlb	0	; () banked
  4369  000A82  6FC5               	movwf	(blink_LED@message+1)& (0+255),b
  4370  000A84  0E00               	movlw	0
  4371  000A86  6FC4               	movwf	blink_LED@message& (0+255),b
  4372                           
  4373                           ; BSR set to: 0
  4374                           ;AD7147.c: 413: w32_spi((0xE000 + 0x005),message);
  4375  000A88  0EE0               	movlw	224
  4376  000A8A  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  4377  000A8C  0E05               	movlw	5
  4378  000A8E  6FAC               	movwf	w32_spi@address& (0+255),b
  4379  000A90  C0C4  F0AE         	movff	blink_LED@message,w32_spi@data
  4380  000A94  C0C5  F0AF         	movff	blink_LED@message+1,w32_spi@data+1
  4381  000A98  EC37  F008         	call	_w32_spi	;wreg free
  4382                           
  4383                           ;AD7147.c: 414: delay_ms(10);
  4384  000A9C  0E00               	movlw	0
  4385  000A9E  0100               	movlb	0	; () banked
  4386  000AA0  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  4387  000AA2  0E0A               	movlw	10
  4388  000AA4  6FB4               	movwf	delay_ms@n& (0+255),b
  4389  000AA6  EC11  F009         	call	_delay_ms	;wreg free
  4390                           
  4391                           ;AD7147.c: 415: get_CDC(cdc,1);
  4392  000AAA  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4393  000AAE  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4394  000AB2  0E00               	movlw	0
  4395  000AB4  0100               	movlb	0	; () banked
  4396  000AB6  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4397  000AB8  0E01               	movlw	1
  4398  000ABA  6FAE               	movwf	get_CDC@state& (0+255),b
  4399  000ABC  EC82  F009         	call	_get_CDC	;wreg free
  4400                           
  4401                           ;AD7147.c: 416: delay_ms(1000);
  4402  000AC0  0E03               	movlw	3
  4403  000AC2  0100               	movlb	0	; () banked
  4404  000AC4  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  4405  000AC6  0EE8               	movlw	232
  4406  000AC8  6FB4               	movwf	delay_ms@n& (0+255),b
  4407  000ACA  EC11  F009         	call	_delay_ms	;wreg free
  4408                           
  4409                           ;AD7147.c: 417: get_CDC(cdc,0);
  4410  000ACE  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4411  000AD2  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4412  000AD6  0E00               	movlw	0
  4413  000AD8  0100               	movlb	0	; () banked
  4414  000ADA  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4415  000ADC  0E00               	movlw	0
  4416  000ADE  6FAE               	movwf	get_CDC@state& (0+255),b
  4417  000AE0  EC82  F009         	call	_get_CDC	;wreg free
  4418                           
  4419                           ;AD7147.c: 418: unsigned int message = 0b0011000000000000;
  4420  000AE4  0E30               	movlw	48
  4421  000AE6  0100               	movlb	0	; () banked
  4422  000AE8  6FC5               	movwf	(blink_LED@message+1)& (0+255),b
  4423  000AEA  0E00               	movlw	0
  4424  000AEC  6FC4               	movwf	blink_LED@message& (0+255),b
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;AD7147.c: 419: w32_spi((0xE000 + 0x005),message);
  4428  000AEE  0EE0               	movlw	224
  4429  000AF0  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  4430  000AF2  0E05               	movlw	5
  4431  000AF4  6FAC               	movwf	w32_spi@address& (0+255),b
  4432  000AF6  C0C4  F0AE         	movff	blink_LED@message,w32_spi@data
  4433  000AFA  C0C5  F0AF         	movff	blink_LED@message+1,w32_spi@data+1
  4434  000AFE  EC37  F008         	call	_w32_spi	;wreg free
  4435                           
  4436                           ;AD7147.c: 420: delay_ms(10);
  4437  000B02  0E00               	movlw	0
  4438  000B04  0100               	movlb	0	; () banked
  4439  000B06  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  4440  000B08  0E0A               	movlw	10
  4441  000B0A  6FB4               	movwf	delay_ms@n& (0+255),b
  4442  000B0C  EC11  F009         	call	_delay_ms	;wreg free
  4443                           
  4444                           ;AD7147.c: 421: get_CDC(cdc,1);
  4445  000B10  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4446  000B14  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4447  000B18  0E00               	movlw	0
  4448  000B1A  0100               	movlb	0	; () banked
  4449  000B1C  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4450  000B1E  0E01               	movlw	1
  4451  000B20  6FAE               	movwf	get_CDC@state& (0+255),b
  4452  000B22  EC82  F009         	call	_get_CDC	;wreg free
  4453  000B26  0012               	return		;funcret
  4454  000B28                     __end_of_blink_LED:
  4455                           	opt stack 0
  4456                           tblptru	equ	0xFF8
  4457                           tblptrh	equ	0xFF7
  4458                           tblptrl	equ	0xFF6
  4459                           tablat	equ	0xFF5
  4460                           intcon	equ	0xFF2
  4461                           intcon2	equ	0xFF1
  4462                           intcon3	equ	0xFF0
  4463                           postinc0	equ	0xFEE
  4464                           wreg	equ	0xFE8
  4465                           plusw1	equ	0xFE3
  4466                           indf2	equ	0xFDF
  4467                           postinc2	equ	0xFDE
  4468                           postdec2	equ	0xFDD
  4469                           plusw2	equ	0xFDB
  4470                           fsr2h	equ	0xFDA
  4471                           fsr2l	equ	0xFD9
  4472                           status	equ	0xFD8
  4473                           
  4474 ;; *************** function _w32_spi *****************
  4475 ;; Defined at:
  4476 ;;		line 26 in file "spi.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;  address         2    0[BANK0 ] unsigned int 
  4479 ;;  data            2    2[BANK0 ] unsigned int 
  4480 ;; Auto vars:     Size  Location     Type
  4481 ;;  data_high       2   20[BANK0 ] unsigned int 
  4482 ;;  data_low        2   18[BANK0 ] unsigned int 
  4483 ;;  address_high    2   16[BANK0 ] unsigned int 
  4484 ;;  address_low     2   14[BANK0 ] unsigned int 
  4485 ;;  p4              2   12[BANK0 ] unsigned int 
  4486 ;;  p3              2   10[BANK0 ] unsigned int 
  4487 ;;  p2              2    8[BANK0 ] unsigned int 
  4488 ;;  p1              2    6[BANK0 ] unsigned int 
  4489 ;; Return value:  Size  Location     Type
  4490 ;;                  1    wreg      void 
  4491 ;; Registers used:
  4492 ;;		wreg, status,2
  4493 ;; Tracked objects:
  4494 ;;		On entry : 0/0
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4498 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4499 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4500 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4501 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4502 ;;Total ram usage:       22 bytes
  4503 ;; Hardware stack levels used:    1
  4504 ;; Hardware stack levels required when called:    3
  4505 ;; This function calls:
  4506 ;;		Nothing
  4507 ;; This function is called by:
  4508 ;;		_write_AD7147
  4509 ;;		_switch_LED
  4510 ;;		_blink_LED
  4511 ;; This function uses a non-reentrant model
  4512 ;;
  4513                           
  4514                           	psect	text21
  4515  00106E                     __ptext21:
  4516                           	opt stack 0
  4517  00106E                     _w32_spi:
  4518                           	opt stack 26
  4519                           
  4520                           ;spi.c: 28: unsigned int address_low, address_high, data_low, data_high;
  4521                           ;spi.c: 30: address_low = address & 0xFF;
  4522                           
  4523                           ;incstack = 0
  4524  00106E  0100               	movlb	0	; () banked
  4525  001070  51AC               	movf	w32_spi@address& (0+255),w,b
  4526  001072  6FBA               	movwf	w32_spi@address_low& (0+255),b
  4527  001074  6BBB               	clrf	(w32_spi@address_low+1)& (0+255),b
  4528                           
  4529                           ;spi.c: 31: address_high = (address >> 8) & 0xFF;
  4530  001076  C0AC  F0B0         	movff	w32_spi@address,??_w32_spi
  4531  00107A  C0AD  F0B1         	movff	w32_spi@address+1,??_w32_spi+1
  4532  00107E  C0B1  F0B0         	movff	??_w32_spi+1,??_w32_spi
  4533  001082  6BB1               	clrf	(??_w32_spi+1)& (0+255),b
  4534  001084  51B0               	movf	??_w32_spi& (0+255),w,b
  4535  001086  6FBC               	movwf	w32_spi@address_high& (0+255),b
  4536  001088  6BBD               	clrf	(w32_spi@address_high+1)& (0+255),b
  4537                           
  4538                           ;spi.c: 33: data_low = data & 0xFF;
  4539  00108A  51AE               	movf	w32_spi@data& (0+255),w,b
  4540  00108C  6FBE               	movwf	w32_spi@data_low& (0+255),b
  4541  00108E  6BBF               	clrf	(w32_spi@data_low+1)& (0+255),b
  4542                           
  4543                           ;spi.c: 34: data_high = (data >> 8) & 0xFF;
  4544  001090  C0AE  F0B0         	movff	w32_spi@data,??_w32_spi
  4545  001094  C0AF  F0B1         	movff	w32_spi@data+1,??_w32_spi+1
  4546  001098  C0B1  F0B0         	movff	??_w32_spi+1,??_w32_spi
  4547  00109C  6BB1               	clrf	(??_w32_spi+1)& (0+255),b
  4548  00109E  51B0               	movf	??_w32_spi& (0+255),w,b
  4549  0010A0  6FC0               	movwf	w32_spi@data_high& (0+255),b
  4550  0010A2  6BC1               	clrf	(w32_spi@data_high+1)& (0+255),b
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;spi.c: 36: SSPBUF = address_high;
  4554  0010A4  C0BC  FFC9         	movff	w32_spi@address_high,4041	;volatile
  4555  0010A8                     
  4556                           ; BSR set to: 0
  4557  0010A8  A0C7               	btfss	4039,0,c	;volatile
  4558  0010AA  D7FE               	goto	l266
  4559                           
  4560                           ;spi.c: 38: unsigned int p1 = SSPBUF;
  4561  0010AC  CFC9 F0B2          	movff	4041,w32_spi@p1	;volatile
  4562  0010B0  0100               	movlb	0	; () banked
  4563  0010B2  6BB3               	clrf	(w32_spi@p1+1)& (0+255),b
  4564                           
  4565                           ;spi.c: 40: SSPBUF = address_low;
  4566  0010B4  C0BA  FFC9         	movff	w32_spi@address_low,4041	;volatile
  4567  0010B8                     
  4568                           ; BSR set to: 0
  4569  0010B8  A0C7               	btfss	4039,0,c	;volatile
  4570  0010BA  D7FE               	goto	l269
  4571                           
  4572                           ;spi.c: 42: unsigned int p2 = SSPBUF;
  4573  0010BC  CFC9 F0B4          	movff	4041,w32_spi@p2	;volatile
  4574  0010C0  0100               	movlb	0	; () banked
  4575  0010C2  6BB5               	clrf	(w32_spi@p2+1)& (0+255),b
  4576                           
  4577                           ;spi.c: 44: SSPBUF = data_high;
  4578  0010C4  C0C0  FFC9         	movff	w32_spi@data_high,4041	;volatile
  4579  0010C8                     
  4580                           ; BSR set to: 0
  4581  0010C8  A0C7               	btfss	4039,0,c	;volatile
  4582  0010CA  D7FE               	goto	l272
  4583                           
  4584                           ;spi.c: 46: unsigned int p3 = SSPBUF;
  4585  0010CC  CFC9 F0B6          	movff	4041,w32_spi@p3	;volatile
  4586  0010D0  0100               	movlb	0	; () banked
  4587  0010D2  6BB7               	clrf	(w32_spi@p3+1)& (0+255),b
  4588                           
  4589                           ;spi.c: 48: SSPBUF = data_low;
  4590  0010D4  C0BE  FFC9         	movff	w32_spi@data_low,4041	;volatile
  4591  0010D8                     
  4592                           ; BSR set to: 0
  4593  0010D8  A0C7               	btfss	4039,0,c	;volatile
  4594  0010DA  D7FE               	goto	l275
  4595                           
  4596                           ;spi.c: 50: unsigned int p4 = SSPBUF;
  4597  0010DC  CFC9 F0B8          	movff	4041,w32_spi@p4	;volatile
  4598  0010E0  0100               	movlb	0	; () banked
  4599  0010E2  6BB9               	clrf	(w32_spi@p4+1)& (0+255),b
  4600                           
  4601                           ; BSR set to: 0
  4602  0010E4  0012               	return		;funcret
  4603  0010E6                     __end_of_w32_spi:
  4604                           	opt stack 0
  4605                           tblptru	equ	0xFF8
  4606                           tblptrh	equ	0xFF7
  4607                           tblptrl	equ	0xFF6
  4608                           tablat	equ	0xFF5
  4609                           intcon	equ	0xFF2
  4610                           intcon2	equ	0xFF1
  4611                           intcon3	equ	0xFF0
  4612                           postinc0	equ	0xFEE
  4613                           wreg	equ	0xFE8
  4614                           plusw1	equ	0xFE3
  4615                           indf2	equ	0xFDF
  4616                           postinc2	equ	0xFDE
  4617                           postdec2	equ	0xFDD
  4618                           plusw2	equ	0xFDB
  4619                           fsr2h	equ	0xFDA
  4620                           fsr2l	equ	0xFD9
  4621                           status	equ	0xFD8
  4622                           
  4623 ;; *************** function _get_CDC *****************
  4624 ;; Defined at:
  4625 ;;		line 424 in file "AD7147.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;  cdc             2    0[BANK0 ] unsigned int 
  4628 ;;  state           2    2[BANK0 ] unsigned int 
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;		None
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  1    wreg      void 
  4633 ;; Registers used:
  4634 ;;		wreg, status,2, status,0
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4640 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4643 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4644 ;;Total ram usage:        4 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    3
  4647 ;; This function calls:
  4648 ;;		Nothing
  4649 ;; This function is called by:
  4650 ;;		_write_AD7147
  4651 ;;		_read_AD7147
  4652 ;;		_sensor_CDC
  4653 ;;		_get_ID
  4654 ;;		_switch_LED
  4655 ;;		_blink_LED
  4656 ;;		_read_sensors
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           	psect	text22
  4661  001304                     __ptext22:
  4662                           	opt stack 0
  4663  001304                     _get_CDC:
  4664                           	opt stack 26
  4665                           
  4666                           ;AD7147.c: 426: if (state == 1)
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;incstack = 0
  4670  001304  0100               	movlb	0	; () banked
  4671  001306  05AE               	decf	get_CDC@state& (0+255),w,b
  4672  001308  11AF               	iorwf	(get_CDC@state+1)& (0+255),w,b
  4673  00130A  A4D8               	btfss	status,2,c
  4674  00130C  D003               	goto	l75
  4675                           
  4676                           ; BSR set to: 0
  4677                           ;AD7147.c: 427: {
  4678                           ;AD7147.c: 428: LATCbits.LATC1 = 1;
  4679  00130E  828B               	bsf	3979,1,c	;volatile
  4680                           
  4681                           ;AD7147.c: 429: LATCbits.LATC0 = 1;
  4682  001310  808B               	bsf	3979,0,c	;volatile
  4683                           
  4684                           ;AD7147.c: 430: }
  4685  001312  0012               	return	
  4686  001314                     l75:
  4687                           
  4688                           ; BSR set to: 0
  4689                           ;AD7147.c: 431: else
  4690                           ;AD7147.c: 432: {
  4691                           ;AD7147.c: 433: if (cdc == 1)
  4692                           
  4693                           ; BSR set to: 0
  4694  001314  05AC               	decf	get_CDC@cdc& (0+255),w,b
  4695  001316  11AD               	iorwf	(get_CDC@cdc+1)& (0+255),w,b
  4696  001318  A4D8               	btfss	status,2,c
  4697  00131A  D003               	goto	l77
  4698                           
  4699                           ; BSR set to: 0
  4700                           ;AD7147.c: 434: {
  4701                           ;AD7147.c: 435: LATCbits.LATC1 = 0;
  4702  00131C  928B               	bcf	3979,1,c	;volatile
  4703                           
  4704                           ;AD7147.c: 436: LATCbits.LATC0 = 1;
  4705  00131E  808B               	bsf	3979,0,c	;volatile
  4706                           
  4707                           ;AD7147.c: 437: }
  4708  001320  0012               	return	
  4709  001322                     l77:
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;AD7147.c: 438: else
  4713                           ;AD7147.c: 439: {
  4714                           ;AD7147.c: 440: LATCbits.LATC0 = 0;
  4715  001322  908B               	bcf	3979,0,c	;volatile
  4716                           
  4717                           ;AD7147.c: 441: LATCbits.LATC1 = 1;
  4718  001324  828B               	bsf	3979,1,c	;volatile
  4719                           
  4720                           ; BSR set to: 0
  4721  001326  0012               	return	
  4722  001328                     __end_of_get_CDC:
  4723                           	opt stack 0
  4724                           tblptru	equ	0xFF8
  4725                           tblptrh	equ	0xFF7
  4726                           tblptrl	equ	0xFF6
  4727                           tablat	equ	0xFF5
  4728                           intcon	equ	0xFF2
  4729                           intcon2	equ	0xFF1
  4730                           intcon3	equ	0xFF0
  4731                           postinc0	equ	0xFEE
  4732                           wreg	equ	0xFE8
  4733                           plusw1	equ	0xFE3
  4734                           indf2	equ	0xFDF
  4735                           postinc2	equ	0xFDE
  4736                           postdec2	equ	0xFDD
  4737                           plusw2	equ	0xFDB
  4738                           fsr2h	equ	0xFDA
  4739                           fsr2l	equ	0xFD9
  4740                           status	equ	0xFD8
  4741                           
  4742 ;; *************** function _delay_ms *****************
  4743 ;; Defined at:
  4744 ;;		line 93 in file "micro_setup.c"
  4745 ;; Parameters:    Size  Location     Type
  4746 ;;  n               2    8[BANK0 ] int 
  4747 ;; Auto vars:     Size  Location     Type
  4748 ;;  j               2   11[BANK0 ] int 
  4749 ;; Return value:  Size  Location     Type
  4750 ;;                  1    wreg      void 
  4751 ;; Registers used:
  4752 ;;		wreg, status,2, status,0, cstack
  4753 ;; Tracked objects:
  4754 ;;		On entry : 0/0
  4755 ;;		On exit  : 0/0
  4756 ;;		Unchanged: 0/0
  4757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4758 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4759 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4760 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4761 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4762 ;;Total ram usage:        5 bytes
  4763 ;; Hardware stack levels used:    1
  4764 ;; Hardware stack levels required when called:    4
  4765 ;; This function calls:
  4766 ;;		___awdiv
  4767 ;; This function is called by:
  4768 ;;		_switch_LED
  4769 ;;		_blink_LED
  4770 ;;		_main
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774                           	psect	text23
  4775  001222                     __ptext23:
  4776                           	opt stack 0
  4777  001222                     _delay_ms:
  4778                           	opt stack 25
  4779                           
  4780                           ;micro_setup.c: 95: int j = n/10;
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;incstack = 0
  4784  001222  C0B4  F0AC         	movff	delay_ms@n,___awdiv@dividend
  4785  001226  C0B5  F0AD         	movff	delay_ms@n+1,___awdiv@dividend+1
  4786  00122A  0E00               	movlw	0
  4787  00122C  0100               	movlb	0	; () banked
  4788  00122E  6FAF               	movwf	(___awdiv@divisor+1)& (0+255),b
  4789  001230  0E0A               	movlw	10
  4790  001232  6FAE               	movwf	___awdiv@divisor& (0+255),b
  4791  001234  EC77  F006         	call	___awdiv	;wreg free
  4792  001238  C0AC  F0B7         	movff	?___awdiv,delay_ms@j
  4793  00123C  C0AD  F0B8         	movff	?___awdiv+1,delay_ms@j+1
  4794                           
  4795                           ;micro_setup.c: 96: while(j--)
  4796  001240  D009               	goto	l248
  4797  001242                     l1915:
  4798                           
  4799                           ;micro_setup.c: 97: {
  4800                           ;micro_setup.c: 98: _delay((unsigned long)((10)*(8000000/4000.0)));
  4801  001242  0E1A               	movlw	26
  4802  001244  0100               	movlb	0	; () banked
  4803  001246  6FB6               	movwf	??_delay_ms& (0+255),b
  4804  001248  0EF8               	movlw	248
  4805  00124A                     u1327:
  4806  00124A  2EE8               	decfsz	wreg,f,c
  4807  00124C  D7FE               	bra	u1327
  4808  00124E  2FB6               	decfsz	??_delay_ms& (0+255),f,b
  4809  001250  D7FC               	bra	u1327
  4810  001252  F000               	nop	
  4811  001254                     l248:
  4812  001254  0100               	movlb	0	; () banked
  4813  001256  07B7               	decf	delay_ms@j& (0+255),f,b
  4814  001258  A0D8               	btfss	status,0,c
  4815  00125A  07B8               	decf	(delay_ms@j+1)& (0+255),f,b
  4816  00125C  29B7               	incf	delay_ms@j& (0+255),w,b
  4817  00125E  E1F1               	bnz	l1915
  4818  001260  29B8               	incf	(delay_ms@j+1)& (0+255),w,b
  4819  001262  B4D8               	btfsc	status,2,c
  4820  001264  0012               	return	
  4821  001266  D7ED               	goto	l249
  4822  001268                     __end_of_delay_ms:
  4823                           	opt stack 0
  4824                           tblptru	equ	0xFF8
  4825                           tblptrh	equ	0xFF7
  4826                           tblptrl	equ	0xFF6
  4827                           tablat	equ	0xFF5
  4828                           intcon	equ	0xFF2
  4829                           intcon2	equ	0xFF1
  4830                           intcon3	equ	0xFF0
  4831                           postinc0	equ	0xFEE
  4832                           wreg	equ	0xFE8
  4833                           plusw1	equ	0xFE3
  4834                           indf2	equ	0xFDF
  4835                           postinc2	equ	0xFDE
  4836                           postdec2	equ	0xFDD
  4837                           plusw2	equ	0xFDB
  4838                           fsr2h	equ	0xFDA
  4839                           fsr2l	equ	0xFD9
  4840                           status	equ	0xFD8
  4841                           
  4842 ;; *************** function ___awdiv *****************
  4843 ;; Defined at:
  4844 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  dividend        2    0[BANK0 ] int 
  4847 ;;  divisor         2    2[BANK0 ] int 
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;  quotient        2    6[BANK0 ] int 
  4850 ;;  sign            1    5[BANK0 ] unsigned char 
  4851 ;;  counter         1    4[BANK0 ] unsigned char 
  4852 ;; Return value:  Size  Location     Type
  4853 ;;                  2    0[BANK0 ] int 
  4854 ;; Registers used:
  4855 ;;		wreg, status,2, status,0
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4861 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4862 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4864 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4865 ;;Total ram usage:        8 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; Hardware stack levels required when called:    3
  4868 ;; This function calls:
  4869 ;;		Nothing
  4870 ;; This function is called by:
  4871 ;;		_delay_ms
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text24
  4876  000CEE                     __ptext24:
  4877                           	opt stack 0
  4878  000CEE                     ___awdiv:
  4879                           	opt stack 25
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;incstack = 0
  4883  000CEE  0E00               	movlw	0
  4884  000CF0  0100               	movlb	0	; () banked
  4885  000CF2  6FB1               	movwf	___awdiv@sign& (0+255),b
  4886                           
  4887                           ; BSR set to: 0
  4888  000CF4  AFAF               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4889  000CF6  D006               	goto	l575
  4890                           
  4891                           ; BSR set to: 0
  4892  000CF8  6DAE               	negf	___awdiv@divisor& (0+255),b
  4893  000CFA  1FAF               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4894  000CFC  B0D8               	btfsc	status,0,c
  4895  000CFE  2BAF               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4896                           
  4897                           ; BSR set to: 0
  4898  000D00  0E01               	movlw	1
  4899  000D02  6FB1               	movwf	___awdiv@sign& (0+255),b
  4900  000D04                     l575:
  4901                           
  4902                           ; BSR set to: 0
  4903                           
  4904                           ; BSR set to: 0
  4905  000D04  AFAD               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4906  000D06  D006               	goto	l576
  4907                           
  4908                           ; BSR set to: 0
  4909  000D08  6DAC               	negf	___awdiv@dividend& (0+255),b
  4910  000D0A  1FAD               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4911  000D0C  B0D8               	btfsc	status,0,c
  4912  000D0E  2BAD               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4913                           
  4914                           ; BSR set to: 0
  4915  000D10  0E01               	movlw	1
  4916  000D12  1BB1               	xorwf	___awdiv@sign& (0+255),f,b
  4917  000D14                     l576:
  4918                           
  4919                           ; BSR set to: 0
  4920                           
  4921                           ; BSR set to: 0
  4922  000D14  0E00               	movlw	0
  4923  000D16  6FB3               	movwf	(___awdiv@quotient+1)& (0+255),b
  4924  000D18  0E00               	movlw	0
  4925  000D1A  6FB2               	movwf	___awdiv@quotient& (0+255),b
  4926                           
  4927                           ; BSR set to: 0
  4928  000D1C  51AE               	movf	___awdiv@divisor& (0+255),w,b
  4929  000D1E  11AF               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4930  000D20  B4D8               	btfsc	status,2,c
  4931  000D22  D01C               	goto	l583
  4932                           
  4933                           ; BSR set to: 0
  4934  000D24  0E01               	movlw	1
  4935  000D26  6FB0               	movwf	___awdiv@counter& (0+255),b
  4936  000D28  D004               	goto	l578
  4937  000D2A                     
  4938                           ; BSR set to: 0
  4939                           
  4940                           ; BSR set to: 0
  4941  000D2A  90D8               	bcf	status,0,c
  4942  000D2C  37AE               	rlcf	___awdiv@divisor& (0+255),f,b
  4943  000D2E  37AF               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4944  000D30  2BB0               	incf	___awdiv@counter& (0+255),f,b
  4945  000D32                     l578:
  4946                           
  4947                           ; BSR set to: 0
  4948                           
  4949                           ; BSR set to: 0
  4950  000D32  AFAF               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4951  000D34  D7FA               	goto	l579
  4952  000D36                     u830:
  4953                           
  4954                           ; BSR set to: 0
  4955                           
  4956                           ; BSR set to: 0
  4957                           
  4958                           ; BSR set to: 0
  4959  000D36  90D8               	bcf	status,0,c
  4960  000D38  37B2               	rlcf	___awdiv@quotient& (0+255),f,b
  4961  000D3A  37B3               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4962                           
  4963                           ; BSR set to: 0
  4964  000D3C  51AE               	movf	___awdiv@divisor& (0+255),w,b
  4965  000D3E  5DAC               	subwf	___awdiv@dividend& (0+255),w,b
  4966  000D40  51AF               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4967  000D42  59AD               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4968  000D44  A0D8               	btfss	status,0,c
  4969  000D46  D005               	goto	l582
  4970                           
  4971                           ; BSR set to: 0
  4972  000D48  51AE               	movf	___awdiv@divisor& (0+255),w,b
  4973  000D4A  5FAC               	subwf	___awdiv@dividend& (0+255),f,b
  4974  000D4C  51AF               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4975  000D4E  5BAD               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4976                           
  4977                           ; BSR set to: 0
  4978  000D50  81B2               	bsf	___awdiv@quotient& (0+255),0,b
  4979  000D52                     l582:
  4980                           
  4981                           ; BSR set to: 0
  4982                           
  4983                           ; BSR set to: 0
  4984  000D52  90D8               	bcf	status,0,c
  4985  000D54  33AF               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4986  000D56  33AE               	rrcf	___awdiv@divisor& (0+255),f,b
  4987                           
  4988                           ; BSR set to: 0
  4989  000D58  2FB0               	decfsz	___awdiv@counter& (0+255),f,b
  4990  000D5A  D7ED               	goto	u830
  4991  000D5C                     l583:
  4992                           
  4993                           ; BSR set to: 0
  4994                           
  4995                           ; BSR set to: 0
  4996                           
  4997                           ; BSR set to: 0
  4998  000D5C  51B1               	movf	___awdiv@sign& (0+255),w,b
  4999  000D5E  B4D8               	btfsc	status,2,c
  5000  000D60  D004               	goto	l584
  5001                           
  5002                           ; BSR set to: 0
  5003  000D62  6DB2               	negf	___awdiv@quotient& (0+255),b
  5004  000D64  1FB3               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5005  000D66  B0D8               	btfsc	status,0,c
  5006  000D68  2BB3               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5007  000D6A                     l584:
  5008                           
  5009                           ; BSR set to: 0
  5010                           
  5011                           ; BSR set to: 0
  5012  000D6A  C0B2  F0AC         	movff	___awdiv@quotient,?___awdiv
  5013  000D6E  C0B3  F0AD         	movff	___awdiv@quotient+1,?___awdiv+1
  5014  000D72  0012               	return	
  5015  000D74                     __end_of___awdiv:
  5016                           	opt stack 0
  5017                           tblptru	equ	0xFF8
  5018                           tblptrh	equ	0xFF7
  5019                           tblptrl	equ	0xFF6
  5020                           tablat	equ	0xFF5
  5021                           intcon	equ	0xFF2
  5022                           intcon2	equ	0xFF1
  5023                           intcon3	equ	0xFF0
  5024                           postinc0	equ	0xFEE
  5025                           wreg	equ	0xFE8
  5026                           plusw1	equ	0xFE3
  5027                           indf2	equ	0xFDF
  5028                           postinc2	equ	0xFDE
  5029                           postdec2	equ	0xFDD
  5030                           plusw2	equ	0xFDB
  5031                           fsr2h	equ	0xFDA
  5032                           fsr2l	equ	0xFD9
  5033                           status	equ	0xFD8
  5034                           
  5035 ;; *************** function _ISR *****************
  5036 ;; Defined at:
  5037 ;;		line 21 in file "main.c"
  5038 ;; Parameters:    Size  Location     Type
  5039 ;;		None
  5040 ;; Auto vars:     Size  Location     Type
  5041 ;;		None
  5042 ;; Return value:  Size  Location     Type
  5043 ;;                  1    wreg      void 
  5044 ;; Registers used:
  5045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5046 ;; Tracked objects:
  5047 ;;		On entry : 0/0
  5048 ;;		On exit  : 0/0
  5049 ;;		Unchanged: 0/0
  5050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5053 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5054 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5055 ;;Total ram usage:       18 bytes
  5056 ;; Hardware stack levels used:    1
  5057 ;; Hardware stack levels required when called:    2
  5058 ;; This function calls:
  5059 ;;		_read_cdc1
  5060 ;;		_read_cdc2
  5061 ;;		i2_read_AD7147
  5062 ;; This function is called by:
  5063 ;;		Interrupt level 2
  5064 ;; This function uses a non-reentrant model
  5065 ;;
  5066                           
  5067                           	psect	intcode
  5068  000008                     __pintcode:
  5069                           	opt stack 0
  5070  000008                     _ISR:
  5071                           	opt stack 25
  5072                           
  5073                           ; BSR set to: 0
  5074                           ;incstack = 0
  5075  000008  825B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5076  00000A  CFFA F023          	movff	pclath,??_ISR
  5077  00000E  CFFB F024          	movff	pclatu,??_ISR+1
  5078  000012  CFE9 F025          	movff	fsr0l,??_ISR+2
  5079  000016  CFEA F026          	movff	fsr0h,??_ISR+3
  5080  00001A  CFE1 F027          	movff	fsr1l,??_ISR+4
  5081  00001E  CFE2 F028          	movff	fsr1h,??_ISR+5
  5082  000022  CFD9 F029          	movff	fsr2l,??_ISR+6
  5083  000026  CFDA F02A          	movff	fsr2h,??_ISR+7
  5084  00002A  CFF3 F02B          	movff	prodl,??_ISR+8
  5085  00002E  CFF4 F02C          	movff	prodh,??_ISR+9
  5086  000032  CFF6 F02D          	movff	tblptrl,??_ISR+10
  5087  000036  CFF7 F02E          	movff	tblptrh,??_ISR+11
  5088  00003A  CFF8 F02F          	movff	tblptru,??_ISR+12
  5089  00003E  CFF5 F030          	movff	tablat,??_ISR+13
  5090  000042  C05B  F031         	movff	btemp,??_ISR+14
  5091  000046  C05C  F032         	movff	btemp+1,??_ISR+15
  5092  00004A  C05D  F033         	movff	btemp+2,??_ISR+16
  5093  00004E  C05E  F034         	movff	btemp+3,??_ISR+17
  5094                           
  5095                           ;main.c: 24: if(INTCONbits.INT0IF && INTCONbits.INT0IE)
  5096  000052  B2F2               	btfsc	intcon,1,c	;volatile
  5097  000054  A8F2               	btfss	intcon,4,c	;volatile
  5098  000056  D019               	goto	i2l152
  5099                           
  5100                           ;main.c: 25: {
  5101                           ;main.c: 26: read_cdc1(sensor_values);
  5102  000058  0E7C               	movlw	low _sensor_values
  5103  00005A  6E17               	movwf	read_cdc1@sensor_values,c
  5104  00005C  0E00               	movlw	high _sensor_values
  5105  00005E  6E18               	movwf	read_cdc1@sensor_values+1,c
  5106  000060  EC7C  F007         	call	_read_cdc1	;wreg free
  5107                           
  5108                           ;main.c: 27: read_AD7147(interrupt_values_cdc1, 0x008, 3, 1);
  5109  000064  0E55               	movlw	low _interrupt_values_cdc1
  5110  000066  6E17               	movwf	i2read_AD7147@DataBuffer,c
  5111  000068  0E00               	movlw	high _interrupt_values_cdc1
  5112  00006A  6E18               	movwf	i2read_AD7147@DataBuffer+1,c
  5113  00006C  0E00               	movlw	0
  5114  00006E  6E1A               	movwf	i2read_AD7147@RegisterStartAddress+1,c
  5115  000070  0E08               	movlw	8
  5116  000072  6E19               	movwf	i2read_AD7147@RegisterStartAddress,c
  5117  000074  0E00               	movlw	0
  5118  000076  6E1C               	movwf	i2read_AD7147@NumberOfRegisters+1,c
  5119  000078  0E03               	movlw	3
  5120  00007A  6E1B               	movwf	i2read_AD7147@NumberOfRegisters,c
  5121  00007C  0E00               	movlw	0
  5122  00007E  6E1E               	movwf	i2read_AD7147@cdc+1,c
  5123  000080  0E01               	movlw	1
  5124  000082  6E1D               	movwf	i2read_AD7147@cdc,c
  5125  000084  ECFA  F007         	call	i2_read_AD7147	;wreg free
  5126                           
  5127                           ;main.c: 28: INTCONbits.INT0IF = 0;
  5128  000088  92F2               	bcf	intcon,1,c	;volatile
  5129  00008A                     i2l152:
  5130                           
  5131                           ;main.c: 29: }
  5132                           ;main.c: 30: if(INTCON3bits.INT1IF && INTCON3bits.INT1E)
  5133  00008A  B0F0               	btfsc	intcon3,0,c	;volatile
  5134  00008C  A6F0               	btfss	intcon3,3,c	;volatile
  5135  00008E  D019               	goto	i2l153
  5136                           
  5137                           ;main.c: 31: {
  5138                           ;main.c: 32: read_cdc2(sensor_values);
  5139  000090  0E7C               	movlw	low _sensor_values
  5140  000092  6E17               	movwf	read_cdc2@sensor_values,c
  5141  000094  0E00               	movlw	high _sensor_values
  5142  000096  6E18               	movwf	read_cdc2@sensor_values+1,c
  5143  000098  ECFB  F006         	call	_read_cdc2	;wreg free
  5144                           
  5145                           ;main.c: 33: read_AD7147(interrupt_values_cdc2, 0x008, 3, 2);
  5146  00009C  0E4F               	movlw	low _interrupt_values_cdc2
  5147  00009E  6E17               	movwf	i2read_AD7147@DataBuffer,c
  5148  0000A0  0E00               	movlw	high _interrupt_values_cdc2
  5149  0000A2  6E18               	movwf	i2read_AD7147@DataBuffer+1,c
  5150  0000A4  0E00               	movlw	0
  5151  0000A6  6E1A               	movwf	i2read_AD7147@RegisterStartAddress+1,c
  5152  0000A8  0E08               	movlw	8
  5153  0000AA  6E19               	movwf	i2read_AD7147@RegisterStartAddress,c
  5154  0000AC  0E00               	movlw	0
  5155  0000AE  6E1C               	movwf	i2read_AD7147@NumberOfRegisters+1,c
  5156  0000B0  0E03               	movlw	3
  5157  0000B2  6E1B               	movwf	i2read_AD7147@NumberOfRegisters,c
  5158  0000B4  0E00               	movlw	0
  5159  0000B6  6E1E               	movwf	i2read_AD7147@cdc+1,c
  5160  0000B8  0E02               	movlw	2
  5161  0000BA  6E1D               	movwf	i2read_AD7147@cdc,c
  5162  0000BC  ECFA  F007         	call	i2_read_AD7147	;wreg free
  5163                           
  5164                           ;main.c: 34: INTCON3bits.INT1IF = 0;
  5165  0000C0  90F0               	bcf	intcon3,0,c	;volatile
  5166  0000C2                     i2l153:
  5167                           
  5168                           ;main.c: 35: }
  5169                           ;main.c: 36: return;
  5170  0000C2  C034  F05E         	movff	??_ISR+17,btemp+3
  5171  0000C6  C033  F05D         	movff	??_ISR+16,btemp+2
  5172  0000CA  C032  F05C         	movff	??_ISR+15,btemp+1
  5173  0000CE  C031  F05B         	movff	??_ISR+14,btemp
  5174  0000D2  C030  FFF5         	movff	??_ISR+13,tablat
  5175  0000D6  C02F  FFF8         	movff	??_ISR+12,tblptru
  5176  0000DA  C02E  FFF7         	movff	??_ISR+11,tblptrh
  5177  0000DE  C02D  FFF6         	movff	??_ISR+10,tblptrl
  5178  0000E2  C02C  FFF4         	movff	??_ISR+9,prodh
  5179  0000E6  C02B  FFF3         	movff	??_ISR+8,prodl
  5180  0000EA  C02A  FFDA         	movff	??_ISR+7,fsr2h
  5181  0000EE  C029  FFD9         	movff	??_ISR+6,fsr2l
  5182  0000F2  C028  FFE2         	movff	??_ISR+5,fsr1h
  5183  0000F6  C027  FFE1         	movff	??_ISR+4,fsr1l
  5184  0000FA  C026  FFEA         	movff	??_ISR+3,fsr0h
  5185  0000FE  C025  FFE9         	movff	??_ISR+2,fsr0l
  5186  000102  C024  FFFB         	movff	??_ISR+1,pclatu
  5187  000106  C023  FFFA         	movff	??_ISR,pclath
  5188  00010A  925B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5189  00010C  0011               	retfie		f
  5190  00010E                     __end_of_ISR:
  5191                           	opt stack 0
  5192                           pclatu	equ	0xFFB
  5193                           pclath	equ	0xFFA
  5194                           tblptru	equ	0xFF8
  5195                           tblptrh	equ	0xFF7
  5196                           tblptrl	equ	0xFF6
  5197                           tablat	equ	0xFF5
  5198                           prodh	equ	0xFF4
  5199                           prodl	equ	0xFF3
  5200                           intcon	equ	0xFF2
  5201                           intcon2	equ	0xFF1
  5202                           intcon3	equ	0xFF0
  5203                           postinc0	equ	0xFEE
  5204                           fsr0h	equ	0xFEA
  5205                           fsr0l	equ	0xFE9
  5206                           wreg	equ	0xFE8
  5207                           plusw1	equ	0xFE3
  5208                           fsr1h	equ	0xFE2
  5209                           fsr1l	equ	0xFE1
  5210                           indf2	equ	0xFDF
  5211                           postinc2	equ	0xFDE
  5212                           postdec2	equ	0xFDD
  5213                           plusw2	equ	0xFDB
  5214                           fsr2h	equ	0xFDA
  5215                           fsr2l	equ	0xFD9
  5216                           status	equ	0xFD8
  5217                           
  5218 ;; *************** function i2_read_AD7147 *****************
  5219 ;; Defined at:
  5220 ;;		line 307 in file "AD7147.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;  DataBuffer      2   22[COMRAM] PTR unsigned int 
  5223 ;;		 -> interrupt_values_cdc2(6), interrupt_values_cdc1(6), 
  5224 ;;  RegisterStar    2   24[COMRAM] unsigned int 
  5225 ;;  NumberOfRegi    2   26[COMRAM] unsigned int 
  5226 ;;  cdc             2   28[COMRAM] unsigned int 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  read_AD7147     2   32[COMRAM] unsigned int 
  5229 ;;  read_AD7147     2   30[COMRAM] unsigned int 
  5230 ;; Return value:  Size  Location     Type
  5231 ;;                  1    wreg      void 
  5232 ;; Registers used:
  5233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5234 ;; Tracked objects:
  5235 ;;		On entry : 0/0
  5236 ;;		On exit  : 0/0
  5237 ;;		Unchanged: 0/0
  5238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5239 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5240 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5242 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5243 ;;Total ram usage:       12 bytes
  5244 ;; Hardware stack levels used:    1
  5245 ;; Hardware stack levels required when called:    1
  5246 ;; This function calls:
  5247 ;;		i2_get_CDC
  5248 ;;		i2_w16_r16_spi
  5249 ;; This function is called by:
  5250 ;;		_ISR
  5251 ;; This function uses a non-reentrant model
  5252 ;;
  5253                           
  5254                           	psect	text26
  5255  000FF4                     __ptext26:
  5256                           	opt stack 0
  5257  000FF4                     i2_read_AD7147:
  5258                           	opt stack 25
  5259                           
  5260                           ;AD7147.c: 309: get_CDC(cdc,0);
  5261                           
  5262                           ;incstack = 0
  5263  000FF4  C01D  F001         	movff	i2read_AD7147@cdc,i2get_CDC@cdc
  5264  000FF8  C01E  F002         	movff	i2read_AD7147@cdc+1,i2get_CDC@cdc+1
  5265  000FFC  0E00               	movlw	0
  5266  000FFE  6E04               	movwf	i2get_CDC@state+1,c
  5267  001000  0E00               	movlw	0
  5268  001002  6E03               	movwf	i2get_CDC@state,c
  5269  001004  ECA5  F009         	call	i2_get_CDC	;wreg free
  5270                           
  5271                           ;AD7147.c: 310: unsigned int Register_Values = 0xE400 + RegisterStartAddress;
  5272  001008  0E00               	movlw	0
  5273  00100A  2419               	addwf	i2read_AD7147@RegisterStartAddress,w,c
  5274  00100C  6E1F               	movwf	i2read_AD7147@Register_Values,c
  5275  00100E  0EE4               	movlw	228
  5276  001010  201A               	addwfc	i2read_AD7147@RegisterStartAddress+1,w,c
  5277  001012  6E20               	movwf	i2read_AD7147@Register_Values+1,c
  5278                           
  5279                           ;AD7147.c: 311: for (unsigned int i=0; i<NumberOfRegisters; i++)
  5280  001014  0E00               	movlw	0
  5281  001016  6E22               	movwf	i2read_AD7147@i+1,c
  5282  001018  0E00               	movlw	0
  5283  00101A  6E21               	movwf	i2read_AD7147@i,c
  5284  00101C  D017               	goto	i2l32
  5285  00101E                     
  5286                           ;AD7147.c: 312: {
  5287                           ;AD7147.c: 313: DataBuffer[i]=w16_r16_spi(Register_Values+i);
  5288  00101E  5021               	movf	i2read_AD7147@i,w,c
  5289  001020  241F               	addwf	i2read_AD7147@Register_Values,w,c
  5290  001022  6E01               	movwf	i2w16_r16_spi@address,c
  5291  001024  5022               	movf	i2read_AD7147@i+1,w,c
  5292  001026  2020               	addwfc	i2read_AD7147@Register_Values+1,w,c
  5293  001028  6E02               	movwf	i2w16_r16_spi@address+1,c
  5294  00102A  ECBB  F007         	call	i2_w16_r16_spi	;wreg free
  5295  00102E  90D8               	bcf	status,0,c
  5296  001030  3421               	rlcf	i2read_AD7147@i,w,c
  5297  001032  6ED9               	movwf	fsr2l,c
  5298  001034  3422               	rlcf	i2read_AD7147@i+1,w,c
  5299  001036  6EDA               	movwf	fsr2h,c
  5300  001038  5017               	movf	i2read_AD7147@DataBuffer,w,c
  5301  00103A  26D9               	addwf	fsr2l,f,c
  5302  00103C  5018               	movf	i2read_AD7147@DataBuffer+1,w,c
  5303  00103E  22DA               	addwfc	fsr2h,f,c
  5304  001040  C001  FFDE         	movff	?i2_w16_r16_spi,postinc2
  5305  001044  C002  FFDD         	movff	?i2_w16_r16_spi+1,postdec2
  5306  001048  4A21               	infsnz	i2read_AD7147@i,f,c
  5307  00104A  2A22               	incf	i2read_AD7147@i+1,f,c
  5308  00104C                     i2l32:
  5309  00104C  501B               	movf	i2read_AD7147@NumberOfRegisters,w,c
  5310  00104E  5C21               	subwf	i2read_AD7147@i,w,c
  5311  001050  501C               	movf	i2read_AD7147@NumberOfRegisters+1,w,c
  5312  001052  5822               	subwfb	i2read_AD7147@i+1,w,c
  5313  001054  A0D8               	btfss	status,0,c
  5314  001056  D7E3               	goto	i2l33
  5315                           
  5316                           ;AD7147.c: 314: }
  5317                           ;AD7147.c: 315: get_CDC(cdc,1);
  5318  001058  C01D  F001         	movff	i2read_AD7147@cdc,i2get_CDC@cdc
  5319  00105C  C01E  F002         	movff	i2read_AD7147@cdc+1,i2get_CDC@cdc+1
  5320  001060  0E00               	movlw	0
  5321  001062  6E04               	movwf	i2get_CDC@state+1,c
  5322  001064  0E01               	movlw	1
  5323  001066  6E03               	movwf	i2get_CDC@state,c
  5324  001068  ECA5  F009         	call	i2_get_CDC	;wreg free
  5325  00106C  0012               	return		;funcret
  5326  00106E                     __end_ofi2_read_AD7147:
  5327                           	opt stack 0
  5328                           pclatu	equ	0xFFB
  5329                           pclath	equ	0xFFA
  5330                           tblptru	equ	0xFF8
  5331                           tblptrh	equ	0xFF7
  5332                           tblptrl	equ	0xFF6
  5333                           tablat	equ	0xFF5
  5334                           prodh	equ	0xFF4
  5335                           prodl	equ	0xFF3
  5336                           intcon	equ	0xFF2
  5337                           intcon2	equ	0xFF1
  5338                           intcon3	equ	0xFF0
  5339                           postinc0	equ	0xFEE
  5340                           fsr0h	equ	0xFEA
  5341                           fsr0l	equ	0xFE9
  5342                           wreg	equ	0xFE8
  5343                           plusw1	equ	0xFE3
  5344                           fsr1h	equ	0xFE2
  5345                           fsr1l	equ	0xFE1
  5346                           indf2	equ	0xFDF
  5347                           postinc2	equ	0xFDE
  5348                           postdec2	equ	0xFDD
  5349                           plusw2	equ	0xFDB
  5350                           fsr2h	equ	0xFDA
  5351                           fsr2l	equ	0xFD9
  5352                           status	equ	0xFD8
  5353                           
  5354 ;; *************** function _read_cdc2 *****************
  5355 ;; Defined at:
  5356 ;;		line 359 in file "AD7147.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;  sensor_value    2   22[COMRAM] PTR unsigned int 
  5359 ;;		 -> sensor_values(48), 
  5360 ;; Auto vars:     Size  Location     Type
  5361 ;;  i               2   24[COMRAM] unsigned int 
  5362 ;; Return value:  Size  Location     Type
  5363 ;;                  1    wreg      void 
  5364 ;; Registers used:
  5365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5366 ;; Tracked objects:
  5367 ;;		On entry : 0/0
  5368 ;;		On exit  : 0/0
  5369 ;;		Unchanged: 0/0
  5370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5371 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5372 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5374 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5375 ;;Total ram usage:        4 bytes
  5376 ;; Hardware stack levels used:    1
  5377 ;; Hardware stack levels required when called:    1
  5378 ;; This function calls:
  5379 ;;		_r16_spi
  5380 ;;		i2_get_CDC
  5381 ;;		i2_w16_r16_spi
  5382 ;; This function is called by:
  5383 ;;		_ISR
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           	psect	text27
  5388  000DF6                     __ptext27:
  5389                           	opt stack 0
  5390  000DF6                     _read_cdc2:
  5391                           	opt stack 25
  5392                           
  5393                           ;AD7147.c: 361: get_CDC(2,0);
  5394                           
  5395                           ;incstack = 0
  5396  000DF6  0E00               	movlw	0
  5397  000DF8  6E02               	movwf	i2get_CDC@cdc+1,c
  5398  000DFA  0E02               	movlw	2
  5399  000DFC  6E01               	movwf	i2get_CDC@cdc,c
  5400  000DFE  0E00               	movlw	0
  5401  000E00  6E04               	movwf	i2get_CDC@state+1,c
  5402  000E02  0E00               	movlw	0
  5403  000E04  6E03               	movwf	i2get_CDC@state,c
  5404  000E06  ECA5  F009         	call	i2_get_CDC	;wreg free
  5405                           
  5406                           ;AD7147.c: 362: sensor_values[12] = w16_r16_spi(0xE400 + 0x00B);
  5407  000E0A  0EE4               	movlw	228
  5408  000E0C  6E02               	movwf	i2w16_r16_spi@address+1,c
  5409  000E0E  0E0B               	movlw	11
  5410  000E10  6E01               	movwf	i2w16_r16_spi@address,c
  5411  000E12  ECBB  F007         	call	i2_w16_r16_spi	;wreg free
  5412  000E16  EE20 F018          	lfsr	2,24
  5413  000E1A  5017               	movf	read_cdc2@sensor_values,w,c
  5414  000E1C  26D9               	addwf	fsr2l,f,c
  5415  000E1E  5018               	movf	read_cdc2@sensor_values+1,w,c
  5416  000E20  22DA               	addwfc	fsr2h,f,c
  5417  000E22  C001  FFDE         	movff	?i2_w16_r16_spi,postinc2
  5418  000E26  C002  FFDD         	movff	?i2_w16_r16_spi+1,postdec2
  5419                           
  5420                           ;AD7147.c: 363: for(unsigned int i = 13; i<17; i++)
  5421  000E2A  0E00               	movlw	0
  5422  000E2C  6E1A               	movwf	read_cdc2@i+1,c
  5423  000E2E  0E0D               	movlw	13
  5424  000E30  6E19               	movwf	read_cdc2@i,c
  5425  000E32                     i2l2247:
  5426  000E32  501A               	movf	read_cdc2@i+1,w,c
  5427  000E34  E116               	bnz	i2l2257
  5428  000E36  0E11               	movlw	17
  5429  000E38  5C19               	subwf	read_cdc2@i,w,c
  5430  000E3A  B0D8               	btfsc	status,0,c
  5431  000E3C  D012               	goto	i2u105_40
  5432                           
  5433                           ;AD7147.c: 364: {
  5434                           ;AD7147.c: 365: sensor_values[i] = r16_spi();
  5435  000E3E  ECCA  F008         	call	_r16_spi	;wreg free
  5436  000E42  90D8               	bcf	status,0,c
  5437  000E44  3419               	rlcf	read_cdc2@i,w,c
  5438  000E46  6ED9               	movwf	fsr2l,c
  5439  000E48  341A               	rlcf	read_cdc2@i+1,w,c
  5440  000E4A  6EDA               	movwf	fsr2h,c
  5441  000E4C  5017               	movf	read_cdc2@sensor_values,w,c
  5442  000E4E  26D9               	addwf	fsr2l,f,c
  5443  000E50  5018               	movf	read_cdc2@sensor_values+1,w,c
  5444  000E52  22DA               	addwfc	fsr2h,f,c
  5445  000E54  C001  FFDE         	movff	?_r16_spi,postinc2
  5446  000E58  C002  FFDD         	movff	?_r16_spi+1,postdec2
  5447  000E5C  4A19               	infsnz	read_cdc2@i,f,c
  5448  000E5E  2A1A               	incf	read_cdc2@i+1,f,c
  5449  000E60  D7E8               	goto	i2l2247
  5450  000E62                     i2u105_40:
  5451  000E62                     i2l2257:
  5452                           
  5453                           ;AD7147.c: 366: }
  5454                           ;AD7147.c: 367: get_CDC(2,1);
  5455  000E62  0E00               	movlw	0
  5456  000E64  6E02               	movwf	i2get_CDC@cdc+1,c
  5457  000E66  0E02               	movlw	2
  5458  000E68  6E01               	movwf	i2get_CDC@cdc,c
  5459  000E6A  0E00               	movlw	0
  5460  000E6C  6E04               	movwf	i2get_CDC@state+1,c
  5461  000E6E  0E01               	movlw	1
  5462  000E70  6E03               	movwf	i2get_CDC@state,c
  5463  000E72  ECA5  F009         	call	i2_get_CDC	;wreg free
  5464  000E76  0012               	return		;funcret
  5465  000E78                     __end_of_read_cdc2:
  5466                           	opt stack 0
  5467                           pclatu	equ	0xFFB
  5468                           pclath	equ	0xFFA
  5469                           tblptru	equ	0xFF8
  5470                           tblptrh	equ	0xFF7
  5471                           tblptrl	equ	0xFF6
  5472                           tablat	equ	0xFF5
  5473                           prodh	equ	0xFF4
  5474                           prodl	equ	0xFF3
  5475                           intcon	equ	0xFF2
  5476                           intcon2	equ	0xFF1
  5477                           intcon3	equ	0xFF0
  5478                           postinc0	equ	0xFEE
  5479                           fsr0h	equ	0xFEA
  5480                           fsr0l	equ	0xFE9
  5481                           wreg	equ	0xFE8
  5482                           plusw1	equ	0xFE3
  5483                           fsr1h	equ	0xFE2
  5484                           fsr1l	equ	0xFE1
  5485                           indf2	equ	0xFDF
  5486                           postinc2	equ	0xFDE
  5487                           postdec2	equ	0xFDD
  5488                           plusw2	equ	0xFDB
  5489                           fsr2h	equ	0xFDA
  5490                           fsr2l	equ	0xFD9
  5491                           status	equ	0xFD8
  5492                           
  5493 ;; *************** function _read_cdc1 *****************
  5494 ;; Defined at:
  5495 ;;		line 348 in file "AD7147.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;  sensor_value    2   22[COMRAM] PTR unsigned int 
  5498 ;;		 -> sensor_values(48), 
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;  i               2   24[COMRAM] unsigned int 
  5501 ;; Return value:  Size  Location     Type
  5502 ;;                  1    wreg      void 
  5503 ;; Registers used:
  5504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5505 ;; Tracked objects:
  5506 ;;		On entry : 0/0
  5507 ;;		On exit  : 0/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5510 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5511 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5513 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5514 ;;Total ram usage:        4 bytes
  5515 ;; Hardware stack levels used:    1
  5516 ;; Hardware stack levels required when called:    1
  5517 ;; This function calls:
  5518 ;;		_r16_spi
  5519 ;;		i2_get_CDC
  5520 ;;		i2_w16_r16_spi
  5521 ;; This function is called by:
  5522 ;;		_ISR
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           	psect	text28
  5527  000EF8                     __ptext28:
  5528                           	opt stack 0
  5529  000EF8                     _read_cdc1:
  5530                           	opt stack 25
  5531                           
  5532                           ;AD7147.c: 350: get_CDC(1,0);
  5533                           
  5534                           ;incstack = 0
  5535  000EF8  0E00               	movlw	0
  5536  000EFA  6E02               	movwf	i2get_CDC@cdc+1,c
  5537  000EFC  0E01               	movlw	1
  5538  000EFE  6E01               	movwf	i2get_CDC@cdc,c
  5539  000F00  0E00               	movlw	0
  5540  000F02  6E04               	movwf	i2get_CDC@state+1,c
  5541  000F04  0E00               	movlw	0
  5542  000F06  6E03               	movwf	i2get_CDC@state,c
  5543  000F08  ECA5  F009         	call	i2_get_CDC	;wreg free
  5544                           
  5545                           ;AD7147.c: 351: sensor_values[0] = w16_r16_spi(0xE400 + 0x00B);
  5546  000F0C  0EE4               	movlw	228
  5547  000F0E  6E02               	movwf	i2w16_r16_spi@address+1,c
  5548  000F10  0E0B               	movlw	11
  5549  000F12  6E01               	movwf	i2w16_r16_spi@address,c
  5550  000F14  ECBB  F007         	call	i2_w16_r16_spi	;wreg free
  5551  000F18  C017  FFD9         	movff	read_cdc1@sensor_values,fsr2l
  5552  000F1C  C018  FFDA         	movff	read_cdc1@sensor_values+1,fsr2h
  5553  000F20  C001  FFDE         	movff	?i2_w16_r16_spi,postinc2
  5554  000F24  C002  FFDD         	movff	?i2_w16_r16_spi+1,postdec2
  5555                           
  5556                           ;AD7147.c: 352: for(unsigned int i = 1; i<6; i++)
  5557  000F28  0E00               	movlw	0
  5558  000F2A  6E1A               	movwf	read_cdc1@i+1,c
  5559  000F2C  0E01               	movlw	1
  5560  000F2E  6E19               	movwf	read_cdc1@i,c
  5561  000F30                     i2l2229:
  5562  000F30  501A               	movf	read_cdc1@i+1,w,c
  5563  000F32  E116               	bnz	i2l2239
  5564  000F34  0E06               	movlw	6
  5565  000F36  5C19               	subwf	read_cdc1@i,w,c
  5566  000F38  B0D8               	btfsc	status,0,c
  5567  000F3A  D012               	goto	i2u103_40
  5568                           
  5569                           ;AD7147.c: 353: {
  5570                           ;AD7147.c: 354: sensor_values[i] = r16_spi();
  5571  000F3C  ECCA  F008         	call	_r16_spi	;wreg free
  5572  000F40  90D8               	bcf	status,0,c
  5573  000F42  3419               	rlcf	read_cdc1@i,w,c
  5574  000F44  6ED9               	movwf	fsr2l,c
  5575  000F46  341A               	rlcf	read_cdc1@i+1,w,c
  5576  000F48  6EDA               	movwf	fsr2h,c
  5577  000F4A  5017               	movf	read_cdc1@sensor_values,w,c
  5578  000F4C  26D9               	addwf	fsr2l,f,c
  5579  000F4E  5018               	movf	read_cdc1@sensor_values+1,w,c
  5580  000F50  22DA               	addwfc	fsr2h,f,c
  5581  000F52  C001  FFDE         	movff	?_r16_spi,postinc2
  5582  000F56  C002  FFDD         	movff	?_r16_spi+1,postdec2
  5583  000F5A  4A19               	infsnz	read_cdc1@i,f,c
  5584  000F5C  2A1A               	incf	read_cdc1@i+1,f,c
  5585  000F5E  D7E8               	goto	i2l2229
  5586  000F60                     i2u103_40:
  5587  000F60                     i2l2239:
  5588                           
  5589                           ;AD7147.c: 355: }
  5590                           ;AD7147.c: 356: get_CDC(1,1);
  5591  000F60  0E00               	movlw	0
  5592  000F62  6E02               	movwf	i2get_CDC@cdc+1,c
  5593  000F64  0E01               	movlw	1
  5594  000F66  6E01               	movwf	i2get_CDC@cdc,c
  5595  000F68  0E00               	movlw	0
  5596  000F6A  6E04               	movwf	i2get_CDC@state+1,c
  5597  000F6C  0E01               	movlw	1
  5598  000F6E  6E03               	movwf	i2get_CDC@state,c
  5599  000F70  ECA5  F009         	call	i2_get_CDC	;wreg free
  5600  000F74  0012               	return		;funcret
  5601  000F76                     __end_of_read_cdc1:
  5602                           	opt stack 0
  5603                           pclatu	equ	0xFFB
  5604                           pclath	equ	0xFFA
  5605                           tblptru	equ	0xFF8
  5606                           tblptrh	equ	0xFF7
  5607                           tblptrl	equ	0xFF6
  5608                           tablat	equ	0xFF5
  5609                           prodh	equ	0xFF4
  5610                           prodl	equ	0xFF3
  5611                           intcon	equ	0xFF2
  5612                           intcon2	equ	0xFF1
  5613                           intcon3	equ	0xFF0
  5614                           postinc0	equ	0xFEE
  5615                           fsr0h	equ	0xFEA
  5616                           fsr0l	equ	0xFE9
  5617                           wreg	equ	0xFE8
  5618                           plusw1	equ	0xFE3
  5619                           fsr1h	equ	0xFE2
  5620                           fsr1l	equ	0xFE1
  5621                           indf2	equ	0xFDF
  5622                           postinc2	equ	0xFDE
  5623                           postdec2	equ	0xFDD
  5624                           plusw2	equ	0xFDB
  5625                           fsr2h	equ	0xFDA
  5626                           fsr2l	equ	0xFD9
  5627                           status	equ	0xFD8
  5628                           
  5629 ;; *************** function i2_w16_r16_spi *****************
  5630 ;; Defined at:
  5631 ;;		line 89 in file "spi.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;  address         2    0[COMRAM] unsigned int 
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;  w16_r16_spi     2   20[COMRAM] unsigned int 
  5636 ;;  w16_r16_spi     2   18[COMRAM] unsigned int 
  5637 ;;  w16_r16_spi     2   16[COMRAM] unsigned int 
  5638 ;;  w16_r16_spi     2   14[COMRAM] unsigned int 
  5639 ;;  w16_r16_spi     2   12[COMRAM] unsigned int 
  5640 ;;  w16_r16_spi     2   10[COMRAM] unsigned int 
  5641 ;;  w16_r16_spi     2    8[COMRAM] unsigned int 
  5642 ;;  w16_r16_spi     2    6[COMRAM] unsigned int 
  5643 ;;  w16_r16_spi     2    4[COMRAM] unsigned int 
  5644 ;; Return value:  Size  Location     Type
  5645 ;;                  2    0[COMRAM] unsigned int 
  5646 ;; Registers used:
  5647 ;;		wreg, status,2, status,0
  5648 ;; Tracked objects:
  5649 ;;		On entry : 0/0
  5650 ;;		On exit  : 0/0
  5651 ;;		Unchanged: 0/0
  5652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5653 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5654 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5655 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5656 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5657 ;;Total ram usage:       22 bytes
  5658 ;; Hardware stack levels used:    1
  5659 ;; This function calls:
  5660 ;;		Nothing
  5661 ;; This function is called by:
  5662 ;;		_read_cdc1
  5663 ;;		_read_cdc2
  5664 ;;		i2_read_AD7147
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           	psect	text29
  5669  000F76                     __ptext29:
  5670                           	opt stack 0
  5671  000F76                     i2_w16_r16_spi:
  5672                           	opt stack 25
  5673                           
  5674                           ;spi.c: 91: unsigned int address_low, address_high, result;
  5675                           ;spi.c: 92: unsigned int blank_low = 0x000;
  5676                           
  5677                           ;incstack = 0
  5678  000F76  0E00               	movlw	0
  5679  000F78  6E10               	movwf	i2w16_r16_spi@blank_low+1,c
  5680  000F7A  0E00               	movlw	0
  5681  000F7C  6E0F               	movwf	i2w16_r16_spi@blank_low,c
  5682                           
  5683                           ;spi.c: 93: unsigned int blank_high = 0x000;
  5684  000F7E  0E00               	movlw	0
  5685  000F80  6E12               	movwf	i2w16_r16_spi@blank_high+1,c
  5686  000F82  0E00               	movlw	0
  5687  000F84  6E11               	movwf	i2w16_r16_spi@blank_high,c
  5688                           
  5689                           ;spi.c: 94: unsigned int p1, p2, p3, p4;
  5690                           ;spi.c: 96: address_low = address & 0xFF;
  5691  000F86  5001               	movf	i2w16_r16_spi@address,w,c
  5692  000F88  6E09               	movwf	i2w16_r16_spi@address_low,c
  5693  000F8A  6A0A               	clrf	i2w16_r16_spi@address_low+1,c
  5694                           
  5695                           ;spi.c: 97: address_high = (address >> 8) & 0xFF;
  5696  000F8C  C001  F003         	movff	i2w16_r16_spi@address,??i2_w16_r16_spi
  5697  000F90  C002  F004         	movff	i2w16_r16_spi@address+1,??i2_w16_r16_spi+1
  5698  000F94  C004  F003         	movff	??i2_w16_r16_spi+1,??i2_w16_r16_spi
  5699  000F98  6A04               	clrf	??i2_w16_r16_spi+1,c
  5700  000F9A  5003               	movf	??i2_w16_r16_spi,w,c
  5701  000F9C  6E0B               	movwf	i2w16_r16_spi@address_high,c
  5702  000F9E  6A0C               	clrf	i2w16_r16_spi@address_high+1,c
  5703                           
  5704                           ;spi.c: 99: SSPBUF = address_high;
  5705  000FA0  C00B  FFC9         	movff	i2w16_r16_spi@address_high,4041	;volatile
  5706  000FA4  A0C7               	btfss	4039,0,c	;volatile
  5707  000FA6  D7FE               	goto	i2l299
  5708                           
  5709                           ;spi.c: 101: p1 = SSPBUF;
  5710  000FA8  CFC9 F005          	movff	4041,i2w16_r16_spi@p1	;volatile
  5711  000FAC  6A06               	clrf	i2w16_r16_spi@p1+1,c
  5712                           
  5713                           ;spi.c: 103: SSPBUF = address_low;
  5714  000FAE  C009  FFC9         	movff	i2w16_r16_spi@address_low,4041	;volatile
  5715  000FB2  A0C7               	btfss	4039,0,c	;volatile
  5716  000FB4  D7FE               	goto	i2l302
  5717                           
  5718                           ;spi.c: 105: p2 = SSPBUF;
  5719  000FB6  CFC9 F007          	movff	4041,i2w16_r16_spi@p2	;volatile
  5720  000FBA  6A08               	clrf	i2w16_r16_spi@p2+1,c
  5721                           
  5722                           ;spi.c: 107: SSPBUF = blank_high;
  5723  000FBC  C011  FFC9         	movff	i2w16_r16_spi@blank_high,4041	;volatile
  5724  000FC0  A0C7               	btfss	4039,0,c	;volatile
  5725  000FC2  D7FE               	goto	i2l305
  5726                           
  5727                           ;spi.c: 109: p3 = SSPBUF;
  5728  000FC4  CFC9 F013          	movff	4041,i2w16_r16_spi@p3	;volatile
  5729  000FC8  6A14               	clrf	i2w16_r16_spi@p3+1,c
  5730                           
  5731                           ;spi.c: 111: SSPBUF = blank_low;
  5732  000FCA  C00F  FFC9         	movff	i2w16_r16_spi@blank_low,4041	;volatile
  5733  000FCE  A0C7               	btfss	4039,0,c	;volatile
  5734  000FD0  D7FE               	goto	i2l308
  5735                           
  5736                           ;spi.c: 113: p4 = SSPBUF;
  5737  000FD2  CFC9 F015          	movff	4041,i2w16_r16_spi@p4	;volatile
  5738  000FD6  6A16               	clrf	i2w16_r16_spi@p4+1,c
  5739                           
  5740                           ;spi.c: 115: result = (p3 << 8) + p4;
  5741  000FD8  5013               	movf	i2w16_r16_spi@p3,w,c
  5742  000FDA  6E04               	movwf	(??i2_w16_r16_spi+1)& (0+255),c
  5743  000FDC  6A03               	clrf	??i2_w16_r16_spi& (0+255),c
  5744  000FDE  5015               	movf	i2w16_r16_spi@p4,w,c
  5745  000FE0  2403               	addwf	??i2_w16_r16_spi,w,c
  5746  000FE2  6E0D               	movwf	i2w16_r16_spi@result,c
  5747  000FE4  5016               	movf	i2w16_r16_spi@p4+1,w,c
  5748  000FE6  2004               	addwfc	??i2_w16_r16_spi+1,w,c
  5749  000FE8  6E0E               	movwf	i2w16_r16_spi@result+1,c
  5750                           
  5751                           ;spi.c: 116: return result;
  5752  000FEA  C00D  F001         	movff	i2w16_r16_spi@result,?i2_w16_r16_spi
  5753  000FEE  C00E  F002         	movff	i2w16_r16_spi@result+1,?i2_w16_r16_spi+1
  5754  000FF2  0012               	return	
  5755  000FF4                     __end_ofi2_w16_r16_spi:
  5756                           	opt stack 0
  5757                           pclatu	equ	0xFFB
  5758                           pclath	equ	0xFFA
  5759                           tblptru	equ	0xFF8
  5760                           tblptrh	equ	0xFF7
  5761                           tblptrl	equ	0xFF6
  5762                           tablat	equ	0xFF5
  5763                           prodh	equ	0xFF4
  5764                           prodl	equ	0xFF3
  5765                           intcon	equ	0xFF2
  5766                           intcon2	equ	0xFF1
  5767                           intcon3	equ	0xFF0
  5768                           postinc0	equ	0xFEE
  5769                           fsr0h	equ	0xFEA
  5770                           fsr0l	equ	0xFE9
  5771                           wreg	equ	0xFE8
  5772                           plusw1	equ	0xFE3
  5773                           fsr1h	equ	0xFE2
  5774                           fsr1l	equ	0xFE1
  5775                           indf2	equ	0xFDF
  5776                           postinc2	equ	0xFDE
  5777                           postdec2	equ	0xFDD
  5778                           plusw2	equ	0xFDB
  5779                           fsr2h	equ	0xFDA
  5780                           fsr2l	equ	0xFD9
  5781                           status	equ	0xFD8
  5782                           
  5783 ;; *************** function i2_get_CDC *****************
  5784 ;; Defined at:
  5785 ;;		line 424 in file "AD7147.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;  cdc             2    0[COMRAM] unsigned int 
  5788 ;;  state           2    2[COMRAM] unsigned int 
  5789 ;; Auto vars:     Size  Location     Type
  5790 ;;		None
  5791 ;; Return value:  Size  Location     Type
  5792 ;;                  1    wreg      void 
  5793 ;; Registers used:
  5794 ;;		wreg, status,2, status,0
  5795 ;; Tracked objects:
  5796 ;;		On entry : 0/0
  5797 ;;		On exit  : 0/0
  5798 ;;		Unchanged: 0/0
  5799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5800 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5803 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5804 ;;Total ram usage:        4 bytes
  5805 ;; Hardware stack levels used:    1
  5806 ;; This function calls:
  5807 ;;		Nothing
  5808 ;; This function is called by:
  5809 ;;		_read_cdc1
  5810 ;;		_read_cdc2
  5811 ;;		i2_read_AD7147
  5812 ;; This function uses a non-reentrant model
  5813 ;;
  5814                           
  5815                           	psect	text30
  5816  00134A                     __ptext30:
  5817                           	opt stack 0
  5818  00134A                     i2_get_CDC:
  5819                           	opt stack 25
  5820                           
  5821                           ;AD7147.c: 426: if (state == 1)
  5822                           
  5823                           ;incstack = 0
  5824  00134A  0403               	decf	i2get_CDC@state,w,c
  5825  00134C  1004               	iorwf	i2get_CDC@state+1,w,c
  5826  00134E  A4D8               	btfss	status,2,c
  5827  001350  D003               	goto	i2l75
  5828                           
  5829                           ;AD7147.c: 427: {
  5830                           ;AD7147.c: 428: LATCbits.LATC1 = 1;
  5831  001352  828B               	bsf	3979,1,c	;volatile
  5832                           
  5833                           ;AD7147.c: 429: LATCbits.LATC0 = 1;
  5834  001354  808B               	bsf	3979,0,c	;volatile
  5835                           
  5836                           ;AD7147.c: 430: }
  5837  001356  0012               	return	
  5838  001358                     i2l75:
  5839                           
  5840                           ;AD7147.c: 431: else
  5841                           ;AD7147.c: 432: {
  5842                           ;AD7147.c: 433: if (cdc == 1)
  5843  001358  0401               	decf	i2get_CDC@cdc,w,c
  5844  00135A  1002               	iorwf	i2get_CDC@cdc+1,w,c
  5845  00135C  A4D8               	btfss	status,2,c
  5846  00135E  D003               	goto	i2l77
  5847                           
  5848                           ;AD7147.c: 434: {
  5849                           ;AD7147.c: 435: LATCbits.LATC1 = 0;
  5850  001360  928B               	bcf	3979,1,c	;volatile
  5851                           
  5852                           ;AD7147.c: 436: LATCbits.LATC0 = 1;
  5853  001362  808B               	bsf	3979,0,c	;volatile
  5854                           
  5855                           ;AD7147.c: 437: }
  5856  001364  0012               	return	
  5857  001366                     i2l77:
  5858                           
  5859                           ;AD7147.c: 438: else
  5860                           ;AD7147.c: 439: {
  5861                           ;AD7147.c: 440: LATCbits.LATC0 = 0;
  5862  001366  908B               	bcf	3979,0,c	;volatile
  5863                           
  5864                           ;AD7147.c: 441: LATCbits.LATC1 = 1;
  5865  001368  828B               	bsf	3979,1,c	;volatile
  5866  00136A  0012               	return	
  5867  00136C                     __end_ofi2_get_CDC:
  5868                           	opt stack 0
  5869                           pclatu	equ	0xFFB
  5870                           pclath	equ	0xFFA
  5871                           tblptru	equ	0xFF8
  5872                           tblptrh	equ	0xFF7
  5873                           tblptrl	equ	0xFF6
  5874                           tablat	equ	0xFF5
  5875                           prodh	equ	0xFF4
  5876                           prodl	equ	0xFF3
  5877                           intcon	equ	0xFF2
  5878                           intcon2	equ	0xFF1
  5879                           intcon3	equ	0xFF0
  5880                           postinc0	equ	0xFEE
  5881                           fsr0h	equ	0xFEA
  5882                           fsr0l	equ	0xFE9
  5883                           wreg	equ	0xFE8
  5884                           plusw1	equ	0xFE3
  5885                           fsr1h	equ	0xFE2
  5886                           fsr1l	equ	0xFE1
  5887                           indf2	equ	0xFDF
  5888                           postinc2	equ	0xFDE
  5889                           postdec2	equ	0xFDD
  5890                           plusw2	equ	0xFDB
  5891                           fsr2h	equ	0xFDA
  5892                           fsr2l	equ	0xFD9
  5893                           status	equ	0xFD8
  5894                           
  5895 ;; *************** function _r16_spi *****************
  5896 ;; Defined at:
  5897 ;;		line 70 in file "spi.c"
  5898 ;; Parameters:    Size  Location     Type
  5899 ;;		None
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;  result          2   12[COMRAM] unsigned int 
  5902 ;;  p2              2   10[COMRAM] unsigned int 
  5903 ;;  p1              2    8[COMRAM] unsigned int 
  5904 ;;  blank_high      2    6[COMRAM] unsigned int 
  5905 ;;  blank_low       2    4[COMRAM] unsigned int 
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  2    0[COMRAM] unsigned int 
  5908 ;; Registers used:
  5909 ;;		wreg, status,2, status,0
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5915 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5916 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5917 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5918 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5919 ;;Total ram usage:       14 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; This function calls:
  5922 ;;		Nothing
  5923 ;; This function is called by:
  5924 ;;		_read_cdc1
  5925 ;;		_read_cdc2
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           	psect	text31
  5930  001194                     __ptext31:
  5931                           	opt stack 0
  5932  001194                     _r16_spi:
  5933                           	opt stack 25
  5934                           
  5935                           ;spi.c: 72: unsigned int blank_low = 0x000;
  5936                           
  5937                           ;incstack = 0
  5938  001194  0E00               	movlw	0
  5939  001196  6E06               	movwf	r16_spi@blank_low+1,c
  5940  001198  0E00               	movlw	0
  5941  00119A  6E05               	movwf	r16_spi@blank_low,c
  5942                           
  5943                           ;spi.c: 73: unsigned int blank_high = 0x000;
  5944  00119C  0E00               	movlw	0
  5945  00119E  6E08               	movwf	r16_spi@blank_high+1,c
  5946  0011A0  0E00               	movlw	0
  5947  0011A2  6E07               	movwf	r16_spi@blank_high,c
  5948                           
  5949                           ;spi.c: 74: unsigned int p1, p2, result;
  5950                           ;spi.c: 77: SSPBUF = blank_high;
  5951  0011A4  C007  FFC9         	movff	r16_spi@blank_high,4041	;volatile
  5952  0011A8  A0C7               	btfss	4039,0,c	;volatile
  5953  0011AA  D7FE               	goto	i2l290
  5954                           
  5955                           ;spi.c: 79: p1 = SSPBUF;
  5956  0011AC  CFC9 F009          	movff	4041,r16_spi@p1	;volatile
  5957  0011B0  6A0A               	clrf	r16_spi@p1+1,c
  5958                           
  5959                           ;spi.c: 81: SSPBUF = blank_low;
  5960  0011B2  C005  FFC9         	movff	r16_spi@blank_low,4041	;volatile
  5961  0011B6  A0C7               	btfss	4039,0,c	;volatile
  5962  0011B8  D7FE               	goto	i2l293
  5963                           
  5964                           ;spi.c: 83: p2 = SSPBUF;
  5965  0011BA  CFC9 F00B          	movff	4041,r16_spi@p2	;volatile
  5966  0011BE  6A0C               	clrf	r16_spi@p2+1,c
  5967                           
  5968                           ;spi.c: 85: result = (p1 << 8) + p2;
  5969  0011C0  5009               	movf	r16_spi@p1,w,c
  5970  0011C2  6E04               	movwf	(??_r16_spi+1)& (0+255),c
  5971  0011C4  6A03               	clrf	??_r16_spi& (0+255),c
  5972  0011C6  500B               	movf	r16_spi@p2,w,c
  5973  0011C8  2403               	addwf	??_r16_spi,w,c
  5974  0011CA  6E0D               	movwf	r16_spi@result,c
  5975  0011CC  500C               	movf	r16_spi@p2+1,w,c
  5976  0011CE  2004               	addwfc	??_r16_spi+1,w,c
  5977  0011D0  6E0E               	movwf	r16_spi@result+1,c
  5978                           
  5979                           ;spi.c: 86: return result;
  5980  0011D2  C00D  F001         	movff	r16_spi@result,?_r16_spi
  5981  0011D6  C00E  F002         	movff	r16_spi@result+1,?_r16_spi+1
  5982  0011DA  0012               	return	
  5983  0011DC                     __end_of_r16_spi:
  5984                           	opt stack 0
  5985  0000                     pclatu	equ	0xFFB
  5986                           pclath	equ	0xFFA
  5987                           tblptru	equ	0xFF8
  5988                           tblptrh	equ	0xFF7
  5989                           tblptrl	equ	0xFF6
  5990                           tablat	equ	0xFF5
  5991                           prodh	equ	0xFF4
  5992                           prodl	equ	0xFF3
  5993                           intcon	equ	0xFF2
  5994                           intcon2	equ	0xFF1
  5995                           intcon3	equ	0xFF0
  5996                           postinc0	equ	0xFEE
  5997                           fsr0h	equ	0xFEA
  5998                           fsr0l	equ	0xFE9
  5999                           wreg	equ	0xFE8
  6000                           plusw1	equ	0xFE3
  6001                           fsr1h	equ	0xFE2
  6002                           fsr1l	equ	0xFE1
  6003                           indf2	equ	0xFDF
  6004                           postinc2	equ	0xFDE
  6005                           postdec2	equ	0xFDD
  6006                           plusw2	equ	0xFDB
  6007                           fsr2h	equ	0xFDA
  6008                           fsr2l	equ	0xFD9
  6009                           status	equ	0xFD8
  6010                           pclatu	equ	0xFFB
  6011                           pclath	equ	0xFFA
  6012                           tblptru	equ	0xFF8
  6013                           tblptrh	equ	0xFF7
  6014                           tblptrl	equ	0xFF6
  6015                           tablat	equ	0xFF5
  6016                           prodh	equ	0xFF4
  6017                           prodl	equ	0xFF3
  6018                           intcon	equ	0xFF2
  6019                           intcon2	equ	0xFF1
  6020                           intcon3	equ	0xFF0
  6021                           postinc0	equ	0xFEE
  6022                           fsr0h	equ	0xFEA
  6023                           fsr0l	equ	0xFE9
  6024                           wreg	equ	0xFE8
  6025                           plusw1	equ	0xFE3
  6026                           fsr1h	equ	0xFE2
  6027                           fsr1l	equ	0xFE1
  6028                           indf2	equ	0xFDF
  6029                           postinc2	equ	0xFDE
  6030                           postdec2	equ	0xFDD
  6031                           plusw2	equ	0xFDB
  6032                           fsr2h	equ	0xFDA
  6033                           fsr2l	equ	0xFD9
  6034                           status	equ	0xFD8
  6035                           
  6036                           	psect	rparam
  6037  0000                     pclatu	equ	0xFFB
  6038                           pclath	equ	0xFFA
  6039                           tblptru	equ	0xFF8
  6040                           tblptrh	equ	0xFF7
  6041                           tblptrl	equ	0xFF6
  6042                           tablat	equ	0xFF5
  6043                           prodh	equ	0xFF4
  6044                           prodl	equ	0xFF3
  6045                           intcon	equ	0xFF2
  6046                           intcon2	equ	0xFF1
  6047                           intcon3	equ	0xFF0
  6048                           postinc0	equ	0xFEE
  6049                           fsr0h	equ	0xFEA
  6050                           fsr0l	equ	0xFE9
  6051                           wreg	equ	0xFE8
  6052                           plusw1	equ	0xFE3
  6053                           fsr1h	equ	0xFE2
  6054                           fsr1l	equ	0xFE1
  6055                           indf2	equ	0xFDF
  6056                           postinc2	equ	0xFDE
  6057                           postdec2	equ	0xFDD
  6058                           plusw2	equ	0xFDB
  6059                           fsr2h	equ	0xFDA
  6060                           fsr2l	equ	0xFD9
  6061                           status	equ	0xFD8
  6062                           
  6063                           	psect	temp
  6064  00005B                     btemp:
  6065                           	opt stack 0
  6066  00005B                     	ds	1
  6067  0000                     int$flags	set	btemp
  6068  0000                     wtemp6	set	btemp+1
  6069                           pclatu	equ	0xFFB
  6070                           pclath	equ	0xFFA
  6071                           tblptru	equ	0xFF8
  6072                           tblptrh	equ	0xFF7
  6073                           tblptrl	equ	0xFF6
  6074                           tablat	equ	0xFF5
  6075                           prodh	equ	0xFF4
  6076                           prodl	equ	0xFF3
  6077                           intcon	equ	0xFF2
  6078                           intcon2	equ	0xFF1
  6079                           intcon3	equ	0xFF0
  6080                           postinc0	equ	0xFEE
  6081                           fsr0h	equ	0xFEA
  6082                           fsr0l	equ	0xFE9
  6083                           wreg	equ	0xFE8
  6084                           plusw1	equ	0xFE3
  6085                           fsr1h	equ	0xFE2
  6086                           fsr1l	equ	0xFE1
  6087                           indf2	equ	0xFDF
  6088                           postinc2	equ	0xFDE
  6089                           postdec2	equ	0xFDD
  6090                           plusw2	equ	0xFDB
  6091                           fsr2h	equ	0xFDA
  6092                           fsr2l	equ	0xFD9
  6093                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         162
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     52      90
    BANK0           160     70     149
    BANK1           256      0      48
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 48
		 -> avail_sensors(BANK1[48]), 

    memset@p	PTR unsigned char  size(2) Largest target is 48
		 -> avail_sensors(BANK1[48]), 

    CDC_RESULT	PTR unsigned int [12] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__memset	PTR void  size(2) Largest target is 48
		 -> avail_sensors(BANK1[48]), 

    read_cdc2@sensor_values	PTR unsigned int  size(2) Largest target is 48
		 -> sensor_values(BANK0[48]), 

    read_cdc1@sensor_values	PTR unsigned int  size(2) Largest target is 48
		 -> sensor_values(BANK0[48]), 

    read_sensor@sensor_values	PTR unsigned int  size(2) Largest target is 48
		 -> sensor_values(BANK0[48]), 

    read_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 6
		 -> interrupt_values_cdc2(COMRAM[6]), interrupt_values_cdc1(COMRAM[6]), 

    write_AD7147@OutputBuffer	PTR unsigned int  size(2) Largest target is 16
		 -> setup_AD7147@StageBuffer(BANK0[16]), 

    setup_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 6
		 -> interrupt_values_cdc1(COMRAM[6]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->i2_read_AD7147
    i2_read_AD7147->i2_w16_r16_spi
    _read_cdc2->i2_w16_r16_spi
    _read_cdc1->i2_w16_r16_spi

Critical Paths under _main in BANK0

    _main->_setup_AD7147
    _switch_LED->_w32_spi
    _setup_AD7147->_write_AD7147
    _write_AD7147->_w32_spi
    _read_AD7147->_w16_r16_spi
    _read_sensor->_w16_r16_spi
    _sensor_CDC->_get_CDC
    _get_ID->_w16_r16_spi
    _blink_LED->_w32_spi
    _delay_ms->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   43066
                                             60 BANK0     10    10      0
                          _blink_LED
                           _delay_ms
                             _get_ID
                    _init_interrupts
                             _memset
                        _read_AD7147
                        _read_sensor
                       _setup_AD7147
                          _setup_mcu
                          _setup_spi
                         _switch_LED
                     _uart_read_char
                _uart_read_indicator
             _uart_read_unsigned_int
                    _uart_write_char
            _uart_write_unsigned_int
 ---------------------------------------------------------------------------------
 (1) _uart_write_unsigned_int                              4     2      2     470
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _uart_write_char                                      1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_read_unsigned_int                               8     6      2      69
                                              0 BANK0      8     6      2
                     _uart_read_char
 ---------------------------------------------------------------------------------
 (2) _uart_read_char                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uart_read_indicator                                  2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _switch_LED                                           8     4      4    4961
                                             22 BANK0      8     4      4
                           _delay_ms
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (1) _setup_spi                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_mcu                                            0     0      0       0
                          _init_uart
                         _setup_port
 ---------------------------------------------------------------------------------
 (2) _setup_port                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_AD7147                                        20    16      4   18314
                                             40 BANK0     20    16      4
                        _read_AD7147
                       _write_AD7147
 ---------------------------------------------------------------------------------
 (2) _write_AD7147                                        18     8     10   10147
                                             22 BANK0     18     8     10
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (2) _read_AD7147                                         12     4      8    5000
                                             22 BANK0     12     4      8
                            _get_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (1) _read_sensor                                         12     8      4    4211
                                             22 BANK0     12     8      4
                         _sensor_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (2) _sensor_CDC                                           4     0      4    3246
                                              4 BANK0      4     0      4
                            _get_CDC
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     324
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _init_interrupts                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_ID                                               5     3      2    3630
                                             22 BANK0      5     3      2
                            _get_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (3) _w16_r16_spi                                         22    20      2     611
                                              0 BANK0     22    20      2
 ---------------------------------------------------------------------------------
 (1) _blink_LED                                            4     2      2    4983
                                             22 BANK0      4     2      2
                           _delay_ms
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (2) _w32_spi                                             22    18      4     944
                                              0 BANK0     22    18      4
 ---------------------------------------------------------------------------------
 (2) _get_CDC                                              4     0      4    2876
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     877
                                              8 BANK0      5     3      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     452
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 18    18      0    2938
                                             34 COMRAM    18    18      0
                          _read_cdc1
                          _read_cdc2
                      i2_read_AD7147
 ---------------------------------------------------------------------------------
 (5) i2_read_AD7147                                       12     4      8    1050
                                             22 COMRAM    12     4      8
                          i2_get_CDC
                      i2_w16_r16_spi
 ---------------------------------------------------------------------------------
 (5) _read_cdc2                                            4     2      2     944
                                             22 COMRAM     4     2      2
                            _r16_spi
                          i2_get_CDC
                      i2_w16_r16_spi
 ---------------------------------------------------------------------------------
 (5) _read_cdc1                                            4     2      2     944
                                             22 COMRAM     4     2      2
                            _r16_spi
                          i2_get_CDC
                      i2_w16_r16_spi
 ---------------------------------------------------------------------------------
 (6) i2_w16_r16_spi                                       22    20      2     285
                                              0 COMRAM    22    20      2
 ---------------------------------------------------------------------------------
 (6) i2_get_CDC                                            4     0      4     356
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) _r16_spi                                             14    12      2     115
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _blink_LED
     _delay_ms
       ___awdiv
     _get_CDC
     _w32_spi
   _delay_ms
     ___awdiv
   _get_ID
     _get_CDC
     _w16_r16_spi
   _init_interrupts
   _memset
   _read_AD7147
     _get_CDC
     _w16_r16_spi
   _read_sensor
     _sensor_CDC
       _get_CDC
     _w16_r16_spi
   _setup_AD7147
     _read_AD7147
       _get_CDC
       _w16_r16_spi
     _write_AD7147
       _get_CDC
       _w32_spi
   _setup_mcu
     _init_uart
     _setup_port
   _setup_spi
   _switch_LED
     _delay_ms
       ___awdiv
     _get_CDC
     _w32_spi
   _uart_read_char
   _uart_read_indicator
   _uart_read_unsigned_int
     _uart_read_char
   _uart_write_char
   _uart_write_unsigned_int

 _ISR (ROOT)
   _read_cdc1
     _r16_spi
     i2_get_CDC
     i2_w16_r16_spi
   _read_cdc2
     _r16_spi
     i2_get_CDC
     i2_w16_r16_spi
   i2_read_AD7147
     i2_get_CDC
     i2_w16_r16_spi

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      30       8       18.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     46      95       5       93.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     34      5A       1       95.7%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11F       6        0.0%
DATA                 0      0     11F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Jan 28 17:01:13 2018

                      _SSPSTATbits 000FC7                                 l32 0ED6  
                               l33 0EA6                                 l26 0C44  
                               l27 0C00                                 l38 0B4C  
                               l39 0B54                                 l75 1314  
                               l59 128C                                 l67 0DB2  
                               l68 0DD0                                 l77 1322  
                     ___awdiv@sign 00B1                       __CFG_CP0$OFF 000000  
                              l302 0CA6                                l160 0A4C  
                              l305 0CB6                                l170 0974  
                              l162 0884                                l171 08A0  
                              l163 07E0                                l308 0CC6  
                              l165 080E                                l166 0828  
                              l183 0A16                                l175 08E4  
                              l167 0856                                l159 07D6  
                              l248 1254                                l272 10C8  
                              l192 0A36                                l184 0984  
                              l249 1242                                l345 1376  
                              l193 0A26                                l185 09FC  
                              l266 10A8                                l186 09B8  
                              l178 0938                                l275 10D8  
                              l195 0A2A                                l179 095C  
                              l348 137E                                l196 0A2E  
                              l269 10B8                                l197 0A32  
                              l189 0A0A                                l390 11FE  
                              l391 11E8                                l392 11F2  
                              l384 13A0                                l385 13AA  
                              l299 0C96                                l396 121E  
                              l582 0D52                                l583 0D5C  
                              l575 0D04                                l584 0D6A  
                              l576 0D14                   i2read_AD7147@cdc 001D  
                              l578 0D32                                l579 0D2A  
                              l835 12F0                                l836 12DE  
                ??_init_interrupts 00AC                                _ISR 0008  
                              u830 0D36                                u880 1276  
                              _cdc 0074                                wreg 000FE8  
                       _TXSTA1bits 000FAC                  write_AD7147@index 00C8  
                             ?_ISR 0001                               l2331 120E  
                             l2317 13CA                               l2345 12DE  
                             l2451 08F4                               l2463 0940  
                             l1915 1242                               l2497 0A10  
                             u1001 011C                               u1010 0B3E  
                             u1130 120E                               u1140 121A  
                             u1065 1110                               u1260 0940  
                             u1327 124A                               i2l32 104C  
                             i2l33 101E                               i2l75 1358  
                             i2l77 1366                      r16_spi@result 000D  
                 ??_uart_read_char 00AC             _uart_read_unsigned_int 12A4  
                             _main 0772                               fsr0h 000FEA  
                             fsr1h 000FE2                               fsr2h 000FDA  
                             fsr0l 000FE9                               indf2 000FDF  
                             fsr1l 000FE1                               fsr2l 000FD9  
                             btemp 005B   __size_of_uart_write_unsigned_int 001C  
                     ?_read_AD7147 00C2                    ??i2_w16_r16_spi 0003  
    uart_read_unsigned_int@message 00B0                               prodh 000FF4  
                             prodl 000FF3                               start 010E  
                    ??_w16_r16_spi 00AE                      __CFG_IESO$OFF 000000  
                    __CFG_FOSC$HS1 000000                       ___param_bank 000000  
           read_cdc2@sensor_values 0017                    __end_of_r16_spi 11DC  
                            ??_ISR 0023                    __end_of_w32_spi 10E6  
         __size_of_uart_write_char 000E                              ?_main 0001  
                  __end_of___awdiv 0D74                    ___awdiv@divisor 00AE  
                            _RC1IF 007CF5              w16_r16_spi@blank_high 00BC  
     read_AD7147@NumberOfRegisters 00C6                              i2l302 0FB2  
                            i2l152 008A                              i2l305 0FC0  
                            i2l153 00C2                              i2l308 0FCE  
                            i2l290 11A8                              i2l293 11B6  
                            i2l299 0FA4                    ___awdiv@counter 00B0  
                            _TRISC 000F94                    __end_of_get_CDC 1328  
                   __CFG_FCMEN$OFF 000000              __size_of_write_AD7147 009C  
                     ?_read_sensor 00C2                              _state 00F4  
                            main@i 00F0                              main@k 00EE  
                            pclath 000FFA                              tablat 000FF5  
                            plusw1 000FE3                              plusw2 000FDB  
                            status 000FD8                              wtemp6 005C  
           w16_r16_spi@address_low 00B4                     __CFG_MCLRE$OFF 000000  
                  __initialization 1144                 __size_ofi2_get_CDC 0022  
                     __end_of_main 0A68             i2w16_r16_spi@blank_low 000F  
              __end_of_w16_r16_spi 0CEE                    switch_LED@state 00C4  
                     _write_AD7147 0BCA                             ??_main 00E8  
                    __activetblptr 000002                   ___awdiv@dividend 00AC  
         uart_read_indicator@count 00AC                        w32_spi@data 00AE  
                           i2l2229 0F30                             i2l2239 0F60  
                           i2l2247 0E32                             i2l2257 0E62  
                   __CFG_WDTEN$OFF 000000                             _RCREG1 000FAE  
                           _SPBRG1 000FAF                     read_AD7147@cdc 00C8  
                           _SSPBUF 000FC9              switch_LED@message_157 00C8  
                           _TXREG1 000FAD                          ??_r16_spi 0003  
                           _TXSTA1 000FAC                   __end_of_delay_ms 1268  
                        ??_w32_spi 00B0   write_AD7147@RegisterStartAddress 00C2  
                   __CFG_XINST$OFF 000000                          ??___awdiv 00B0  
                   __CFG_STVREN$ON 000000                             _get_ID 10E6  
                           _memset 12D4                             clear_0 1168  
                           clear_1 1174                             clear_2 1180  
                           _on_off 0072                   ___awdiv@quotient 00B2  
                        ??_get_CDC 00B0         write_AD7147@Register_Value 00CE  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                  ??_uart_write_char 00AC  
                __end_ofi2_get_CDC 136C                       i2get_CDC@cdc 0001  
          w16_r16_spi@address_high 00B6            _uart_write_unsigned_int 136C  
                       __accesstop 0060            __end_of__initialization 1186  
                    ___rparam_used 000001                        _w16_r16_spi 0C66  
             __size_of_read_AD7147 0080                    _init_interrupts 1328  
                   __pcstackCOMRAM 0001                       __pidataBANK0 13EA  
             i2w16_r16_spi@address 0001            i2w16_r16_spi@blank_high 0011  
               __size_of_blink_LED 00C0              _interrupt_values_cdc1 0055  
            _interrupt_values_cdc2 004F                   r16_spi@blank_low 0005  
                     read_AD7147@i 00CC             __size_ofi2_read_AD7147 007A  
          ?_uart_read_unsigned_int 00AC                         __pbssBANK0 0060  
                       __pbssBANK1 0100               __size_of_read_sensor 00A2  
               __size_of_read_cdc1 007E                 __size_of_read_cdc2 0082  
               __size_of_init_uart 0014       __size_of_uart_read_indicator 0046  
                          ?_get_ID 00C2                         _break_loop 007A  
                          ?_memset 00AC                   __CFG_CANMX$PORTB 000000  
               __size_of_setup_mcu 000A  i2read_AD7147@RegisterStartAddress 0019  
  read_AD7147@RegisterStartAddress 00C4                 __size_of_setup_spi 0016  
                        ?_delay_ms 00B4     __end_of_uart_read_unsigned_int 12D4  
                    w16_r16_spi@p1 00B0                      w16_r16_spi@p2 00B2  
                    w16_r16_spi@p3 00BE                      w16_r16_spi@p4 00C0  
        ??_uart_write_unsigned_int 00AE            __end_of_init_interrupts 134A  
                __end_of_blink_LED 0B28              read_AD7147@DataBuffer 00C2  
                          _r16_spi 1194                            _w32_spi 106E  
                    i2_read_AD7147 0FF4                            __Hparam 0000  
            __end_ofi2_w16_r16_spi 0FF4                            __Lparam 0000  
                          ___awdiv 0CEE                    __size_of_get_ID 005E  
         write_AD7147@OutputBuffer 00C6                    sensor_CDC@state 00B2  
                          __pcinit 1144                            _get_CDC 1304  
                  __size_of_memset 0030                            __ramtop 0F00  
                          __ptext0 0772                            __ptext1 136C  
                          __ptext2 13C6                            __ptext3 12A4  
                          __ptext4 139E                            __ptext5 11DC  
                          __ptext6 0D74                            __ptext7 1388  
                          __ptext8 13E0                            __ptext9 13D4  
                     __size_of_ISR 0106                     w32_spi@address 00AC  
                __end_of_read_cdc1 0F76                  __end_of_read_cdc2 0E78  
                __end_of_init_uart 13C6                         ??_delay_ms 00B6  
                       get_CDC@cdc 00AC               end_of_initialization 1186  
                    ?_setup_AD7147 00D4                            memset@c 00AE  
                          memset@n 00B0                            memset@p 00B2  
                    __Lmediumconst 0000                     ?i2_read_AD7147 0017  
                __end_of_setup_mcu 13EA                  __end_of_setup_spi 139E  
                          postdec2 000FDD    __end_of_uart_write_unsigned_int 1388  
                          postinc0 000FEE                            postinc2 000FDE  
                       _sensor_CDC 1268            __size_of_uart_read_char 0014  
                  _uart_write_char 13C6                         _setup_port 13D4  
                        _TRISBbits 000F93                          r16_spi@p1 0009  
                        r16_spi@p2 000B                     i2read_AD7147@i 0021  
                  write_AD7147@cdc 00CA           i2w16_r16_spi@address_low 0009  
                   ??_setup_AD7147 00D8                         _start_stop 00F2  
                        i2_get_CDC 134A                   ?_init_interrupts 0001  
            read_sensor@cdc_sensor 00CC                       ?_w16_r16_spi 00AC  
                       _switch_LED 0D74                          w32_spi@p1 00B2  
                        w32_spi@p2 00B4                          w32_spi@p3 00B6  
                        w32_spi@p4 00B8               w16_r16_spi@blank_low 00BA  
                   __end_of_get_ID 1144                     __end_of_memset 1304  
              w32_spi@address_high 00BC                start_initialization 1144  
              _uart_read_indicator 11DC                        __end_of_ISR 010E  
                switch_LED@message 00C6                uart_write_char@data 00AC  
                    _second_sensor 004D            i2read_AD7147@DataBuffer 0017  
                       ?i2_get_CDC 0001                    ??i2_read_AD7147 001F  
                r16_spi@blank_high 0007                      ??_read_AD7147 00CA  
          __end_of_uart_write_char 13D4               ?_uart_read_indicator 0001  
          setup_AD7147@StageBuffer 00D8                        ?_sensor_CDC 00B0  
                       read_cdc1@i 0019                         read_cdc2@i 0019  
                         ??_get_ID 00C4          i2w16_r16_spi@address_high 000B  
                      __pdataBANK0 00F2                           ??_memset 00B2  
         read_sensor@sensor_values 00C2             setup_AD7147@DataBuffer 00D4  
                      ?_setup_port 0001                        __pbssCOMRAM 0035  
                    __pcstackBANK0 00AC                      ??_read_sensor 00C6  
                __size_of_delay_ms 0046             write_AD7147@Data_Value 00D0  
              i2w16_r16_spi@result 000D                           ?_r16_spi 0001  
            ??_uart_read_indicator 00AC                           ?_w32_spi 00AC  
                      ?_switch_LED 00C2                          _blink_LED 0A68  
                        __pintcode 0008                          _device_ID 0076  
                   _uart_read_char 139E                __end_of_read_AD7147 0EF8  
                         ?___awdiv 00AC       i2read_AD7147@Register_Values 001F  
             __end_of_setup_AD7147 0772                           ?_get_CDC 00AC  
                    ?_write_AD7147 00C2                           _BAUDCON1 000FA7  
     uart_write_unsigned_int@char1 00AE       uart_write_unsigned_int@char2 00AF  
                        _indicator 007B                   w32_spi@data_high 00C0  
                        _read_cdc1 0EF8                          _read_cdc2 0DF6  
                        _init_uart 13B2                __size_of_sensor_CDC 003C  
                      ??i2_get_CDC 0005                           _LATCbits 000F8B  
                        delay_ms@j 00B7                          delay_ms@n 00B4  
              __end_of_read_sensor 0BCA      write_AD7147@NumberOfRegisters 00C4  
                        get_ID@cdc 00C2                           _PIE1bits 000F9D  
              __size_of_setup_port 000C                           i2u103_40 0F60  
                         i2u105_40 0E62                   ?_uart_write_char 0001  
           __end_of_uart_read_char 13B2                           _PIR1bits 000F9E  
                       ?_blink_LED 00C2                           _RCONbits 000FD0  
             __size_of_w16_r16_spi 0088                          _setup_mcu 13E0  
                        _setup_spi 1388                     ??_write_AD7147 00CC  
                  setup_AD7147@cdc 00D6         read_AD7147@Register_Values 00CA  
                     get_CDC@state 00AE                   __CFG_SOSCSEL$DIG 000000  
                        main@index 00EC           ?_uart_write_unsigned_int 00AC  
           __size_ofi2_w16_r16_spi 007E                __size_of_switch_LED 0082  
                       ?_read_cdc1 0017                         ?_read_cdc2 0017  
                       ?_init_uart 0001                        _INTCON2bits 000FF1  
                      _INTCON3bits 000FF0                 w32_spi@address_low 00BA  
                    switch_LED@cdc 00C2                         _CDC_RESULT 0035  
                  i2w16_r16_spi@p1 0005                    i2w16_r16_spi@p2 0007  
                  i2w16_r16_spi@p3 0013                    i2w16_r16_spi@p4 0015  
                      _read_AD7147 0E78                   __size_of_r16_spi 0048  
   i2read_AD7147@NumberOfRegisters 001B                         _ANCON1bits 000F5C  
                         __Hrparam 0000             read_cdc1@sensor_values 0017  
                  ?_uart_read_char 0001                       get_ID@result 00C5  
                 __size_of_w32_spi 0078                           __Lrparam 0000  
                     blink_LED@cdc 00C2                   __size_of___awdiv 0086  
                       ?_setup_mcu 0001                         ?_setup_spi 0001  
         ??_uart_read_unsigned_int 00AE                   __size_of_get_CDC 0024  
      uart_read_unsigned_int@part1 00B2        uart_read_unsigned_int@part2 00B3  
                 sensor_CDC@sensor 00B0                      _single_sensor 0078  
                         _delay_ms 1222                      _sensor_values 007C  
             read_sensor@register1 00CA                           __ptext10 13B2  
                         __ptext11 0112                           __ptext20 0A68  
                         __ptext12 0BCA                           __ptext21 106E  
                         __ptext13 0E78                           __ptext30 134A  
                         __ptext22 1304                           __ptext14 0B28  
                         __ptext31 1194                           __ptext23 1222  
                         __ptext15 1268                           __ptext24 0CEE  
                         __ptext16 12D4                           __ptext17 1328  
                         __ptext26 0FF4                           __ptext18 10E6  
                         __ptext27 0DF6                           __ptext19 0C66  
                         __ptext28 0EF8                           __ptext29 0F76  
                      _read_sensor 0B28                      _avail_sensors 0100  
                    __size_of_main 02F6                    w32_spi@data_low 00BE  
                read_sensor@sensor 00C4                        ??_blink_LED 00C4  
                    i2_w16_r16_spi 0F76              __size_of_setup_AD7147 0660  
         __size_of_init_interrupts 0022                       ??_sensor_CDC 00B4  
                         int$flags 005B                      write_AD7147@i 00D2  
               w16_r16_spi@address 00AC                       ??_setup_port 00AC  
                       _INTCONbits 000FF2                           memset@p1 00AC  
                      ??_read_cdc1 0019                        ??_read_cdc2 0019  
                      ??_init_uart 00AC                           intlevel2 0000  
               __end_of_sensor_CDC 12A4               __end_of_write_AD7147 0C66  
                     _setup_AD7147 0112              __end_ofi2_read_AD7147 106E  
                       _RCSTA1bits 000FAB                     ?i2_w16_r16_spi 0001  
                     ??_switch_LED 00C6                 __end_of_setup_port 13E0  
                      ??_setup_mcu 00AC                        ??_setup_spi 00AC  
               setup_AD7147@F14945 0060                  w16_r16_spi@result 00B8  
  __size_of_uart_read_unsigned_int 0030                     i2get_CDC@state 0003  
                      _num_sensors 0070                        _SSPCON1bits 000FC6  
               __end_of_switch_LED 0DF6        __end_of_uart_read_indicator 1222  
                 blink_LED@message 00C4      uart_write_unsigned_int@number 00AC  
