

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Nov 08 16:34:30 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48  0000                     
    49                           ; Version 1.42
    50                           ; Generated 13/04/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F25K80 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	idataBANK0
    85  0016BA                     __pidataBANK0:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _start_stop
    89  0016BA  0001               	dw	1
    90                           
    91                           ;initializer for _state
    92  0016BC  72                 	db	114
    93  0000                     _ANCON1bits	set	3932
    94  0000                     _RCREG1	set	4014
    95  0000                     _PIR1bits	set	3998
    96  0000                     _TXREG1	set	4013
    97  0000                     _TXSTA1bits	set	4012
    98  0000                     _SSPBUF	set	4041
    99  0000                     _PIE1bits	set	3997
   100  0000                     _SSPCON1bits	set	4038
   101  0000                     _SSPSTATbits	set	4039
   102  0000                     _RCSTA1bits	set	4011
   103  0000                     _BAUDCON1	set	4007
   104  0000                     _SPBRG1	set	4015
   105  0000                     _TXSTA1	set	4012
   106  0000                     _INTCON2bits	set	4081
   107  0000                     _RCONbits	set	4048
   108  0000                     _TRISBbits	set	3987
   109  0000                     _TRISC	set	3988
   110  0000                     _INTCON3bits	set	4080
   111  0000                     _INTCONbits	set	4082
   112  0000                     _LATCbits	set	3979
   113  0000                     _RC1IF	set	31989
   114                           
   115                           ; #config settings
   116  0000                     
   117                           	psect	cinit
   118  001436                     __pcinit:
   119                           	opt stack 0
   120  001436                     start_initialization:
   121                           	opt stack 0
   122  001436                     __initialization:
   123                           	opt stack 0
   124                           
   125                           ; Initialize objects allocated to BANK0 (3 bytes)
   126                           ; load TBLPTR registers with __pidataBANK0
   127  001436  0EBA               	movlw	low __pidataBANK0
   128  001438  6EF6               	movwf	tblptrl,c
   129  00143A  0E16               	movlw	high __pidataBANK0
   130  00143C  6EF7               	movwf	tblptrh,c
   131  00143E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   132  001440  6EF8               	movwf	tblptru,c
   133  001442  0009               	tblrd		*+	;fetch initializer
   134  001444  CFF5 F0F2          	movff	tablat,__pdataBANK0
   135  001448  0009               	tblrd		*+	;fetch initializer
   136  00144A  CFF5 F0F3          	movff	tablat,__pdataBANK0+1
   137  00144E  0009               	tblrd		*+	;fetch initializer
   138  001450  CFF5 F0F4          	movff	tablat,__pdataBANK0+2
   139                           
   140                           ; Clear objects allocated to BANK1 (48 bytes)
   141  001454  EE01  F000         	lfsr	0,__pbssBANK1
   142  001458  0E30               	movlw	48
   143  00145A                     clear_0:
   144  00145A  6AEE               	clrf	postinc0,c
   145  00145C  06E8               	decf	wreg,f,c
   146  00145E  E1FD               	bnz	clear_0
   147                           
   148                           ; Clear objects allocated to BANK0 (76 bytes)
   149  001460  EE00  F060         	lfsr	0,__pbssBANK0
   150  001464  0E4C               	movlw	76
   151  001466                     clear_1:
   152  001466  6AEE               	clrf	postinc0,c
   153  001468  06E8               	decf	wreg,f,c
   154  00146A  E1FD               	bnz	clear_1
   155                           
   156                           ; Clear objects allocated to COMRAM (38 bytes)
   157  00146C  EE00  F031         	lfsr	0,__pbssCOMRAM
   158  001470  0E26               	movlw	38
   159  001472                     clear_2:
   160  001472  6AEE               	clrf	postinc0,c
   161  001474  06E8               	decf	wreg,f,c
   162  001476  E1FD               	bnz	clear_2
   163  001478                     end_of_initialization:
   164                           	opt stack 0
   165  001478                     __end_of__initialization:
   166                           	opt stack 0
   167  001478  9057               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   168  00147A  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   169  00147C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   170  00147E  6EF8               	movwf	tblptru,c
   171  001480  0100               	movlb	0
   172  001482  EF4B  F004         	goto	_main	;jump to C main() function
   173                           tblptru	equ	0xFF8
   174                           tblptrh	equ	0xFF7
   175                           tblptrl	equ	0xFF6
   176                           tablat	equ	0xFF5
   177                           postinc0	equ	0xFEE
   178                           wreg	equ	0xFE8
   179                           
   180                           	psect	bssCOMRAM
   181  000031                     __pbssCOMRAM:
   182                           	opt stack 0
   183  000031                     _CDC_RESULT:
   184                           	opt stack 0
   185  000031                     	ds	24
   186  000049                     _second_sensor:
   187                           	opt stack 0
   188  000049                     	ds	2
   189  00004B                     _interrupt_values_cdc2:
   190                           	opt stack 0
   191  00004B                     	ds	6
   192  000051                     _interrupt_values_cdc1:
   193                           	opt stack 0
   194  000051                     	ds	6
   195                           tblptru	equ	0xFF8
   196                           tblptrh	equ	0xFF7
   197                           tblptrl	equ	0xFF6
   198                           tablat	equ	0xFF5
   199                           postinc0	equ	0xFEE
   200                           wreg	equ	0xFE8
   201                           
   202                           	psect	bssBANK0
   203  000060                     __pbssBANK0:
   204                           	opt stack 0
   205  000060                     setup_AD7147@F14884:
   206                           	opt stack 0
   207  000060                     	ds	16
   208  000070                     _num_sensors:
   209                           	opt stack 0
   210  000070                     	ds	2
   211  000072                     _on_off:
   212                           	opt stack 0
   213  000072                     	ds	2
   214  000074                     _cdc:
   215                           	opt stack 0
   216  000074                     	ds	2
   217  000076                     _device_ID:
   218                           	opt stack 0
   219  000076                     	ds	2
   220  000078                     _single_sensor:
   221                           	opt stack 0
   222  000078                     	ds	2
   223  00007A                     _break_loop:
   224                           	opt stack 0
   225  00007A                     	ds	1
   226  00007B                     _indicator:
   227                           	opt stack 0
   228  00007B                     	ds	1
   229  00007C                     _sensor_values:
   230                           	opt stack 0
   231  00007C                     	ds	48
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           tblptrl	equ	0xFF6
   235                           tablat	equ	0xFF5
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           
   239                           	psect	dataBANK0
   240  0000F2                     __pdataBANK0:
   241                           	opt stack 0
   242  0000F2                     _start_stop:
   243                           	opt stack 0
   244  0000F2                     	ds	2
   245  0000F4                     _state:
   246                           	opt stack 0
   247  0000F4                     	ds	1
   248                           tblptru	equ	0xFF8
   249                           tblptrh	equ	0xFF7
   250                           tblptrl	equ	0xFF6
   251                           tablat	equ	0xFF5
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	bssBANK1
   256  000100                     __pbssBANK1:
   257                           	opt stack 0
   258  000100                     _avail_sensors:
   259                           	opt stack 0
   260  000100                     	ds	48
   261                           tblptru	equ	0xFF8
   262                           tblptrh	equ	0xFF7
   263                           tblptrl	equ	0xFF6
   264                           tablat	equ	0xFF5
   265                           postinc0	equ	0xFEE
   266                           wreg	equ	0xFE8
   267                           
   268                           	psect	cstackBANK0
   269  0000AC                     __pcstackBANK0:
   270                           	opt stack 0
   271  0000AC                     ?_w16_r16_spi:
   272                           	opt stack 0
   273  0000AC                     ?_uart_read_unsigned_int:
   274                           	opt stack 0
   275  0000AC                     ?___awdiv:
   276                           	opt stack 0
   277  0000AC                     uart_write_char@data:
   278                           	opt stack 0
   279  0000AC                     get_CDC@cdc:
   280                           	opt stack 0
   281  0000AC                     w32_spi@address:
   282                           	opt stack 0
   283  0000AC                     w16_r16_spi@address:
   284                           	opt stack 0
   285  0000AC                     uart_write_unsigned_int@number:
   286                           	opt stack 0
   287  0000AC                     uart_read_indicator@count:
   288                           	opt stack 0
   289  0000AC                     ___awdiv@dividend:
   290                           	opt stack 0
   291  0000AC                     memset@p1:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x0
   295  0000AC                     	ds	2
   296  0000AE                     ??_w16_r16_spi:
   297  0000AE                     ??_uart_read_unsigned_int:
   298  0000AE                     uart_write_unsigned_int@char1:
   299                           	opt stack 0
   300  0000AE                     get_CDC@state:
   301                           	opt stack 0
   302  0000AE                     w32_spi@data:
   303                           	opt stack 0
   304  0000AE                     ___awdiv@divisor:
   305                           	opt stack 0
   306  0000AE                     memset@c:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x2
   310  0000AE                     	ds	1
   311  0000AF                     uart_write_unsigned_int@char2:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0x3
   315  0000AF                     	ds	1
   316  0000B0                     ??_w32_spi:
   317  0000B0                     ___awdiv@counter:
   318                           	opt stack 0
   319  0000B0                     sensor_CDC@sensor:
   320                           	opt stack 0
   321  0000B0                     w16_r16_spi@p1:
   322                           	opt stack 0
   323  0000B0                     uart_read_unsigned_int@message:
   324                           	opt stack 0
   325  0000B0                     memset@n:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x4
   329  0000B0                     	ds	1
   330  0000B1                     ___awdiv@sign:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0x5
   334  0000B1                     	ds	1
   335  0000B2                     uart_read_unsigned_int@part1:
   336                           	opt stack 0
   337  0000B2                     sensor_CDC@state:
   338                           	opt stack 0
   339  0000B2                     w32_spi@p1:
   340                           	opt stack 0
   341  0000B2                     w16_r16_spi@p2:
   342                           	opt stack 0
   343  0000B2                     ___awdiv@quotient:
   344                           	opt stack 0
   345  0000B2                     memset@p:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x6
   349  0000B2                     	ds	1
   350  0000B3                     uart_read_unsigned_int@part2:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x7
   354  0000B3                     	ds	1
   355  0000B4                     delay_ms@n:
   356                           	opt stack 0
   357  0000B4                     w32_spi@p2:
   358                           	opt stack 0
   359  0000B4                     w16_r16_spi@address_low:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x8
   363  0000B4                     	ds	2
   364  0000B6                     ??_delay_ms:
   365  0000B6                     w32_spi@p3:
   366                           	opt stack 0
   367  0000B6                     w16_r16_spi@address_high:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0xA
   371  0000B6                     	ds	1
   372  0000B7                     delay_ms@j:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0xB
   376  0000B7                     	ds	1
   377  0000B8                     w32_spi@p4:
   378                           	opt stack 0
   379  0000B8                     w16_r16_spi@result:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0xC
   383  0000B8                     	ds	2
   384  0000BA                     w32_spi@address_low:
   385                           	opt stack 0
   386  0000BA                     w16_r16_spi@blank_low:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0xE
   390  0000BA                     	ds	2
   391  0000BC                     w32_spi@address_high:
   392                           	opt stack 0
   393  0000BC                     w16_r16_spi@blank_high:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x10
   397  0000BC                     	ds	2
   398  0000BE                     w32_spi@data_low:
   399                           	opt stack 0
   400  0000BE                     w16_r16_spi@p3:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x12
   404  0000BE                     	ds	2
   405  0000C0                     w32_spi@data_high:
   406                           	opt stack 0
   407  0000C0                     w16_r16_spi@p4:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x14
   411  0000C0                     	ds	2
   412  0000C2                     ?_get_ID:
   413                           	opt stack 0
   414  0000C2                     write_AD7147@RegisterStartAddress:
   415                           	opt stack 0
   416  0000C2                     read_AD7147@DataBuffer:
   417                           	opt stack 0
   418  0000C2                     read_sensor@sensor_values:
   419                           	opt stack 0
   420  0000C2                     get_ID@cdc:
   421                           	opt stack 0
   422  0000C2                     switch_LED@cdc:
   423                           	opt stack 0
   424  0000C2                     blink_LED@cdc:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x16
   428  0000C2                     	ds	2
   429  0000C4                     ??_get_ID:
   430  0000C4                     write_AD7147@NumberOfRegisters:
   431                           	opt stack 0
   432  0000C4                     read_AD7147@RegisterStartAddress:
   433                           	opt stack 0
   434  0000C4                     read_sensor@sensor:
   435                           	opt stack 0
   436  0000C4                     switch_LED@state:
   437                           	opt stack 0
   438  0000C4                     blink_LED@message:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x18
   442  0000C4                     	ds	1
   443  0000C5                     get_ID@result:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x19
   447  0000C5                     	ds	1
   448  0000C6                     ??_read_sensor:
   449  0000C6                     write_AD7147@OutputBuffer:
   450                           	opt stack 0
   451  0000C6                     read_AD7147@NumberOfRegisters:
   452                           	opt stack 0
   453  0000C6                     switch_LED@message:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x1A
   457  0000C6                     	ds	2
   458  0000C8                     write_AD7147@index:
   459                           	opt stack 0
   460  0000C8                     read_AD7147@cdc:
   461                           	opt stack 0
   462  0000C8                     switch_LED@message_160:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x1C
   466  0000C8                     	ds	2
   467  0000CA                     write_AD7147@cdc:
   468                           	opt stack 0
   469  0000CA                     read_AD7147@Register_Values:
   470                           	opt stack 0
   471  0000CA                     read_sensor@register1:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x1E
   475  0000CA                     	ds	2
   476  0000CC                     ??_write_AD7147:
   477  0000CC                     read_AD7147@i:
   478                           	opt stack 0
   479  0000CC                     read_sensor@cdc_sensor:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x20
   483  0000CC                     	ds	2
   484  0000CE                     write_AD7147@Register_Value:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x22
   488  0000CE                     	ds	2
   489  0000D0                     write_AD7147@Data_Value:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x24
   493  0000D0                     	ds	2
   494  0000D2                     write_AD7147@i:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x26
   498  0000D2                     	ds	2
   499  0000D4                     setup_AD7147@DataBuffer:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x28
   503  0000D4                     	ds	2
   504  0000D6                     setup_AD7147@cdc:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x2A
   508  0000D6                     	ds	2
   509  0000D8                     setup_AD7147@StageBuffer:
   510                           	opt stack 0
   511                           
   512                           ; 16 bytes @ 0x2C
   513  0000D8                     	ds	16
   514  0000E8                     ??_main:
   515                           
   516                           ; 1 bytes @ 0x3C
   517  0000E8                     	ds	4
   518  0000EC                     main@index:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x40
   522  0000EC                     	ds	2
   523  0000EE                     main@k:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x42
   527  0000EE                     	ds	2
   528  0000F0                     main@i:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x44
   532  0000F0                     	ds	2
   533                           tblptru	equ	0xFF8
   534                           tblptrh	equ	0xFF7
   535                           tblptrl	equ	0xFF6
   536                           tablat	equ	0xFF5
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           
   540                           	psect	cstackCOMRAM
   541  000001                     __pcstackCOMRAM:
   542                           	opt stack 0
   543  000001                     ?_r16_spi:
   544                           	opt stack 0
   545  000001                     ?i2_w16_r16_spi:
   546                           	opt stack 0
   547  000001                     i2get_CDC@cdc:
   548                           	opt stack 0
   549  000001                     i2w16_r16_spi@address:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x0
   553  000001                     	ds	2
   554  000003                     ??_r16_spi:
   555  000003                     ??i2_w16_r16_spi:
   556  000003                     i2get_CDC@state:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x2
   560  000003                     	ds	2
   561  000005                     r16_spi@blank_low:
   562                           	opt stack 0
   563  000005                     i2w16_r16_spi@p1:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x4
   567  000005                     	ds	2
   568  000007                     r16_spi@blank_high:
   569                           	opt stack 0
   570  000007                     i2w16_r16_spi@p2:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x6
   574  000007                     	ds	2
   575  000009                     r16_spi@p1:
   576                           	opt stack 0
   577  000009                     i2w16_r16_spi@address_low:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x8
   581  000009                     	ds	2
   582  00000B                     r16_spi@p2:
   583                           	opt stack 0
   584  00000B                     i2w16_r16_spi@address_high:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0xA
   588  00000B                     	ds	2
   589  00000D                     r16_spi@result:
   590                           	opt stack 0
   591  00000D                     i2w16_r16_spi@result:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0xC
   595  00000D                     	ds	2
   596  00000F                     i2w16_r16_spi@blank_low:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0xE
   600  00000F                     	ds	2
   601  000011                     i2w16_r16_spi@blank_high:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x10
   605  000011                     	ds	2
   606  000013                     i2w16_r16_spi@p3:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x12
   610  000013                     	ds	2
   611  000015                     i2w16_r16_spi@p4:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x14
   615  000015                     	ds	2
   616  000017                     read_cdc1@sensor_values:
   617                           	opt stack 0
   618  000017                     read_cdc2@sensor_values:
   619                           	opt stack 0
   620  000017                     i2read_AD7147@DataBuffer:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x16
   624  000017                     	ds	2
   625  000019                     read_cdc1@i:
   626                           	opt stack 0
   627  000019                     read_cdc2@i:
   628                           	opt stack 0
   629  000019                     i2read_AD7147@RegisterStartAddress:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x18
   633  000019                     	ds	2
   634  00001B                     i2read_AD7147@NumberOfRegisters:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x1A
   638  00001B                     	ds	2
   639  00001D                     i2read_AD7147@cdc:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x1C
   643  00001D                     	ds	2
   644  00001F                     i2read_AD7147@Register_Values:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x1E
   648  00001F                     	ds	2
   649  000021                     i2read_AD7147@i:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x20
   653  000021                     	ds	2
   654  000023                     ??_ISR:
   655                           
   656                           ; 1 bytes @ 0x22
   657  000023                     	ds	14
   658                           tblptru	equ	0xFF8
   659                           tblptrh	equ	0xFF7
   660                           tblptrl	equ	0xFF6
   661                           tablat	equ	0xFF5
   662                           postinc0	equ	0xFEE
   663                           wreg	equ	0xFE8
   664                           
   665 ;;
   666 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   667 ;;
   668 ;; *************** function _main *****************
   669 ;; Defined at:
   670 ;;		line 39 in file "main.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;  index           2   64[BANK0 ] unsigned int 
   675 ;;  i               2   68[BANK0 ] unsigned int 
   676 ;;  k               2   66[BANK0 ] unsigned int 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   687 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   688 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   689 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   690 ;;Total ram usage:       10 bytes
   691 ;; Hardware stack levels required when called:    6
   692 ;; This function calls:
   693 ;;		_blink_LED
   694 ;;		_delay_ms
   695 ;;		_get_ID
   696 ;;		_init_interrupts
   697 ;;		_memset
   698 ;;		_read_AD7147
   699 ;;		_read_sensor
   700 ;;		_setup_AD7147
   701 ;;		_setup_mcu
   702 ;;		_setup_spi
   703 ;;		_switch_LED
   704 ;;		_uart_read_char
   705 ;;		_uart_read_indicator
   706 ;;		_uart_read_unsigned_int
   707 ;;		_uart_write_char
   708 ;;		_uart_write_unsigned_int
   709 ;; This function is called by:
   710 ;;		Startup code after reset
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714                           	psect	text0
   715  000896                     __ptext0:
   716                           	opt stack 0
   717  000896                     _main:
   718                           	opt stack 25
   719                           
   720                           ;main.c: 41: delay_ms(500);
   721                           
   722                           ;incstack = 0
   723  000896  0E01               	movlw	1
   724  000898  0100               	movlb	0	; () banked
   725  00089A  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
   726  00089C  0EF4               	movlw	244
   727  00089E  6FB4               	movwf	delay_ms@n& (0+255),b
   728  0008A0  EC43  F00A         	call	_delay_ms	;wreg free
   729                           
   730                           ;main.c: 42: setup_mcu();
   731  0008A4  EC58  F00B         	call	_setup_mcu	;wreg free
   732                           
   733                           ;main.c: 43: setup_spi();
   734  0008A8  EC2C  F00B         	call	_setup_spi	;wreg free
   735                           
   736                           ;main.c: 44: setup_AD7147(interrupt_values_cdc1, 1);
   737  0008AC  0E51               	movlw	low _interrupt_values_cdc1
   738  0008AE  0100               	movlb	0	; () banked
   739  0008B0  6FD4               	movwf	setup_AD7147@DataBuffer& (0+255),b
   740  0008B2  0E00               	movlw	high _interrupt_values_cdc1
   741  0008B4  0100               	movlb	0	; () banked
   742  0008B6  6FD5               	movwf	(setup_AD7147@DataBuffer+1)& (0+255),b
   743  0008B8  0E00               	movlw	0
   744  0008BA  0100               	movlb	0	; () banked
   745  0008BC  6FD7               	movwf	(setup_AD7147@cdc+1)& (0+255),b
   746  0008BE  0E01               	movlw	1
   747  0008C0  6FD6               	movwf	setup_AD7147@cdc& (0+255),b
   748  0008C2  EC79  F000         	call	_setup_AD7147	;wreg free
   749                           
   750                           ;main.c: 47: blink_LED(1);
   751  0008C6  0E00               	movlw	0
   752  0008C8  0100               	movlb	0	; () banked
   753  0008CA  6FC3               	movwf	(blink_LED@cdc+1)& (0+255),b
   754  0008CC  0E01               	movlw	1
   755  0008CE  6FC2               	movwf	blink_LED@cdc& (0+255),b
   756  0008D0  ECCC  F006         	call	_blink_LED	;wreg free
   757                           
   758                           ;main.c: 48: read_AD7147(interrupt_values_cdc1, 0x008, 3, 1);
   759  0008D4  0E51               	movlw	low _interrupt_values_cdc1
   760  0008D6  0100               	movlb	0	; () banked
   761  0008D8  6FC2               	movwf	read_AD7147@DataBuffer& (0+255),b
   762  0008DA  0E00               	movlw	high _interrupt_values_cdc1
   763  0008DC  0100               	movlb	0	; () banked
   764  0008DE  6FC3               	movwf	(read_AD7147@DataBuffer+1)& (0+255),b
   765  0008E0  0E00               	movlw	0
   766  0008E2  0100               	movlb	0	; () banked
   767  0008E4  6FC5               	movwf	(read_AD7147@RegisterStartAddress+1)& (0+255),b
   768  0008E6  0E08               	movlw	8
   769  0008E8  6FC4               	movwf	read_AD7147@RegisterStartAddress& (0+255),b
   770  0008EA  0E00               	movlw	0
   771  0008EC  0100               	movlb	0	; () banked
   772  0008EE  6FC7               	movwf	(read_AD7147@NumberOfRegisters+1)& (0+255),b
   773  0008F0  0E03               	movlw	3
   774  0008F2  6FC6               	movwf	read_AD7147@NumberOfRegisters& (0+255),b
   775  0008F4  0E00               	movlw	0
   776  0008F6  0100               	movlb	0	; () banked
   777  0008F8  6FC9               	movwf	(read_AD7147@cdc+1)& (0+255),b
   778  0008FA  0E01               	movlw	1
   779  0008FC  6FC8               	movwf	read_AD7147@cdc& (0+255),b
   780  0008FE  EC8D  F007         	call	_read_AD7147	;wreg free
   781                           
   782                           ;main.c: 49: init_interrupts();
   783  000902  ECFA  F00A         	call	_init_interrupts	;wreg free
   784  000906                     l2419:
   785                           
   786                           ;main.c: 51: {
   787                           ;main.c: 52: indicator = uart_read_char();
   788  000906  EC37  F00B         	call	_uart_read_char	;wreg free
   789  00090A  0100               	movlb	0	; () banked
   790  00090C  6F7B               	movwf	_indicator& (0+255),b
   791                           
   792                           ;main.c: 53: switch (state)
   793  00090E  D163               	goto	l2523
   794  000910                     l2421:
   795                           
   796                           ; BSR set to: 0
   797                           ;main.c: 59: single_sensor = uart_read_unsigned_int();
   798  000910  ECAC  F00A         	call	_uart_read_unsigned_int	;wreg free
   799  000914  C0AC  F078         	movff	?_uart_read_unsigned_int,_single_sensor
   800  000918  C0AD  F079         	movff	?_uart_read_unsigned_int+1,_single_sensor+1
   801                           
   802                           ;main.c: 60: read_sensor(sensor_values, single_sensor);
   803  00091C  0E7C               	movlw	low _sensor_values
   804  00091E  0100               	movlb	0	; () banked
   805  000920  6FC2               	movwf	read_sensor@sensor_values& (0+255),b
   806  000922  0E00               	movlw	high _sensor_values
   807  000924  0100               	movlb	0	; () banked
   808  000926  6FC3               	movwf	(read_sensor@sensor_values+1)& (0+255),b
   809  000928  C078  F0C4         	movff	_single_sensor,read_sensor@sensor
   810  00092C  C079  F0C5         	movff	_single_sensor+1,read_sensor@sensor+1
   811  000930  EC63  F006         	call	_read_sensor	;wreg free
   812                           
   813                           ;main.c: 61: uart_write_unsigned_int(sensor_values[single_sensor]);
   814  000934  90D8               	bcf	status,0,c
   815  000936  0100               	movlb	0	; () banked
   816  000938  3578               	rlcf	_single_sensor& (0+255),w,b
   817  00093A  6ED9               	movwf	fsr2l,c
   818  00093C  0100               	movlb	0	; () banked
   819  00093E  3579               	rlcf	(_single_sensor+1)& (0+255),w,b
   820  000940  6EDA               	movwf	fsr2h,c
   821  000942  0E7C               	movlw	low _sensor_values
   822  000944  26D9               	addwf	fsr2l,f,c
   823  000946  0E00               	movlw	high _sensor_values
   824  000948  22DA               	addwfc	fsr2h,f,c
   825  00094A  CFDE F0AC          	movff	postinc2,uart_write_unsigned_int@number
   826  00094E  CFDD F0AD          	movff	postdec2,uart_write_unsigned_int@number+1
   827  000952  EC1D  F00B         	call	_uart_write_unsigned_int	;wreg free
   828  000956  D12F               	goto	l2515
   829  000958                     l2429:
   830                           
   831                           ; BSR set to: 0
   832                           ;main.c: 65: cdc = uart_read_unsigned_int();
   833  000958  ECAC  F00A         	call	_uart_read_unsigned_int	;wreg free
   834  00095C  C0AC  F074         	movff	?_uart_read_unsigned_int,_cdc
   835  000960  C0AD  F075         	movff	?_uart_read_unsigned_int+1,_cdc+1
   836                           
   837                           ;main.c: 66: blink_LED(cdc);
   838  000964  C074  F0C2         	movff	_cdc,blink_LED@cdc
   839  000968  C075  F0C3         	movff	_cdc+1,blink_LED@cdc+1
   840  00096C  ECCC  F006         	call	_blink_LED	;wreg free
   841  000970  D122               	goto	l2515
   842  000972                     l2433:
   843                           
   844                           ; BSR set to: 0
   845                           ;main.c: 70: cdc = uart_read_unsigned_int();
   846  000972  ECAC  F00A         	call	_uart_read_unsigned_int	;wreg free
   847  000976  C0AC  F074         	movff	?_uart_read_unsigned_int,_cdc
   848  00097A  C0AD  F075         	movff	?_uart_read_unsigned_int+1,_cdc+1
   849                           
   850                           ;main.c: 71: on_off = uart_read_unsigned_int();
   851  00097E  ECAC  F00A         	call	_uart_read_unsigned_int	;wreg free
   852  000982  C0AC  F072         	movff	?_uart_read_unsigned_int,_on_off
   853  000986  C0AD  F073         	movff	?_uart_read_unsigned_int+1,_on_off+1
   854                           
   855                           ;main.c: 72: switch_LED(cdc, on_off);
   856  00098A  C074  F0C2         	movff	_cdc,switch_LED@cdc
   857  00098E  C075  F0C3         	movff	_cdc+1,switch_LED@cdc+1
   858  000992  C072  F0C4         	movff	_on_off,switch_LED@state
   859  000996  C073  F0C5         	movff	_on_off+1,switch_LED@state+1
   860  00099A  EC34  F008         	call	_switch_LED	;wreg free
   861  00099E  D10B               	goto	l2515
   862  0009A0                     l2437:
   863                           
   864                           ; BSR set to: 0
   865                           ;main.c: 76: cdc = uart_read_unsigned_int();
   866  0009A0  ECAC  F00A         	call	_uart_read_unsigned_int	;wreg free
   867  0009A4  C0AC  F074         	movff	?_uart_read_unsigned_int,_cdc
   868  0009A8  C0AD  F075         	movff	?_uart_read_unsigned_int+1,_cdc+1
   869                           
   870                           ;main.c: 77: device_ID = get_ID(cdc);
   871  0009AC  C074  F0C2         	movff	_cdc,get_ID@cdc
   872  0009B0  C075  F0C3         	movff	_cdc+1,get_ID@cdc+1
   873  0009B4  ECBA  F009         	call	_get_ID	;wreg free
   874  0009B8  C0C2  F076         	movff	?_get_ID,_device_ID
   875  0009BC  C0C3  F077         	movff	?_get_ID+1,_device_ID+1
   876                           
   877                           ;main.c: 78: uart_write_unsigned_int(device_ID);
   878  0009C0  C076  F0AC         	movff	_device_ID,uart_write_unsigned_int@number
   879  0009C4  C077  F0AD         	movff	_device_ID+1,uart_write_unsigned_int@number+1
   880  0009C8  EC1D  F00B         	call	_uart_write_unsigned_int	;wreg free
   881  0009CC  D0F4               	goto	l2515
   882  0009CE                     l2445:
   883                           
   884                           ; BSR set to: 0
   885  0009CE  0100               	movlb	0	; () banked
   886  0009D0  517B               	movf	_indicator& (0+255),w,b
   887                           
   888                           ; Switch size 1, requested type "space"
   889                           ; Number of cases is 4, Range of values is 98 to 119
   890                           ; switch strategies available:
   891                           ; Name         Instructions Cycles
   892                           ; simple_byte           13     7 (average)
   893                           ;	Chosen strategy is simple_byte
   894  0009D2  0A62               	xorlw	98	; case 98
   895  0009D4  B4D8               	btfsc	status,2,c
   896  0009D6  D79C               	goto	l2421
   897  0009D8  0A04               	xorlw	4	; case 102
   898  0009DA  B4D8               	btfsc	status,2,c
   899  0009DC  D7BD               	goto	l2429
   900  0009DE  0A0E               	xorlw	14	; case 104
   901  0009E0  B4D8               	btfsc	status,2,c
   902  0009E2  D7C7               	goto	l2433
   903  0009E4  0A1F               	xorlw	31	; case 119
   904  0009E6  B4D8               	btfsc	status,2,c
   905  0009E8  D7DB               	goto	l2437
   906                           
   907                           ; BSR set to: 0
   908                           ;main.c: 82: break;
   909  0009EA  D78D               	goto	l2419
   910  0009EC                     l2447:
   911                           
   912                           ; BSR set to: 0
   913                           ;main.c: 88: single_sensor = uart_read_unsigned_int();
   914  0009EC  ECAC  F00A         	call	_uart_read_unsigned_int	;wreg free
   915  0009F0  C0AC  F078         	movff	?_uart_read_unsigned_int,_single_sensor
   916  0009F4  C0AD  F079         	movff	?_uart_read_unsigned_int+1,_single_sensor+1
   917                           
   918                           ;main.c: 89: read_sensor(sensor_values, single_sensor);
   919  0009F8  0E7C               	movlw	low _sensor_values
   920  0009FA  0100               	movlb	0	; () banked
   921  0009FC  6FC2               	movwf	read_sensor@sensor_values& (0+255),b
   922  0009FE  0E00               	movlw	high _sensor_values
   923  000A00  0100               	movlb	0	; () banked
   924  000A02  6FC3               	movwf	(read_sensor@sensor_values+1)& (0+255),b
   925  000A04  C078  F0C4         	movff	_single_sensor,read_sensor@sensor
   926  000A08  C079  F0C5         	movff	_single_sensor+1,read_sensor@sensor+1
   927  000A0C  EC63  F006         	call	_read_sensor	;wreg free
   928                           
   929                           ;main.c: 90: uart_write_unsigned_int(sensor_values[single_sensor]);
   930  000A10  90D8               	bcf	status,0,c
   931  000A12  0100               	movlb	0	; () banked
   932  000A14  3578               	rlcf	_single_sensor& (0+255),w,b
   933  000A16  6ED9               	movwf	fsr2l,c
   934  000A18  0100               	movlb	0	; () banked
   935  000A1A  3579               	rlcf	(_single_sensor+1)& (0+255),w,b
   936  000A1C  6EDA               	movwf	fsr2h,c
   937  000A1E  0E7C               	movlw	low _sensor_values
   938  000A20  26D9               	addwf	fsr2l,f,c
   939  000A22  0E00               	movlw	high _sensor_values
   940  000A24  22DA               	addwfc	fsr2h,f,c
   941  000A26  CFDE F0AC          	movff	postinc2,uart_write_unsigned_int@number
   942  000A2A  CFDD F0AD          	movff	postdec2,uart_write_unsigned_int@number+1
   943  000A2E  EC1D  F00B         	call	_uart_write_unsigned_int	;wreg free
   944                           
   945                           ;main.c: 91: break;
   946  000A32  D769               	goto	l2419
   947  000A34                     l2453:
   948                           
   949                           ;main.c: 94: {
   950                           ;main.c: 95: uart_write_char('s');
   951  000A34  0E73               	movlw	115
   952  000A36  EC4B  F00B         	call	_uart_write_char
   953                           
   954                           ;main.c: 96: for(unsigned int i = 0; i<24; i++)
   955  000A3A  0E00               	movlw	0
   956  000A3C  0100               	movlb	0	; () banked
   957  000A3E  6FF1               	movwf	(main@i+1)& (0+255),b
   958  000A40  0E00               	movlw	0
   959  000A42  6FF0               	movwf	main@i& (0+255),b
   960  000A44                     l2457:
   961                           
   962                           ; BSR set to: 0
   963  000A44  0100               	movlb	0	; () banked
   964  000A46  51F1               	movf	(main@i+1)& (0+255),w,b
   965  000A48  E129               	bnz	l2469
   966  000A4A  0E18               	movlw	24
   967  000A4C  0100               	movlb	0	; () banked
   968  000A4E  5DF0               	subwf	main@i& (0+255),w,b
   969  000A50  B0D8               	btfsc	status,0,c
   970  000A52  D024               	goto	l2469
   971                           
   972                           ; BSR set to: 0
   973                           ;main.c: 97: {
   974                           ;main.c: 98: if(avail_sensors[i] == 1)
   975                           
   976                           ; BSR set to: 0
   977                           
   978                           ; BSR set to: 0
   979  000A54  90D8               	bcf	status,0,c
   980  000A56  0100               	movlb	0	; () banked
   981  000A58  35F0               	rlcf	main@i& (0+255),w,b
   982  000A5A  6ED9               	movwf	fsr2l,c
   983  000A5C  0100               	movlb	0	; () banked
   984  000A5E  35F1               	rlcf	(main@i+1)& (0+255),w,b
   985  000A60  6EDA               	movwf	fsr2h,c
   986  000A62  0E00               	movlw	low _avail_sensors
   987  000A64  26D9               	addwf	fsr2l,f,c
   988  000A66  0E01               	movlw	high _avail_sensors
   989  000A68  22DA               	addwfc	fsr2h,f,c
   990  000A6A  04DE               	decf	postinc2,w,c
   991  000A6C  10DE               	iorwf	postinc2,w,c
   992  000A6E  A4D8               	btfss	status,2,c
   993  000A70  D011               	goto	l2465
   994                           
   995                           ; BSR set to: 0
   996                           ;main.c: 99: {
   997                           ;main.c: 100: uart_write_unsigned_int(sensor_values[i]);
   998  000A72  90D8               	bcf	status,0,c
   999  000A74  0100               	movlb	0	; () banked
  1000  000A76  35F0               	rlcf	main@i& (0+255),w,b
  1001  000A78  6ED9               	movwf	fsr2l,c
  1002  000A7A  0100               	movlb	0	; () banked
  1003  000A7C  35F1               	rlcf	(main@i+1)& (0+255),w,b
  1004  000A7E  6EDA               	movwf	fsr2h,c
  1005  000A80  0E7C               	movlw	low _sensor_values
  1006  000A82  26D9               	addwf	fsr2l,f,c
  1007  000A84  0E00               	movlw	high _sensor_values
  1008  000A86  22DA               	addwfc	fsr2h,f,c
  1009  000A88  CFDE F0AC          	movff	postinc2,uart_write_unsigned_int@number
  1010  000A8C  CFDD F0AD          	movff	postdec2,uart_write_unsigned_int@number+1
  1011  000A90  EC1D  F00B         	call	_uart_write_unsigned_int	;wreg free
  1012  000A94                     l2465:
  1013  000A94  0100               	movlb	0	; () banked
  1014  000A96  4BF0               	infsnz	main@i& (0+255),f,b
  1015  000A98  2BF1               	incf	(main@i+1)& (0+255),f,b
  1016  000A9A  D7D4               	goto	l2457
  1017  000A9C                     l2469:
  1018                           
  1019                           ; BSR set to: 0
  1020                           ;main.c: 101: }
  1021                           ;main.c: 102: }
  1022                           ;main.c: 103: break_loop = uart_read_indicator();
  1023  000A9C  ECF0  F009         	call	_uart_read_indicator	;wreg free
  1024  000AA0  0100               	movlb	0	; () banked
  1025  000AA2  6F7A               	movwf	_break_loop& (0+255),b
  1026                           
  1027                           ; BSR set to: 0
  1028                           ;main.c: 104: if(break_loop == 'z')
  1029  000AA4  0E7A               	movlw	122
  1030  000AA6  0100               	movlb	0	; () banked
  1031  000AA8  197A               	xorwf	_break_loop& (0+255),w,b
  1032  000AAA  A4D8               	btfss	status,2,c
  1033  000AAC  D008               	goto	l2475
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;main.c: 105: {
  1037                           ;main.c: 106: start_stop = 0;
  1038  000AAE  0E00               	movlw	0
  1039  000AB0  0100               	movlb	0	; () banked
  1040  000AB2  6FF3               	movwf	(_start_stop+1)& (0+255),b
  1041  000AB4  0E00               	movlw	0
  1042  000AB6  6FF2               	movwf	_start_stop& (0+255),b
  1043                           
  1044                           ;main.c: 107: state = 'r';
  1045  000AB8  0E72               	movlw	114
  1046  000ABA  0100               	movlb	0	; () banked
  1047  000ABC  6FF4               	movwf	_state& (0+255),b
  1048  000ABE                     l2475:
  1049  000ABE  0100               	movlb	0	; () banked
  1050  000AC0  05F2               	decf	_start_stop& (0+255),w,b
  1051  000AC2  0100               	movlb	0	; () banked
  1052  000AC4  11F3               	iorwf	(_start_stop+1)& (0+255),w,b
  1053  000AC6  B4D8               	btfsc	status,2,c
  1054  000AC8  D7B5               	goto	l2453
  1055                           
  1056                           ; BSR set to: 0
  1057                           ;main.c: 108: }
  1058                           ;main.c: 109: }
  1059                           ;main.c: 110: start_stop = 1;
  1060                           
  1061                           ; BSR set to: 0
  1062  000ACA  0E00               	movlw	0
  1063  000ACC  0100               	movlb	0	; () banked
  1064  000ACE  6FF3               	movwf	(_start_stop+1)& (0+255),b
  1065  000AD0  0E01               	movlw	1
  1066  000AD2  6FF2               	movwf	_start_stop& (0+255),b
  1067                           
  1068                           ;main.c: 111: break;
  1069  000AD4  D718               	goto	l2419
  1070  000AD6                     l2483:
  1071                           
  1072                           ; BSR set to: 0
  1073  000AD6  0100               	movlb	0	; () banked
  1074  000AD8  517B               	movf	_indicator& (0+255),w,b
  1075                           
  1076                           ; Switch size 1, requested type "space"
  1077                           ; Number of cases is 2, Range of values is 117 to 118
  1078                           ; switch strategies available:
  1079                           ; Name         Instructions Cycles
  1080                           ; simple_byte            7     4 (average)
  1081                           ;	Chosen strategy is simple_byte
  1082  000ADA  0A75               	xorlw	117	; case 117
  1083  000ADC  B4D8               	btfsc	status,2,c
  1084  000ADE  D786               	goto	l2447
  1085  000AE0  0A03               	xorlw	3	; case 118
  1086  000AE2  B4D8               	btfsc	status,2,c
  1087  000AE4  D7EC               	goto	l2475
  1088  000AE6  D067               	goto	l2515
  1089  000AE8                     l2485:
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;main.c: 122: memset(avail_sensors, 0, 24*sizeof(avail_sensors[0]));
  1093  000AE8  0E00               	movlw	low _avail_sensors
  1094  000AEA  0100               	movlb	0	; () banked
  1095  000AEC  6FAC               	movwf	memset@p1& (0+255),b
  1096  000AEE  0E01               	movlw	high _avail_sensors
  1097  000AF0  0100               	movlb	0	; () banked
  1098  000AF2  6FAD               	movwf	(memset@p1+1)& (0+255),b
  1099  000AF4  0E00               	movlw	0
  1100  000AF6  0100               	movlb	0	; () banked
  1101  000AF8  6FAF               	movwf	(memset@c+1)& (0+255),b
  1102  000AFA  0E00               	movlw	0
  1103  000AFC  6FAE               	movwf	memset@c& (0+255),b
  1104  000AFE  0E00               	movlw	0
  1105  000B00  0100               	movlb	0	; () banked
  1106  000B02  6FB1               	movwf	(memset@n+1)& (0+255),b
  1107  000B04  0E30               	movlw	48
  1108  000B06  6FB0               	movwf	memset@n& (0+255),b
  1109  000B08  ECCB  F00A         	call	_memset	;wreg free
  1110                           
  1111                           ;main.c: 123: num_sensors = uart_read_unsigned_int();
  1112  000B0C  ECAC  F00A         	call	_uart_read_unsigned_int	;wreg free
  1113  000B10  C0AC  F070         	movff	?_uart_read_unsigned_int,_num_sensors
  1114  000B14  C0AD  F071         	movff	?_uart_read_unsigned_int+1,_num_sensors+1
  1115                           
  1116                           ;main.c: 124: for(unsigned int k = 0; k < num_sensors; k++)
  1117  000B18  0E00               	movlw	0
  1118  000B1A  0100               	movlb	0	; () banked
  1119  000B1C  6FEF               	movwf	(main@k+1)& (0+255),b
  1120  000B1E  0E00               	movlw	0
  1121  000B20  6FEE               	movwf	main@k& (0+255),b
  1122  000B22  D02B               	goto	l2497
  1123  000B24                     l2491:
  1124                           
  1125                           ; BSR set to: 0
  1126                           ;main.c: 125: {
  1127                           ;main.c: 126: unsigned int index = uart_read_unsigned_int();
  1128  000B24  ECAC  F00A         	call	_uart_read_unsigned_int	;wreg free
  1129  000B28  C0AC  F0EC         	movff	?_uart_read_unsigned_int,main@index
  1130  000B2C  C0AD  F0ED         	movff	?_uart_read_unsigned_int+1,main@index+1
  1131                           
  1132                           ;main.c: 127: avail_sensors[index-1] = 1;
  1133  000B30  0EFE               	movlw	254
  1134  000B32  0100               	movlb	0	; () banked
  1135  000B34  6FE8               	movwf	??_main& (0+255),b
  1136  000B36  0EFF               	movlw	255
  1137  000B38  0100               	movlb	0	; () banked
  1138  000B3A  6FE9               	movwf	(??_main+1)& (0+255),b
  1139  000B3C  C0EC  F0EA         	movff	main@index,??_main+2
  1140  000B40  C0ED  F0EB         	movff	main@index+1,??_main+3
  1141  000B44  90D8               	bcf	status,0,c
  1142  000B46  0100               	movlb	0	; () banked
  1143  000B48  37EA               	rlcf	(??_main+2)& (0+255),f,b
  1144  000B4A  37EB               	rlcf	(??_main+3)& (0+255),f,b
  1145  000B4C  0100               	movlb	0	; () banked
  1146  000B4E  51E8               	movf	??_main& (0+255),w,b
  1147  000B50  0100               	movlb	0	; () banked
  1148  000B52  27EA               	addwf	(??_main+2)& (0+255),f,b
  1149  000B54  0100               	movlb	0	; () banked
  1150  000B56  51E9               	movf	(??_main+1)& (0+255),w,b
  1151  000B58  0100               	movlb	0	; () banked
  1152  000B5A  23EB               	addwfc	(??_main+3)& (0+255),f,b
  1153  000B5C  0E00               	movlw	low _avail_sensors
  1154  000B5E  0100               	movlb	0	; () banked
  1155  000B60  25EA               	addwf	(??_main+2)& (0+255),w,b
  1156  000B62  6ED9               	movwf	fsr2l,c
  1157  000B64  0E01               	movlw	high _avail_sensors
  1158  000B66  0100               	movlb	0	; () banked
  1159  000B68  21EB               	addwfc	(??_main+3)& (0+255),w,b
  1160  000B6A  6EDA               	movwf	fsr2h,c
  1161  000B6C  0E01               	movlw	1
  1162  000B6E  6EDE               	movwf	postinc2,c
  1163  000B70  0E00               	movlw	0
  1164  000B72  6EDD               	movwf	postdec2,c
  1165                           
  1166                           ; BSR set to: 0
  1167  000B74  0100               	movlb	0	; () banked
  1168  000B76  4BEE               	infsnz	main@k& (0+255),f,b
  1169  000B78  2BEF               	incf	(main@k+1)& (0+255),f,b
  1170  000B7A                     l2497:
  1171                           
  1172                           ; BSR set to: 0
  1173  000B7A  0100               	movlb	0	; () banked
  1174  000B7C  5170               	movf	_num_sensors& (0+255),w,b
  1175  000B7E  0100               	movlb	0	; () banked
  1176  000B80  5DEE               	subwf	main@k& (0+255),w,b
  1177  000B82  0100               	movlb	0	; () banked
  1178  000B84  5171               	movf	(_num_sensors+1)& (0+255),w,b
  1179  000B86  0100               	movlb	0	; () banked
  1180  000B88  59EF               	subwfb	(main@k+1)& (0+255),w,b
  1181  000B8A  B0D8               	btfsc	status,0,c
  1182  000B8C  D014               	goto	l2515
  1183  000B8E  D7CA               	goto	l2491
  1184  000B90                     l2501:
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;main.c: 132: uart_write_char('e');
  1188  000B90  0E65               	movlw	101
  1189  000B92  EC4B  F00B         	call	_uart_write_char
  1190  000B96  D00F               	goto	l2515
  1191  000B98                     l2507:
  1192                           
  1193                           ; BSR set to: 0
  1194  000B98  0100               	movlb	0	; () banked
  1195  000B9A  517B               	movf	_indicator& (0+255),w,b
  1196                           
  1197                           ; Switch size 1, requested type "space"
  1198                           ; Number of cases is 2, Range of values is 101 to 110
  1199                           ; switch strategies available:
  1200                           ; Name         Instructions Cycles
  1201                           ; simple_byte            7     4 (average)
  1202                           ;	Chosen strategy is simple_byte
  1203  000B9C  0A65               	xorlw	101	; case 101
  1204  000B9E  B4D8               	btfsc	status,2,c
  1205  000BA0  D7F7               	goto	l2501
  1206  000BA2  0A0B               	xorlw	11	; case 110
  1207  000BA4  B4D8               	btfsc	status,2,c
  1208  000BA6  D7A0               	goto	l2485
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;main.c: 138: break;
  1212  000BA8  D6AE               	goto	l2419
  1213  000BAA                     l2509:
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;main.c: 144: state = 's';
  1217  000BAA  0E73               	movlw	115
  1218  000BAC  D005               	goto	L4
  1219  000BAE                     l2511:
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;main.c: 147: state = 'c';
  1223  000BAE  0E63               	movlw	99
  1224  000BB0  D003               	goto	L4
  1225  000BB2                     l2513:
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;main.c: 150: state = 'p';
  1229  000BB2  0E70               	movlw	112
  1230  000BB4  D001               	goto	L4
  1231  000BB6                     l2515:
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;main.c: 153: state = 'r';
  1235  000BB6  0E72               	movlw	114
  1236  000BB8                     L4:
  1237  000BB8  0100               	movlb	0	; () banked
  1238  000BBA  6FF4               	movwf	_state& (0+255),b
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;main.c: 155: }
  1242                           
  1243                           ;main.c: 154: break;
  1244  000BBC  D6A4               	goto	l2419
  1245  000BBE                     l2519:
  1246                           
  1247                           ; BSR set to: 0
  1248  000BBE  0100               	movlb	0	; () banked
  1249  000BC0  517B               	movf	_indicator& (0+255),w,b
  1250                           
  1251                           ; Switch size 1, requested type "space"
  1252                           ; Number of cases is 3, Range of values is 99 to 115
  1253                           ; switch strategies available:
  1254                           ; Name         Instructions Cycles
  1255                           ; simple_byte           10     6 (average)
  1256                           ;	Chosen strategy is simple_byte
  1257  000BC2  0A63               	xorlw	99	; case 99
  1258  000BC4  B4D8               	btfsc	status,2,c
  1259  000BC6  D7F3               	goto	l2511
  1260  000BC8  0A13               	xorlw	19	; case 112
  1261  000BCA  B4D8               	btfsc	status,2,c
  1262  000BCC  D7F2               	goto	l2513
  1263  000BCE  0A03               	xorlw	3	; case 115
  1264  000BD0  B4D8               	btfsc	status,2,c
  1265  000BD2  D7EB               	goto	l2509
  1266  000BD4  D7F0               	goto	l2515
  1267  000BD6                     l2523:
  1268                           
  1269                           ; BSR set to: 0
  1270  000BD6  0100               	movlb	0	; () banked
  1271  000BD8  51F4               	movf	_state& (0+255),w,b
  1272                           
  1273                           ; Switch size 1, requested type "space"
  1274                           ; Number of cases is 4, Range of values is 99 to 115
  1275                           ; switch strategies available:
  1276                           ; Name         Instructions Cycles
  1277                           ; simple_byte           13     7 (average)
  1278                           ;	Chosen strategy is simple_byte
  1279  000BDA  0A63               	xorlw	99	; case 99
  1280  000BDC  B4D8               	btfsc	status,2,c
  1281  000BDE  D77B               	goto	l2483
  1282  000BE0  0A13               	xorlw	19	; case 112
  1283  000BE2  B4D8               	btfsc	status,2,c
  1284  000BE4  D7D9               	goto	l2507
  1285  000BE6  0A02               	xorlw	2	; case 114
  1286  000BE8  B4D8               	btfsc	status,2,c
  1287  000BEA  D7E9               	goto	l2519
  1288  000BEC  0A01               	xorlw	1	; case 115
  1289  000BEE  B4D8               	btfsc	status,2,c
  1290  000BF0  D6EE               	goto	l2445
  1291                           
  1292                           ; BSR set to: 0
  1293                           
  1294                           ; BSR set to: 0
  1295  000BF2  D689               	goto	l2419
  1296  000BF4                     __end_of_main:
  1297                           	opt stack 0
  1298                           tblptru	equ	0xFF8
  1299                           tblptrh	equ	0xFF7
  1300                           tblptrl	equ	0xFF6
  1301                           tablat	equ	0xFF5
  1302                           postinc0	equ	0xFEE
  1303                           wreg	equ	0xFE8
  1304                           postinc2	equ	0xFDE
  1305                           postdec2	equ	0xFDD
  1306                           fsr2h	equ	0xFDA
  1307                           fsr2l	equ	0xFD9
  1308                           status	equ	0xFD8
  1309                           
  1310 ;; *************** function _uart_write_unsigned_int *****************
  1311 ;; Defined at:
  1312 ;;		line 39 in file "uart.c"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;  number          2    0[BANK0 ] unsigned int 
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;  char2           1    3[BANK0 ] unsigned char 
  1317 ;;  char1           1    2[BANK0 ] unsigned char 
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  1    wreg      void 
  1320 ;; Registers used:
  1321 ;;		wreg, status,2
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1327 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1328 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1330 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1331 ;;Total ram usage:        4 bytes
  1332 ;; Hardware stack levels used:    1
  1333 ;; Hardware stack levels required when called:    3
  1334 ;; This function calls:
  1335 ;;		Nothing
  1336 ;; This function is called by:
  1337 ;;		_main
  1338 ;;		_uart_send_sensors
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           	psect	text1
  1343  00163A                     __ptext1:
  1344                           	opt stack 0
  1345  00163A                     _uart_write_unsigned_int:
  1346                           	opt stack 27
  1347                           
  1348                           ;uart.c: 41: char char1 = number & 0xFF;
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;incstack = 0
  1352  00163A  C0AC  F0AE         	movff	uart_write_unsigned_int@number,uart_write_unsigned_int@char1
  1353                           
  1354                           ;uart.c: 42: char char2 = number >> 8;
  1355  00163E  0100               	movlb	0	; () banked
  1356  001640  51AD               	movf	(uart_write_unsigned_int@number+1)& (0+255),w,b
  1357  001642  0100               	movlb	0	; () banked
  1358  001644  6FAF               	movwf	uart_write_unsigned_int@char2& (0+255),b
  1359  001646                     l346:
  1360  001646  A2AC               	btfss	4012,1,c	;volatile
  1361  001648  D7FE               	goto	l346
  1362                           
  1363                           ;uart.c: 45: TXREG1 = char1;
  1364  00164A  C0AE  FFAD         	movff	uart_write_unsigned_int@char1,4013	;volatile
  1365  00164E                     l349:
  1366  00164E  A2AC               	btfss	4012,1,c	;volatile
  1367  001650  D7FE               	goto	l349
  1368                           
  1369                           ;uart.c: 47: TXREG1 = char2;
  1370  001652  C0AF  FFAD         	movff	uart_write_unsigned_int@char2,4013	;volatile
  1371  001656  0012               	return		;funcret
  1372  001658                     __end_of_uart_write_unsigned_int:
  1373                           	opt stack 0
  1374                           tblptru	equ	0xFF8
  1375                           tblptrh	equ	0xFF7
  1376                           tblptrl	equ	0xFF6
  1377                           tablat	equ	0xFF5
  1378                           postinc0	equ	0xFEE
  1379                           wreg	equ	0xFE8
  1380                           postinc2	equ	0xFDE
  1381                           postdec2	equ	0xFDD
  1382                           fsr2h	equ	0xFDA
  1383                           fsr2l	equ	0xFD9
  1384                           status	equ	0xFD8
  1385                           
  1386 ;; *************** function _uart_write_char *****************
  1387 ;; Defined at:
  1388 ;;		line 24 in file "uart.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;  data            1    wreg     unsigned char 
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;  data            1    0[BANK0 ] unsigned char 
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  1    wreg      void 
  1395 ;; Registers used:
  1396 ;;		wreg
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1403 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1405 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1406 ;;Total ram usage:        1 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:    3
  1409 ;; This function calls:
  1410 ;;		Nothing
  1411 ;; This function is called by:
  1412 ;;		_main
  1413 ;;		_uart_write_string
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           	psect	text2
  1418  001696                     __ptext2:
  1419                           	opt stack 0
  1420  001696                     _uart_write_char:
  1421                           	opt stack 27
  1422                           
  1423                           ;incstack = 0
  1424                           ;uart_write_char@data stored from wreg
  1425  001696  0100               	movlb	0	; () banked
  1426  001698  6FAC               	movwf	uart_write_char@data& (0+255),b
  1427  00169A                     l334:
  1428  00169A  A2AC               	btfss	4012,1,c	;volatile
  1429  00169C  D7FE               	goto	l334
  1430                           
  1431                           ;uart.c: 28: TXREG1 = data;
  1432  00169E  C0AC  FFAD         	movff	uart_write_char@data,4013	;volatile
  1433  0016A2  0012               	return		;funcret
  1434  0016A4                     __end_of_uart_write_char:
  1435                           	opt stack 0
  1436                           tblptru	equ	0xFF8
  1437                           tblptrh	equ	0xFF7
  1438                           tblptrl	equ	0xFF6
  1439                           tablat	equ	0xFF5
  1440                           postinc0	equ	0xFEE
  1441                           wreg	equ	0xFE8
  1442                           postinc2	equ	0xFDE
  1443                           postdec2	equ	0xFDD
  1444                           fsr2h	equ	0xFDA
  1445                           fsr2l	equ	0xFD9
  1446                           status	equ	0xFD8
  1447                           
  1448 ;; *************** function _uart_read_unsigned_int *****************
  1449 ;; Defined at:
  1450 ;;		line 131 in file "uart.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;		None
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;  message         2    4[BANK0 ] unsigned int 
  1455 ;;  part2           1    7[BANK0 ] unsigned char 
  1456 ;;  part1           1    6[BANK0 ] unsigned char 
  1457 ;; Return value:  Size  Location     Type
  1458 ;;                  2    0[BANK0 ] unsigned int 
  1459 ;; Registers used:
  1460 ;;		wreg, status,2, status,0, cstack
  1461 ;; Tracked objects:
  1462 ;;		On entry : 0/0
  1463 ;;		On exit  : 0/0
  1464 ;;		Unchanged: 0/0
  1465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1466 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1467 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1468 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1469 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1470 ;;Total ram usage:        8 bytes
  1471 ;; Hardware stack levels used:    1
  1472 ;; Hardware stack levels required when called:    4
  1473 ;; This function calls:
  1474 ;;		_uart_read_char
  1475 ;; This function is called by:
  1476 ;;		_main
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           	psect	text3
  1481  001558                     __ptext3:
  1482                           	opt stack 0
  1483  001558                     _uart_read_unsigned_int:
  1484                           	opt stack 26
  1485                           
  1486                           ;uart.c: 133: unsigned char part1 = uart_read_char();
  1487                           
  1488                           ;incstack = 0
  1489  001558  EC37  F00B         	call	_uart_read_char	;wreg free
  1490  00155C  0100               	movlb	0	; () banked
  1491  00155E  6FB2               	movwf	uart_read_unsigned_int@part1& (0+255),b
  1492                           
  1493                           ;uart.c: 134: unsigned char part2 = uart_read_char();
  1494  001560  EC37  F00B         	call	_uart_read_char	;wreg free
  1495  001564  0100               	movlb	0	; () banked
  1496  001566  6FB3               	movwf	uart_read_unsigned_int@part2& (0+255),b
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;uart.c: 135: unsigned int message = (unsigned int)((part1 << 8) | part2);
  1500  001568  0100               	movlb	0	; () banked
  1501  00156A  51B3               	movf	uart_read_unsigned_int@part2& (0+255),w,b
  1502  00156C  C0B2  F0AE         	movff	uart_read_unsigned_int@part1,??_uart_read_unsigned_int
  1503  001570  0100               	movlb	0	; () banked
  1504  001572  6BAF               	clrf	(??_uart_read_unsigned_int+1)& (0+255),b
  1505  001574  C0AE  F0AF         	movff	??_uart_read_unsigned_int,??_uart_read_unsigned_int+1
  1506  001578  0100               	movlb	0	; () banked
  1507  00157A  6BAE               	clrf	??_uart_read_unsigned_int& (0+255),b
  1508  00157C  0100               	movlb	0	; () banked
  1509  00157E  11AE               	iorwf	??_uart_read_unsigned_int& (0+255),w,b
  1510  001580  0100               	movlb	0	; () banked
  1511  001582  6FB0               	movwf	uart_read_unsigned_int@message& (0+255),b
  1512  001584  0100               	movlb	0	; () banked
  1513  001586  51AF               	movf	(??_uart_read_unsigned_int+1)& (0+255),w,b
  1514  001588  0100               	movlb	0	; () banked
  1515  00158A  6FB1               	movwf	(uart_read_unsigned_int@message+1)& (0+255),b
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;uart.c: 136: return message;
  1519  00158C  C0B0  F0AC         	movff	uart_read_unsigned_int@message,?_uart_read_unsigned_int
  1520  001590  C0B1  F0AD         	movff	uart_read_unsigned_int@message+1,?_uart_read_unsigned_int+1
  1521  001594  0012               	return	
  1522  001596                     __end_of_uart_read_unsigned_int:
  1523                           	opt stack 0
  1524                           tblptru	equ	0xFF8
  1525                           tblptrh	equ	0xFF7
  1526                           tblptrl	equ	0xFF6
  1527                           tablat	equ	0xFF5
  1528                           postinc0	equ	0xFEE
  1529                           wreg	equ	0xFE8
  1530                           postinc2	equ	0xFDE
  1531                           postdec2	equ	0xFDD
  1532                           fsr2h	equ	0xFDA
  1533                           fsr2l	equ	0xFD9
  1534                           status	equ	0xFD8
  1535                           
  1536 ;; *************** function _uart_read_char *****************
  1537 ;; Defined at:
  1538 ;;		line 94 in file "uart.c"
  1539 ;; Parameters:    Size  Location     Type
  1540 ;;		None
  1541 ;; Auto vars:     Size  Location     Type
  1542 ;;		None
  1543 ;; Return value:  Size  Location     Type
  1544 ;;                  1    wreg      unsigned char 
  1545 ;; Registers used:
  1546 ;;		wreg, status,2
  1547 ;; Tracked objects:
  1548 ;;		On entry : 0/0
  1549 ;;		On exit  : 0/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1556 ;;Total ram usage:        0 bytes
  1557 ;; Hardware stack levels used:    1
  1558 ;; Hardware stack levels required when called:    3
  1559 ;; This function calls:
  1560 ;;		Nothing
  1561 ;; This function is called by:
  1562 ;;		_main
  1563 ;;		_uart_read_unsigned_int
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567                           	psect	text4
  1568  00166E                     __ptext4:
  1569                           	opt stack 0
  1570  00166E                     _uart_read_char:
  1571                           	opt stack 26
  1572                           
  1573                           ;uart.c: 96: while(PIR1bits.RC1IF == 0)
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;incstack = 0
  1577  00166E  D005               	goto	l385
  1578  001670                     l386:
  1579                           
  1580                           ;uart.c: 97: {
  1581                           ;uart.c: 98: if(RCSTA1bits.OERR == 1)
  1582  001670  A2AB               	btfss	4011,1,c	;volatile
  1583  001672  D003               	goto	l385
  1584                           
  1585                           ;uart.c: 99: {
  1586                           ;uart.c: 100: RCSTA1bits.OERR = 0;
  1587  001674  92AB               	bcf	4011,1,c	;volatile
  1588                           
  1589                           ;uart.c: 101: RCSTA1bits.CREN = 0;
  1590  001676  98AB               	bcf	4011,4,c	;volatile
  1591                           
  1592                           ;uart.c: 102: RCSTA1bits.CREN = 1;
  1593  001678  88AB               	bsf	4011,4,c	;volatile
  1594  00167A                     l385:
  1595  00167A  AA9E               	btfss	3998,5,c	;volatile
  1596  00167C  D7F9               	goto	l386
  1597                           
  1598                           ;uart.c: 103: }
  1599                           ;uart.c: 104: }
  1600                           ;uart.c: 105: return RCREG1;
  1601  00167E  50AE               	movf	4014,w,c	;volatile
  1602  001680  0012               	return	
  1603  001682                     __end_of_uart_read_char:
  1604                           	opt stack 0
  1605                           tblptru	equ	0xFF8
  1606                           tblptrh	equ	0xFF7
  1607                           tblptrl	equ	0xFF6
  1608                           tablat	equ	0xFF5
  1609                           postinc0	equ	0xFEE
  1610                           wreg	equ	0xFE8
  1611                           postinc2	equ	0xFDE
  1612                           postdec2	equ	0xFDD
  1613                           fsr2h	equ	0xFDA
  1614                           fsr2l	equ	0xFD9
  1615                           status	equ	0xFD8
  1616                           
  1617 ;; *************** function _uart_read_indicator *****************
  1618 ;; Defined at:
  1619 ;;		line 108 in file "uart.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;		None
  1622 ;; Auto vars:     Size  Location     Type
  1623 ;;  count           2    0[BANK0 ] unsigned int 
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  1    wreg      unsigned char 
  1626 ;; Registers used:
  1627 ;;		wreg, status,2, status,0
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1634 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1636 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1637 ;;Total ram usage:        2 bytes
  1638 ;; Hardware stack levels used:    1
  1639 ;; Hardware stack levels required when called:    3
  1640 ;; This function calls:
  1641 ;;		Nothing
  1642 ;; This function is called by:
  1643 ;;		_main
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           	psect	text5
  1648  0013E0                     __ptext5:
  1649                           	opt stack 0
  1650  0013E0                     _uart_read_indicator:
  1651                           	opt stack 27
  1652                           
  1653                           ;uart.c: 110: unsigned int count = 0;
  1654                           
  1655                           ;incstack = 0
  1656  0013E0  0E00               	movlw	0
  1657  0013E2  0100               	movlb	0	; () banked
  1658  0013E4  6FAD               	movwf	(uart_read_indicator@count+1)& (0+255),b
  1659  0013E6  0E00               	movlw	0
  1660  0013E8  6FAC               	movwf	uart_read_indicator@count& (0+255),b
  1661                           
  1662                           ;uart.c: 111: while(PIR1bits.RC1IF == 0 && count < 5)
  1663  0013EA  D00F               	goto	l2331
  1664  0013EC                     l393:
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;uart.c: 112: {
  1668                           ;uart.c: 113: if(RCSTA1bits.OERR == 1)
  1669  0013EC  A2AB               	btfss	4011,1,c	;volatile
  1670  0013EE  D003               	goto	l2329
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;uart.c: 114: {
  1674                           ;uart.c: 115: RCSTA1bits.OERR = 0;
  1675  0013F0  92AB               	bcf	4011,1,c	;volatile
  1676                           
  1677                           ;uart.c: 116: RCSTA1bits.CREN = 0;
  1678  0013F2  98AB               	bcf	4011,4,c	;volatile
  1679                           
  1680                           ;uart.c: 117: RCSTA1bits.CREN = 1;
  1681  0013F4  88AB               	bsf	4011,4,c	;volatile
  1682  0013F6                     l2329:
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;uart.c: 118: }
  1686                           ;uart.c: 119: count = count + 1;
  1687  0013F6  0E01               	movlw	1
  1688  0013F8  0100               	movlb	0	; () banked
  1689  0013FA  25AC               	addwf	uart_read_indicator@count& (0+255),w,b
  1690  0013FC  0100               	movlb	0	; () banked
  1691  0013FE  6FAC               	movwf	uart_read_indicator@count& (0+255),b
  1692  001400  0E00               	movlw	0
  1693  001402  0100               	movlb	0	; () banked
  1694  001404  21AD               	addwfc	(uart_read_indicator@count+1)& (0+255),w,b
  1695  001406  0100               	movlb	0	; () banked
  1696  001408  6FAD               	movwf	(uart_read_indicator@count+1)& (0+255),b
  1697  00140A                     l2331:
  1698                           
  1699                           ; BSR set to: 0
  1700  00140A  BA9E               	btfsc	3998,5,c	;volatile
  1701  00140C  D008               	goto	l2335
  1702                           
  1703                           ; BSR set to: 0
  1704  00140E  0100               	movlb	0	; () banked
  1705  001410  51AD               	movf	(uart_read_indicator@count+1)& (0+255),w,b
  1706  001412  E105               	bnz	l2335
  1707  001414  0E05               	movlw	5
  1708  001416  0100               	movlb	0	; () banked
  1709  001418  5DAC               	subwf	uart_read_indicator@count& (0+255),w,b
  1710  00141A  A0D8               	btfss	status,0,c
  1711  00141C  D7E7               	goto	l393
  1712  00141E                     l2335:
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;uart.c: 120: }
  1716                           ;uart.c: 121: if(count >= 5)
  1717  00141E  0100               	movlb	0	; () banked
  1718  001420  51AD               	movf	(uart_read_indicator@count+1)& (0+255),w,b
  1719  001422  E105               	bnz	u1130
  1720  001424  0E05               	movlw	5
  1721  001426  0100               	movlb	0	; () banked
  1722  001428  5DAC               	subwf	uart_read_indicator@count& (0+255),w,b
  1723  00142A  A0D8               	btfss	status,0,c
  1724  00142C  D002               	goto	l2343
  1725  00142E                     u1130:
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;uart.c: 122: {
  1729                           ;uart.c: 123: return 0;
  1730  00142E  0E00               	movlw	0
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;uart.c: 124: }
  1734                           
  1735                           ; BSR set to: 0
  1736  001430  0012               	return	
  1737  001432                     l2343:
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;uart.c: 125: else
  1741                           ;uart.c: 126: {
  1742                           ;uart.c: 127: return RCREG1;
  1743  001432  50AE               	movf	4014,w,c	;volatile
  1744                           
  1745                           ; BSR set to: 0
  1746  001434  0012               	return	
  1747  001436                     __end_of_uart_read_indicator:
  1748                           	opt stack 0
  1749                           tblptru	equ	0xFF8
  1750                           tblptrh	equ	0xFF7
  1751                           tblptrl	equ	0xFF6
  1752                           tablat	equ	0xFF5
  1753                           postinc0	equ	0xFEE
  1754                           wreg	equ	0xFE8
  1755                           postinc2	equ	0xFDE
  1756                           postdec2	equ	0xFDD
  1757                           fsr2h	equ	0xFDA
  1758                           fsr2l	equ	0xFD9
  1759                           status	equ	0xFD8
  1760                           
  1761 ;; *************** function _switch_LED *****************
  1762 ;; Defined at:
  1763 ;;		line 313 in file "AD7147.c"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;  cdc             2   22[BANK0 ] unsigned int 
  1766 ;;  state           2   24[BANK0 ] unsigned int 
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;  message         2   28[BANK0 ] unsigned int 
  1769 ;;  message         2   26[BANK0 ] unsigned int 
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  1    wreg      void 
  1772 ;; Registers used:
  1773 ;;		wreg, status,2, status,0, cstack
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1779 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1780 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1782 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1783 ;;Total ram usage:        8 bytes
  1784 ;; Hardware stack levels used:    1
  1785 ;; Hardware stack levels required when called:    5
  1786 ;; This function calls:
  1787 ;;		_delay_ms
  1788 ;;		_get_CDC
  1789 ;;		_w32_spi
  1790 ;; This function is called by:
  1791 ;;		_main
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text6
  1796  001068                     __ptext6:
  1797                           	opt stack 0
  1798  001068                     _switch_LED:
  1799                           	opt stack 25
  1800                           
  1801                           ;AD7147.c: 315: get_CDC(cdc,0);
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;incstack = 0
  1805  001068  C0C2  F0AC         	movff	switch_LED@cdc,get_CDC@cdc
  1806  00106C  C0C3  F0AD         	movff	switch_LED@cdc+1,get_CDC@cdc+1
  1807  001070  0E00               	movlw	0
  1808  001072  0100               	movlb	0	; () banked
  1809  001074  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  1810  001076  0E00               	movlw	0
  1811  001078  6FAE               	movwf	get_CDC@state& (0+255),b
  1812  00107A  ECE5  F00A         	call	_get_CDC	;wreg free
  1813                           
  1814                           ;AD7147.c: 316: if (state==1)
  1815  00107E  0100               	movlb	0	; () banked
  1816  001080  05C4               	decf	switch_LED@state& (0+255),w,b
  1817  001082  0100               	movlb	0	; () banked
  1818  001084  11C5               	iorwf	(switch_LED@state+1)& (0+255),w,b
  1819  001086  A4D8               	btfss	status,2,c
  1820  001088  D011               	goto	l2277
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;AD7147.c: 317: {
  1824                           ;AD7147.c: 318: unsigned int message = 0b0010000000000000;
  1825  00108A  0E20               	movlw	32
  1826  00108C  0100               	movlb	0	; () banked
  1827  00108E  6FC7               	movwf	(switch_LED@message+1)& (0+255),b
  1828  001090  0E00               	movlw	0
  1829  001092  6FC6               	movwf	switch_LED@message& (0+255),b
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;AD7147.c: 319: w32_spi((0xE000 + 0x005),message);
  1833  001094  0EE0               	movlw	224
  1834  001096  0100               	movlb	0	; () banked
  1835  001098  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  1836  00109A  0E05               	movlw	5
  1837  00109C  6FAC               	movwf	w32_spi@address& (0+255),b
  1838  00109E  C0C6  F0AE         	movff	switch_LED@message,w32_spi@data
  1839  0010A2  C0C7  F0AF         	movff	switch_LED@message+1,w32_spi@data+1
  1840  0010A6  EC79  F008         	call	_w32_spi	;wreg free
  1841                           
  1842                           ;AD7147.c: 320: }
  1843  0010AA  D010               	goto	l2281
  1844  0010AC                     l2277:
  1845                           
  1846                           ;AD7147.c: 321: else
  1847                           ;AD7147.c: 322: {
  1848                           ;AD7147.c: 323: unsigned int message = 0b0011000000000000;
  1849  0010AC  0E30               	movlw	48
  1850  0010AE  0100               	movlb	0	; () banked
  1851  0010B0  6FC9               	movwf	(switch_LED@message_160+1)& (0+255),b
  1852  0010B2  0E00               	movlw	0
  1853  0010B4  6FC8               	movwf	switch_LED@message_160& (0+255),b
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;AD7147.c: 324: w32_spi((0xE000 + 0x005),message);
  1857  0010B6  0EE0               	movlw	224
  1858  0010B8  0100               	movlb	0	; () banked
  1859  0010BA  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  1860  0010BC  0E05               	movlw	5
  1861  0010BE  6FAC               	movwf	w32_spi@address& (0+255),b
  1862  0010C0  C0C8  F0AE         	movff	switch_LED@message_160,w32_spi@data
  1863  0010C4  C0C9  F0AF         	movff	switch_LED@message_160+1,w32_spi@data+1
  1864  0010C8  EC79  F008         	call	_w32_spi	;wreg free
  1865  0010CC                     l2281:
  1866                           
  1867                           ;AD7147.c: 325: }
  1868                           ;AD7147.c: 326: delay_ms(10);
  1869  0010CC  0E00               	movlw	0
  1870  0010CE  0100               	movlb	0	; () banked
  1871  0010D0  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  1872  0010D2  0E0A               	movlw	10
  1873  0010D4  6FB4               	movwf	delay_ms@n& (0+255),b
  1874  0010D6  EC43  F00A         	call	_delay_ms	;wreg free
  1875                           
  1876                           ;AD7147.c: 327: get_CDC(cdc,1);
  1877  0010DA  C0C2  F0AC         	movff	switch_LED@cdc,get_CDC@cdc
  1878  0010DE  C0C3  F0AD         	movff	switch_LED@cdc+1,get_CDC@cdc+1
  1879  0010E2  0E00               	movlw	0
  1880  0010E4  0100               	movlb	0	; () banked
  1881  0010E6  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  1882  0010E8  0E01               	movlw	1
  1883  0010EA  6FAE               	movwf	get_CDC@state& (0+255),b
  1884  0010EC  ECE5  F00A         	call	_get_CDC	;wreg free
  1885  0010F0  0012               	return		;funcret
  1886  0010F2                     __end_of_switch_LED:
  1887                           	opt stack 0
  1888                           tblptru	equ	0xFF8
  1889                           tblptrh	equ	0xFF7
  1890                           tblptrl	equ	0xFF6
  1891                           tablat	equ	0xFF5
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postinc2	equ	0xFDE
  1895                           postdec2	equ	0xFDD
  1896                           fsr2h	equ	0xFDA
  1897                           fsr2l	equ	0xFD9
  1898                           status	equ	0xFD8
  1899                           
  1900 ;; *************** function _setup_spi *****************
  1901 ;; Defined at:
  1902 ;;		line 4 in file "spi.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;		None
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;		None
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      void 
  1909 ;; Registers used:
  1910 ;;		None
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1920 ;;Total ram usage:        0 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; Hardware stack levels required when called:    3
  1923 ;; This function calls:
  1924 ;;		Nothing
  1925 ;; This function is called by:
  1926 ;;		_main
  1927 ;; This function uses a non-reentrant model
  1928 ;;
  1929                           
  1930                           	psect	text7
  1931  001658                     __ptext7:
  1932                           	opt stack 0
  1933  001658                     _setup_spi:
  1934                           	opt stack 27
  1935                           
  1936                           ;spi.c: 6: SSPSTATbits.SMP = 0;
  1937                           
  1938                           ;incstack = 0
  1939  001658  9EC7               	bcf	4039,7,c	;volatile
  1940                           
  1941                           ;spi.c: 7: SSPSTATbits.CKE = 0;
  1942  00165A  9CC7               	bcf	4039,6,c	;volatile
  1943                           
  1944                           ;spi.c: 9: SSPCON1bits.WCOL = 0;
  1945  00165C  9EC6               	bcf	4038,7,c	;volatile
  1946                           
  1947                           ;spi.c: 10: SSPCON1bits.CKP = 1;
  1948  00165E  88C6               	bsf	4038,4,c	;volatile
  1949                           
  1950                           ;spi.c: 12: SSPCON1bits.SSPM3 = 0;
  1951  001660  96C6               	bcf	4038,3,c	;volatile
  1952                           
  1953                           ;spi.c: 13: SSPCON1bits.SSPM2 = 0;
  1954  001662  94C6               	bcf	4038,2,c	;volatile
  1955                           
  1956                           ;spi.c: 14: SSPCON1bits.SSPM1 = 1;
  1957  001664  82C6               	bsf	4038,1,c	;volatile
  1958                           
  1959                           ;spi.c: 15: SSPCON1bits.SSPM0 = 0;
  1960  001666  90C6               	bcf	4038,0,c	;volatile
  1961                           
  1962                           ;spi.c: 17: PIE1bits.SSPIE = 0;
  1963  001668  969D               	bcf	3997,3,c	;volatile
  1964                           
  1965                           ;spi.c: 19: SSPCON1bits.SSPEN = 1;
  1966  00166A  8AC6               	bsf	4038,5,c	;volatile
  1967  00166C  0012               	return		;funcret
  1968  00166E                     __end_of_setup_spi:
  1969                           	opt stack 0
  1970                           tblptru	equ	0xFF8
  1971                           tblptrh	equ	0xFF7
  1972                           tblptrl	equ	0xFF6
  1973                           tablat	equ	0xFF5
  1974                           postinc0	equ	0xFEE
  1975                           wreg	equ	0xFE8
  1976                           postinc2	equ	0xFDE
  1977                           postdec2	equ	0xFDD
  1978                           fsr2h	equ	0xFDA
  1979                           fsr2l	equ	0xFD9
  1980                           status	equ	0xFD8
  1981                           
  1982 ;; *************** function _setup_mcu *****************
  1983 ;; Defined at:
  1984 ;;		line 6 in file "micro_setup.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;		None
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;		None
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  1    wreg      void 
  1991 ;; Registers used:
  1992 ;;		wreg, status,2, cstack
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2002 ;;Total ram usage:        0 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; Hardware stack levels required when called:    4
  2005 ;; This function calls:
  2006 ;;		_init_uart
  2007 ;;		_setup_port
  2008 ;; This function is called by:
  2009 ;;		_main
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           	psect	text8
  2014  0016B0                     __ptext8:
  2015                           	opt stack 0
  2016  0016B0                     _setup_mcu:
  2017                           	opt stack 26
  2018                           
  2019                           ;micro_setup.c: 8: setup_port();
  2020                           
  2021                           ;incstack = 0
  2022  0016B0  EC52  F00B         	call	_setup_port	;wreg free
  2023                           
  2024                           ;micro_setup.c: 9: init_uart();
  2025  0016B4  EC41  F00B         	call	_init_uart	;wreg free
  2026  0016B8  0012               	return		;funcret
  2027  0016BA                     __end_of_setup_mcu:
  2028                           	opt stack 0
  2029                           tblptru	equ	0xFF8
  2030                           tblptrh	equ	0xFF7
  2031                           tblptrl	equ	0xFF6
  2032                           tablat	equ	0xFF5
  2033                           postinc0	equ	0xFEE
  2034                           wreg	equ	0xFE8
  2035                           postinc2	equ	0xFDE
  2036                           postdec2	equ	0xFDD
  2037                           fsr2h	equ	0xFDA
  2038                           fsr2l	equ	0xFD9
  2039                           status	equ	0xFD8
  2040                           
  2041 ;; *************** function _setup_port *****************
  2042 ;; Defined at:
  2043 ;;		line 12 in file "micro_setup.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;		None
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;		None
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  1    wreg      void 
  2050 ;; Registers used:
  2051 ;;		wreg, status,2
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2061 ;;Total ram usage:        0 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; Hardware stack levels required when called:    3
  2064 ;; This function calls:
  2065 ;;		Nothing
  2066 ;; This function is called by:
  2067 ;;		_setup_mcu
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text9
  2072  0016A4                     __ptext9:
  2073                           	opt stack 0
  2074  0016A4                     _setup_port:
  2075                           	opt stack 26
  2076                           
  2077                           ;micro_setup.c: 16: TRISC = 0b10010000;
  2078                           
  2079                           ;incstack = 0
  2080  0016A4  0E90               	movlw	144
  2081  0016A6  6E94               	movwf	3988,c	;volatile
  2082                           
  2083                           ;micro_setup.c: 17: LATCbits.LATC1=1;
  2084  0016A8  828B               	bsf	3979,1,c	;volatile
  2085                           
  2086                           ;micro_setup.c: 18: LATCbits.LATC0=1;
  2087  0016AA  808B               	bsf	3979,0,c	;volatile
  2088                           
  2089                           ;micro_setup.c: 19: LATCbits.LATC2=1;
  2090  0016AC  848B               	bsf	3979,2,c	;volatile
  2091  0016AE  0012               	return		;funcret
  2092  0016B0                     __end_of_setup_port:
  2093                           	opt stack 0
  2094                           tblptru	equ	0xFF8
  2095                           tblptrh	equ	0xFF7
  2096                           tblptrl	equ	0xFF6
  2097                           tablat	equ	0xFF5
  2098                           postinc0	equ	0xFEE
  2099                           wreg	equ	0xFE8
  2100                           postinc2	equ	0xFDE
  2101                           postdec2	equ	0xFDD
  2102                           fsr2h	equ	0xFDA
  2103                           fsr2l	equ	0xFD9
  2104                           status	equ	0xFD8
  2105                           
  2106 ;; *************** function _init_uart *****************
  2107 ;; Defined at:
  2108 ;;		line 47 in file "micro_setup.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;		None
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;		None
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  1    wreg      void 
  2115 ;; Registers used:
  2116 ;;		wreg, status,2
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2126 ;;Total ram usage:        0 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    3
  2129 ;; This function calls:
  2130 ;;		Nothing
  2131 ;; This function is called by:
  2132 ;;		_setup_mcu
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text10
  2137  001682                     __ptext10:
  2138                           	opt stack 0
  2139  001682                     _init_uart:
  2140                           	opt stack 26
  2141                           
  2142                           ;micro_setup.c: 49: TXSTA1 = 0b00100000;
  2143                           
  2144                           ;incstack = 0
  2145  001682  0E20               	movlw	32
  2146  001684  6EAC               	movwf	4012,c	;volatile
  2147                           
  2148                           ;micro_setup.c: 61: SPBRG1 = 12;
  2149  001686  0E0C               	movlw	12
  2150  001688  6EAF               	movwf	4015,c	;volatile
  2151                           
  2152                           ;micro_setup.c: 63: BAUDCON1 = 0b00000000;
  2153  00168A  0E00               	movlw	0
  2154  00168C  6EA7               	movwf	4007,c	;volatile
  2155                           
  2156                           ;micro_setup.c: 83: RCSTA1bits.SPEN=1;
  2157  00168E  8EAB               	bsf	4011,7,c	;volatile
  2158                           
  2159                           ;micro_setup.c: 84: RCSTA1bits.RX9=0;
  2160  001690  9CAB               	bcf	4011,6,c	;volatile
  2161                           
  2162                           ;micro_setup.c: 85: RCSTA1bits.CREN=1;
  2163  001692  88AB               	bsf	4011,4,c	;volatile
  2164  001694  0012               	return		;funcret
  2165  001696                     __end_of_init_uart:
  2166                           	opt stack 0
  2167                           tblptru	equ	0xFF8
  2168                           tblptrh	equ	0xFF7
  2169                           tblptrl	equ	0xFF6
  2170                           tablat	equ	0xFF5
  2171                           postinc0	equ	0xFEE
  2172                           wreg	equ	0xFE8
  2173                           postinc2	equ	0xFDE
  2174                           postdec2	equ	0xFDD
  2175                           fsr2h	equ	0xFDA
  2176                           fsr2l	equ	0xFD9
  2177                           status	equ	0xFD8
  2178                           
  2179 ;; *************** function _setup_AD7147 *****************
  2180 ;; Defined at:
  2181 ;;		line 6 in file "AD7147.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  DataBuffer      2   40[BANK0 ] PTR unsigned int 
  2184 ;;		 -> interrupt_values_cdc1(6), 
  2185 ;;  cdc             2   42[BANK0 ] unsigned int 
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;  StageBuffer    16   44[BANK0 ] unsigned int [8]
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2197 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2198 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2200 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2201 ;;Total ram usage:       20 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    5
  2204 ;; This function calls:
  2205 ;;		_read_AD7147
  2206 ;;		_write_AD7147
  2207 ;; This function is called by:
  2208 ;;		_main
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           	psect	text11
  2213  0000F2                     __ptext11:
  2214                           	opt stack 0
  2215  0000F2                     _setup_AD7147:
  2216                           	opt stack 25
  2217                           
  2218                           ;AD7147.c: 8: unsigned int StageBuffer[8] = {0};
  2219                           
  2220                           ;incstack = 0
  2221  0000F2  EE20  F060         	lfsr	2,setup_AD7147@F14884
  2222  0000F6  EE10  F0D8         	lfsr	1,setup_AD7147@StageBuffer
  2223  0000FA  0E0F               	movlw	15
  2224  0000FC                     u991:
  2225  0000FC  CFDB FFE3          	movff	plusw2,plusw1
  2226  000100  06E8               	decf	wreg,f,c
  2227  000102  E2FC               	bc	u991
  2228                           
  2229                           ;AD7147.c: 23: StageBuffer[0] = 0xFFFE;
  2230  000104  0EFF               	movlw	255
  2231  000106  0100               	movlb	0	; () banked
  2232  000108  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2233  00010A  0EFE               	movlw	254
  2234  00010C  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;AD7147.c: 24: StageBuffer[1] = 0x1FFF;
  2238  00010E  0E1F               	movlw	31
  2239  000110  0100               	movlb	0	; () banked
  2240  000112  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2241  000114  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;AD7147.c: 25: StageBuffer[2] = 0x0100;
  2245  000116  0E01               	movlw	1
  2246  000118  0100               	movlb	0	; () banked
  2247  00011A  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2248  00011C  0E00               	movlw	0
  2249  00011E  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;AD7147.c: 26: StageBuffer[3] = 0x2121;
  2253  000120  0E21               	movlw	33
  2254  000122  0100               	movlb	0	; () banked
  2255  000124  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2256  000126  0E21               	movlw	33
  2257  000128  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;AD7147.c: 27: StageBuffer[4] = 500;
  2261  00012A  0E01               	movlw	1
  2262  00012C  0100               	movlb	0	; () banked
  2263  00012E  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2264  000130  0EF4               	movlw	244
  2265  000132  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;AD7147.c: 28: StageBuffer[5] = 500;
  2269  000134  0E01               	movlw	1
  2270  000136  0100               	movlb	0	; () banked
  2271  000138  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2272  00013A  0EF4               	movlw	244
  2273  00013C  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;AD7147.c: 29: StageBuffer[6] = 600;
  2277  00013E  0E02               	movlw	2
  2278  000140  0100               	movlb	0	; () banked
  2279  000142  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2280  000144  0E58               	movlw	88
  2281  000146  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;AD7147.c: 30: StageBuffer[7] = 600;
  2285  000148  0E02               	movlw	2
  2286  00014A  0100               	movlb	0	; () banked
  2287  00014C  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2288  00014E  0E58               	movlw	88
  2289  000150  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;AD7147.c: 31: write_AD7147(0x080, 8, StageBuffer, 0, cdc);
  2293  000152  0E00               	movlw	0
  2294  000154  0100               	movlb	0	; () banked
  2295  000156  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2296  000158  0E80               	movlw	128
  2297  00015A  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2298  00015C  0E00               	movlw	0
  2299  00015E  0100               	movlb	0	; () banked
  2300  000160  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2301  000162  0E08               	movlw	8
  2302  000164  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2303  000166  0ED8               	movlw	low setup_AD7147@StageBuffer
  2304  000168  0100               	movlb	0	; () banked
  2305  00016A  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2306  00016C  0E00               	movlw	high setup_AD7147@StageBuffer
  2307  00016E  0100               	movlb	0	; () banked
  2308  000170  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2309  000172  0E00               	movlw	0
  2310  000174  0100               	movlb	0	; () banked
  2311  000176  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2312  000178  0E00               	movlw	0
  2313  00017A  6FC8               	movwf	write_AD7147@index& (0+255),b
  2314  00017C  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2315  000180  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2316  000184  ECFA  F005         	call	_write_AD7147	;wreg free
  2317                           
  2318                           ;AD7147.c: 36: StageBuffer[0]=0xFFFB;
  2319  000188  0EFF               	movlw	255
  2320  00018A  0100               	movlb	0	; () banked
  2321  00018C  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2322  00018E  0EFB               	movlw	251
  2323  000190  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;AD7147.c: 37: StageBuffer[1]=0x1FFF;
  2327  000192  0E1F               	movlw	31
  2328  000194  0100               	movlb	0	; () banked
  2329  000196  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2330  000198  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;AD7147.c: 38: StageBuffer[2]=0x0100;
  2334  00019A  0E01               	movlw	1
  2335  00019C  0100               	movlb	0	; () banked
  2336  00019E  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2337  0001A0  0E00               	movlw	0
  2338  0001A2  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;AD7147.c: 39: StageBuffer[3]=0x2121;
  2342  0001A4  0E21               	movlw	33
  2343  0001A6  0100               	movlb	0	; () banked
  2344  0001A8  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2345  0001AA  0E21               	movlw	33
  2346  0001AC  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;AD7147.c: 40: StageBuffer[4]=500;
  2350  0001AE  0E01               	movlw	1
  2351  0001B0  0100               	movlb	0	; () banked
  2352  0001B2  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2353  0001B4  0EF4               	movlw	244
  2354  0001B6  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;AD7147.c: 41: StageBuffer[5]=500;
  2358  0001B8  0E01               	movlw	1
  2359  0001BA  0100               	movlb	0	; () banked
  2360  0001BC  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2361  0001BE  0EF4               	movlw	244
  2362  0001C0  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;AD7147.c: 42: StageBuffer[6]=600;
  2366  0001C2  0E02               	movlw	2
  2367  0001C4  0100               	movlb	0	; () banked
  2368  0001C6  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2369  0001C8  0E58               	movlw	88
  2370  0001CA  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;AD7147.c: 43: StageBuffer[7]=600;
  2374  0001CC  0E02               	movlw	2
  2375  0001CE  0100               	movlb	0	; () banked
  2376  0001D0  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2377  0001D2  0E58               	movlw	88
  2378  0001D4  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;AD7147.c: 44: write_AD7147(0x088, 8, StageBuffer, 0, cdc);
  2382  0001D6  0E00               	movlw	0
  2383  0001D8  0100               	movlb	0	; () banked
  2384  0001DA  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2385  0001DC  0E88               	movlw	136
  2386  0001DE  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2387  0001E0  0E00               	movlw	0
  2388  0001E2  0100               	movlb	0	; () banked
  2389  0001E4  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2390  0001E6  0E08               	movlw	8
  2391  0001E8  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2392  0001EA  0ED8               	movlw	low setup_AD7147@StageBuffer
  2393  0001EC  0100               	movlb	0	; () banked
  2394  0001EE  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2395  0001F0  0E00               	movlw	high setup_AD7147@StageBuffer
  2396  0001F2  0100               	movlb	0	; () banked
  2397  0001F4  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2398  0001F6  0E00               	movlw	0
  2399  0001F8  0100               	movlb	0	; () banked
  2400  0001FA  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2401  0001FC  0E00               	movlw	0
  2402  0001FE  6FC8               	movwf	write_AD7147@index& (0+255),b
  2403  000200  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2404  000204  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2405  000208  ECFA  F005         	call	_write_AD7147	;wreg free
  2406                           
  2407                           ;AD7147.c: 49: StageBuffer[0]=0xFFEF;
  2408  00020C  0EFF               	movlw	255
  2409  00020E  0100               	movlb	0	; () banked
  2410  000210  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2411  000212  0EEF               	movlw	239
  2412  000214  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2413                           
  2414                           ; BSR set to: 0
  2415                           ;AD7147.c: 50: StageBuffer[1]=0x1FFF;
  2416  000216  0E1F               	movlw	31
  2417  000218  0100               	movlb	0	; () banked
  2418  00021A  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2419  00021C  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;AD7147.c: 51: StageBuffer[2]=0x0100;
  2423  00021E  0E01               	movlw	1
  2424  000220  0100               	movlb	0	; () banked
  2425  000222  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2426  000224  0E00               	movlw	0
  2427  000226  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;AD7147.c: 52: StageBuffer[3]=0x2121;
  2431  000228  0E21               	movlw	33
  2432  00022A  0100               	movlb	0	; () banked
  2433  00022C  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2434  00022E  0E21               	movlw	33
  2435  000230  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;AD7147.c: 53: StageBuffer[4]=500;
  2439  000232  0E01               	movlw	1
  2440  000234  0100               	movlb	0	; () banked
  2441  000236  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2442  000238  0EF4               	movlw	244
  2443  00023A  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;AD7147.c: 54: StageBuffer[5]=500;
  2447  00023C  0E01               	movlw	1
  2448  00023E  0100               	movlb	0	; () banked
  2449  000240  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2450  000242  0EF4               	movlw	244
  2451  000244  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;AD7147.c: 55: StageBuffer[6]=600;
  2455  000246  0E02               	movlw	2
  2456  000248  0100               	movlb	0	; () banked
  2457  00024A  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2458  00024C  0E58               	movlw	88
  2459  00024E  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;AD7147.c: 56: StageBuffer[7]=600;
  2463  000250  0E02               	movlw	2
  2464  000252  0100               	movlb	0	; () banked
  2465  000254  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2466  000256  0E58               	movlw	88
  2467  000258  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;AD7147.c: 57: write_AD7147(0x090, 8, StageBuffer, 0, cdc);
  2471  00025A  0E00               	movlw	0
  2472  00025C  0100               	movlb	0	; () banked
  2473  00025E  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2474  000260  0E90               	movlw	144
  2475  000262  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2476  000264  0E00               	movlw	0
  2477  000266  0100               	movlb	0	; () banked
  2478  000268  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2479  00026A  0E08               	movlw	8
  2480  00026C  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2481  00026E  0ED8               	movlw	low setup_AD7147@StageBuffer
  2482  000270  0100               	movlb	0	; () banked
  2483  000272  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2484  000274  0E00               	movlw	high setup_AD7147@StageBuffer
  2485  000276  0100               	movlb	0	; () banked
  2486  000278  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2487  00027A  0E00               	movlw	0
  2488  00027C  0100               	movlb	0	; () banked
  2489  00027E  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2490  000280  0E00               	movlw	0
  2491  000282  6FC8               	movwf	write_AD7147@index& (0+255),b
  2492  000284  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2493  000288  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2494  00028C  ECFA  F005         	call	_write_AD7147	;wreg free
  2495                           
  2496                           ;AD7147.c: 62: StageBuffer[0]=0xFEFF;
  2497  000290  0EFE               	movlw	254
  2498  000292  0100               	movlb	0	; () banked
  2499  000294  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2500  000296  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;AD7147.c: 63: StageBuffer[1]=0x1FFF;
  2504  000298  0E1F               	movlw	31
  2505  00029A  0100               	movlb	0	; () banked
  2506  00029C  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2507  00029E  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;AD7147.c: 64: StageBuffer[2]=0x0100;
  2511  0002A0  0E01               	movlw	1
  2512  0002A2  0100               	movlb	0	; () banked
  2513  0002A4  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2514  0002A6  0E00               	movlw	0
  2515  0002A8  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2516                           
  2517                           ; BSR set to: 0
  2518                           ;AD7147.c: 65: StageBuffer[3]=0x2121;
  2519  0002AA  0E21               	movlw	33
  2520  0002AC  0100               	movlb	0	; () banked
  2521  0002AE  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2522  0002B0  0E21               	movlw	33
  2523  0002B2  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;AD7147.c: 66: StageBuffer[4]=500;
  2527  0002B4  0E01               	movlw	1
  2528  0002B6  0100               	movlb	0	; () banked
  2529  0002B8  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2530  0002BA  0EF4               	movlw	244
  2531  0002BC  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;AD7147.c: 67: StageBuffer[5]=500;
  2535  0002BE  0E01               	movlw	1
  2536  0002C0  0100               	movlb	0	; () banked
  2537  0002C2  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2538  0002C4  0EF4               	movlw	244
  2539  0002C6  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;AD7147.c: 68: StageBuffer[6]=600;
  2543  0002C8  0E02               	movlw	2
  2544  0002CA  0100               	movlb	0	; () banked
  2545  0002CC  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2546  0002CE  0E58               	movlw	88
  2547  0002D0  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;AD7147.c: 69: StageBuffer[7]=600;
  2551  0002D2  0E02               	movlw	2
  2552  0002D4  0100               	movlb	0	; () banked
  2553  0002D6  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2554  0002D8  0E58               	movlw	88
  2555  0002DA  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;AD7147.c: 70: write_AD7147(0x098, 8, StageBuffer, 0, cdc);
  2559  0002DC  0E00               	movlw	0
  2560  0002DE  0100               	movlb	0	; () banked
  2561  0002E0  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2562  0002E2  0E98               	movlw	152
  2563  0002E4  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2564  0002E6  0E00               	movlw	0
  2565  0002E8  0100               	movlb	0	; () banked
  2566  0002EA  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2567  0002EC  0E08               	movlw	8
  2568  0002EE  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2569  0002F0  0ED8               	movlw	low setup_AD7147@StageBuffer
  2570  0002F2  0100               	movlb	0	; () banked
  2571  0002F4  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2572  0002F6  0E00               	movlw	high setup_AD7147@StageBuffer
  2573  0002F8  0100               	movlb	0	; () banked
  2574  0002FA  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2575  0002FC  0E00               	movlw	0
  2576  0002FE  0100               	movlb	0	; () banked
  2577  000300  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2578  000302  0E00               	movlw	0
  2579  000304  6FC8               	movwf	write_AD7147@index& (0+255),b
  2580  000306  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2581  00030A  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2582  00030E  ECFA  F005         	call	_write_AD7147	;wreg free
  2583                           
  2584                           ;AD7147.c: 75: StageBuffer[0]=0xFFFF;
  2585  000312  0100               	movlb	0	; () banked
  2586  000314  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2587  000316  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2588                           
  2589                           ; BSR set to: 0
  2590                           ;AD7147.c: 76: StageBuffer[1]=0x3FFF;
  2591  000318  0E3F               	movlw	63
  2592  00031A  0100               	movlb	0	; () banked
  2593  00031C  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2594  00031E  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;AD7147.c: 77: StageBuffer[2]=0x0000;
  2598  000320  0E00               	movlw	0
  2599  000322  0100               	movlb	0	; () banked
  2600  000324  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2601  000326  0E00               	movlw	0
  2602  000328  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2603                           
  2604                           ; BSR set to: 0
  2605                           ;AD7147.c: 78: StageBuffer[3]=0x2626;
  2606  00032A  0E26               	movlw	38
  2607  00032C  0100               	movlb	0	; () banked
  2608  00032E  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2609  000330  0E26               	movlw	38
  2610  000332  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;AD7147.c: 79: StageBuffer[4]=4000;
  2614  000334  0E0F               	movlw	15
  2615  000336  0100               	movlb	0	; () banked
  2616  000338  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2617  00033A  0EA0               	movlw	160
  2618  00033C  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2619                           
  2620                           ; BSR set to: 0
  2621                           ;AD7147.c: 80: StageBuffer[5]=2500;
  2622  00033E  0E09               	movlw	9
  2623  000340  0100               	movlb	0	; () banked
  2624  000342  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2625  000344  0EC4               	movlw	196
  2626  000346  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;AD7147.c: 81: StageBuffer[6]=4000;
  2630  000348  0E0F               	movlw	15
  2631  00034A  0100               	movlb	0	; () banked
  2632  00034C  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2633  00034E  0EA0               	movlw	160
  2634  000350  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;AD7147.c: 82: StageBuffer[7]=4000;
  2638  000352  0E0F               	movlw	15
  2639  000354  0100               	movlb	0	; () banked
  2640  000356  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2641  000358  0EA0               	movlw	160
  2642  00035A  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;AD7147.c: 83: write_AD7147(0x0A0, 8, StageBuffer,0, cdc);
  2646  00035C  0E00               	movlw	0
  2647  00035E  0100               	movlb	0	; () banked
  2648  000360  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2649  000362  0EA0               	movlw	160
  2650  000364  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2651  000366  0E00               	movlw	0
  2652  000368  0100               	movlb	0	; () banked
  2653  00036A  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2654  00036C  0E08               	movlw	8
  2655  00036E  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2656  000370  0ED8               	movlw	low setup_AD7147@StageBuffer
  2657  000372  0100               	movlb	0	; () banked
  2658  000374  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2659  000376  0E00               	movlw	high setup_AD7147@StageBuffer
  2660  000378  0100               	movlb	0	; () banked
  2661  00037A  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2662  00037C  0E00               	movlw	0
  2663  00037E  0100               	movlb	0	; () banked
  2664  000380  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2665  000382  0E00               	movlw	0
  2666  000384  6FC8               	movwf	write_AD7147@index& (0+255),b
  2667  000386  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2668  00038A  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2669  00038E  ECFA  F005         	call	_write_AD7147	;wreg free
  2670                           
  2671                           ;AD7147.c: 88: StageBuffer[0]=0xFFFF;
  2672  000392  0100               	movlb	0	; () banked
  2673  000394  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2674  000396  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;AD7147.c: 89: StageBuffer[1]=0x3FFF;
  2678  000398  0E3F               	movlw	63
  2679  00039A  0100               	movlb	0	; () banked
  2680  00039C  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2681  00039E  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;AD7147.c: 90: StageBuffer[2]=0x0000;
  2685  0003A0  0E00               	movlw	0
  2686  0003A2  0100               	movlb	0	; () banked
  2687  0003A4  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2688  0003A6  0E00               	movlw	0
  2689  0003A8  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;AD7147.c: 91: StageBuffer[3]=0x2626;
  2693  0003AA  0E26               	movlw	38
  2694  0003AC  0100               	movlb	0	; () banked
  2695  0003AE  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2696  0003B0  0E26               	movlw	38
  2697  0003B2  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;AD7147.c: 92: StageBuffer[4]=4000;
  2701  0003B4  0E0F               	movlw	15
  2702  0003B6  0100               	movlb	0	; () banked
  2703  0003B8  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2704  0003BA  0EA0               	movlw	160
  2705  0003BC  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;AD7147.c: 93: StageBuffer[5]=2500;
  2709  0003BE  0E09               	movlw	9
  2710  0003C0  0100               	movlb	0	; () banked
  2711  0003C2  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2712  0003C4  0EC4               	movlw	196
  2713  0003C6  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;AD7147.c: 94: StageBuffer[6]=4000;
  2717  0003C8  0E0F               	movlw	15
  2718  0003CA  0100               	movlb	0	; () banked
  2719  0003CC  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2720  0003CE  0EA0               	movlw	160
  2721  0003D0  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;AD7147.c: 95: StageBuffer[7]=4000;
  2725  0003D2  0E0F               	movlw	15
  2726  0003D4  0100               	movlb	0	; () banked
  2727  0003D6  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2728  0003D8  0EA0               	movlw	160
  2729  0003DA  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;AD7147.c: 96: write_AD7147(0x0A8, 8, StageBuffer,0, cdc);
  2733  0003DC  0E00               	movlw	0
  2734  0003DE  0100               	movlb	0	; () banked
  2735  0003E0  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2736  0003E2  0EA8               	movlw	168
  2737  0003E4  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2738  0003E6  0E00               	movlw	0
  2739  0003E8  0100               	movlb	0	; () banked
  2740  0003EA  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2741  0003EC  0E08               	movlw	8
  2742  0003EE  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2743  0003F0  0ED8               	movlw	low setup_AD7147@StageBuffer
  2744  0003F2  0100               	movlb	0	; () banked
  2745  0003F4  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2746  0003F6  0E00               	movlw	high setup_AD7147@StageBuffer
  2747  0003F8  0100               	movlb	0	; () banked
  2748  0003FA  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2749  0003FC  0E00               	movlw	0
  2750  0003FE  0100               	movlb	0	; () banked
  2751  000400  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2752  000402  0E00               	movlw	0
  2753  000404  6FC8               	movwf	write_AD7147@index& (0+255),b
  2754  000406  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2755  00040A  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2756  00040E  ECFA  F005         	call	_write_AD7147	;wreg free
  2757                           
  2758                           ;AD7147.c: 101: StageBuffer[0]=0xFFFF;
  2759  000412  0100               	movlb	0	; () banked
  2760  000414  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2761  000416  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;AD7147.c: 102: StageBuffer[1]=0x3FFF;
  2765  000418  0E3F               	movlw	63
  2766  00041A  0100               	movlb	0	; () banked
  2767  00041C  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2768  00041E  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;AD7147.c: 103: StageBuffer[2]=0x0000;
  2772  000420  0E00               	movlw	0
  2773  000422  0100               	movlb	0	; () banked
  2774  000424  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2775  000426  0E00               	movlw	0
  2776  000428  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;AD7147.c: 104: StageBuffer[3]=0x2626;
  2780  00042A  0E26               	movlw	38
  2781  00042C  0100               	movlb	0	; () banked
  2782  00042E  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2783  000430  0E26               	movlw	38
  2784  000432  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;AD7147.c: 105: StageBuffer[4]=4000;
  2788  000434  0E0F               	movlw	15
  2789  000436  0100               	movlb	0	; () banked
  2790  000438  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2791  00043A  0EA0               	movlw	160
  2792  00043C  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;AD7147.c: 106: StageBuffer[5]=2500;
  2796  00043E  0E09               	movlw	9
  2797  000440  0100               	movlb	0	; () banked
  2798  000442  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2799  000444  0EC4               	movlw	196
  2800  000446  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;AD7147.c: 107: StageBuffer[6]=4000;
  2804  000448  0E0F               	movlw	15
  2805  00044A  0100               	movlb	0	; () banked
  2806  00044C  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2807  00044E  0EA0               	movlw	160
  2808  000450  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2809                           
  2810                           ; BSR set to: 0
  2811                           ;AD7147.c: 108: StageBuffer[7]=4000;
  2812  000452  0E0F               	movlw	15
  2813  000454  0100               	movlb	0	; () banked
  2814  000456  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2815  000458  0EA0               	movlw	160
  2816  00045A  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;AD7147.c: 109: write_AD7147(0x0B0, 8, StageBuffer, 0, cdc);
  2820  00045C  0E00               	movlw	0
  2821  00045E  0100               	movlb	0	; () banked
  2822  000460  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2823  000462  0EB0               	movlw	176
  2824  000464  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2825  000466  0E00               	movlw	0
  2826  000468  0100               	movlb	0	; () banked
  2827  00046A  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2828  00046C  0E08               	movlw	8
  2829  00046E  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2830  000470  0ED8               	movlw	low setup_AD7147@StageBuffer
  2831  000472  0100               	movlb	0	; () banked
  2832  000474  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2833  000476  0E00               	movlw	high setup_AD7147@StageBuffer
  2834  000478  0100               	movlb	0	; () banked
  2835  00047A  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2836  00047C  0E00               	movlw	0
  2837  00047E  0100               	movlb	0	; () banked
  2838  000480  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2839  000482  0E00               	movlw	0
  2840  000484  6FC8               	movwf	write_AD7147@index& (0+255),b
  2841  000486  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2842  00048A  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2843  00048E  ECFA  F005         	call	_write_AD7147	;wreg free
  2844                           
  2845                           ;AD7147.c: 114: StageBuffer[0]=0xFFFF;
  2846  000492  0100               	movlb	0	; () banked
  2847  000494  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2848  000496  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2849                           
  2850                           ; BSR set to: 0
  2851                           ;AD7147.c: 115: StageBuffer[1]=0x3FFF;
  2852  000498  0E3F               	movlw	63
  2853  00049A  0100               	movlb	0	; () banked
  2854  00049C  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2855  00049E  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;AD7147.c: 116: StageBuffer[2]=0x0000;
  2859  0004A0  0E00               	movlw	0
  2860  0004A2  0100               	movlb	0	; () banked
  2861  0004A4  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2862  0004A6  0E00               	movlw	0
  2863  0004A8  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;AD7147.c: 117: StageBuffer[3]=0x2626;
  2867  0004AA  0E26               	movlw	38
  2868  0004AC  0100               	movlb	0	; () banked
  2869  0004AE  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2870  0004B0  0E26               	movlw	38
  2871  0004B2  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;AD7147.c: 118: StageBuffer[4]=4000;
  2875  0004B4  0E0F               	movlw	15
  2876  0004B6  0100               	movlb	0	; () banked
  2877  0004B8  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2878  0004BA  0EA0               	movlw	160
  2879  0004BC  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;AD7147.c: 119: StageBuffer[5]=2500;
  2883  0004BE  0E09               	movlw	9
  2884  0004C0  0100               	movlb	0	; () banked
  2885  0004C2  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2886  0004C4  0EC4               	movlw	196
  2887  0004C6  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;AD7147.c: 120: StageBuffer[6]=4000;
  2891  0004C8  0E0F               	movlw	15
  2892  0004CA  0100               	movlb	0	; () banked
  2893  0004CC  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2894  0004CE  0EA0               	movlw	160
  2895  0004D0  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;AD7147.c: 121: StageBuffer[7]=4000;
  2899  0004D2  0E0F               	movlw	15
  2900  0004D4  0100               	movlb	0	; () banked
  2901  0004D6  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2902  0004D8  0EA0               	movlw	160
  2903  0004DA  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;AD7147.c: 122: write_AD7147(0x0B8, 8, StageBuffer, 0, cdc);
  2907  0004DC  0E00               	movlw	0
  2908  0004DE  0100               	movlb	0	; () banked
  2909  0004E0  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2910  0004E2  0EB8               	movlw	184
  2911  0004E4  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2912  0004E6  0E00               	movlw	0
  2913  0004E8  0100               	movlb	0	; () banked
  2914  0004EA  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2915  0004EC  0E08               	movlw	8
  2916  0004EE  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2917  0004F0  0ED8               	movlw	low setup_AD7147@StageBuffer
  2918  0004F2  0100               	movlb	0	; () banked
  2919  0004F4  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2920  0004F6  0E00               	movlw	high setup_AD7147@StageBuffer
  2921  0004F8  0100               	movlb	0	; () banked
  2922  0004FA  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2923  0004FC  0E00               	movlw	0
  2924  0004FE  0100               	movlb	0	; () banked
  2925  000500  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2926  000502  0E00               	movlw	0
  2927  000504  6FC8               	movwf	write_AD7147@index& (0+255),b
  2928  000506  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2929  00050A  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2930  00050E  ECFA  F005         	call	_write_AD7147	;wreg free
  2931                           
  2932                           ;AD7147.c: 127: StageBuffer[0]=0xFFFF;
  2933  000512  0100               	movlb	0	; () banked
  2934  000514  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2935  000516  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;AD7147.c: 128: StageBuffer[1]=0x3FFF;
  2939  000518  0E3F               	movlw	63
  2940  00051A  0100               	movlb	0	; () banked
  2941  00051C  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2942  00051E  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;AD7147.c: 129: StageBuffer[2]=0x0000;
  2946  000520  0E00               	movlw	0
  2947  000522  0100               	movlb	0	; () banked
  2948  000524  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2949  000526  0E00               	movlw	0
  2950  000528  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;AD7147.c: 130: StageBuffer[3]=0x2626;
  2954  00052A  0E26               	movlw	38
  2955  00052C  0100               	movlb	0	; () banked
  2956  00052E  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2957  000530  0E26               	movlw	38
  2958  000532  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;AD7147.c: 131: StageBuffer[4]=4000;
  2962  000534  0E0F               	movlw	15
  2963  000536  0100               	movlb	0	; () banked
  2964  000538  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2965  00053A  0EA0               	movlw	160
  2966  00053C  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2967                           
  2968                           ; BSR set to: 0
  2969                           ;AD7147.c: 132: StageBuffer[5]=2500;
  2970  00053E  0E09               	movlw	9
  2971  000540  0100               	movlb	0	; () banked
  2972  000542  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2973  000544  0EC4               	movlw	196
  2974  000546  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;AD7147.c: 133: StageBuffer[6]=4000;
  2978  000548  0E0F               	movlw	15
  2979  00054A  0100               	movlb	0	; () banked
  2980  00054C  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2981  00054E  0EA0               	movlw	160
  2982  000550  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;AD7147.c: 134: StageBuffer[7]=4000;
  2986  000552  0E0F               	movlw	15
  2987  000554  0100               	movlb	0	; () banked
  2988  000556  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2989  000558  0EA0               	movlw	160
  2990  00055A  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;AD7147.c: 135: write_AD7147(0x0C0, 8, StageBuffer, 0, cdc);
  2994  00055C  0E00               	movlw	0
  2995  00055E  0100               	movlb	0	; () banked
  2996  000560  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2997  000562  0EC0               	movlw	192
  2998  000564  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2999  000566  0E00               	movlw	0
  3000  000568  0100               	movlb	0	; () banked
  3001  00056A  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3002  00056C  0E08               	movlw	8
  3003  00056E  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3004  000570  0ED8               	movlw	low setup_AD7147@StageBuffer
  3005  000572  0100               	movlb	0	; () banked
  3006  000574  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3007  000576  0E00               	movlw	high setup_AD7147@StageBuffer
  3008  000578  0100               	movlb	0	; () banked
  3009  00057A  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3010  00057C  0E00               	movlw	0
  3011  00057E  0100               	movlb	0	; () banked
  3012  000580  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3013  000582  0E00               	movlw	0
  3014  000584  6FC8               	movwf	write_AD7147@index& (0+255),b
  3015  000586  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3016  00058A  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3017  00058E  ECFA  F005         	call	_write_AD7147	;wreg free
  3018                           
  3019                           ;AD7147.c: 140: StageBuffer[0]=0xFFFF;
  3020  000592  0100               	movlb	0	; () banked
  3021  000594  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  3022  000596  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;AD7147.c: 141: StageBuffer[1]=0x3FFF;
  3026  000598  0E3F               	movlw	63
  3027  00059A  0100               	movlb	0	; () banked
  3028  00059C  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  3029  00059E  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;AD7147.c: 142: StageBuffer[2]=0x0000;
  3033  0005A0  0E00               	movlw	0
  3034  0005A2  0100               	movlb	0	; () banked
  3035  0005A4  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3036  0005A6  0E00               	movlw	0
  3037  0005A8  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;AD7147.c: 143: StageBuffer[3]=0x2626;
  3041  0005AA  0E26               	movlw	38
  3042  0005AC  0100               	movlb	0	; () banked
  3043  0005AE  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  3044  0005B0  0E26               	movlw	38
  3045  0005B2  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;AD7147.c: 144: StageBuffer[4]=4000;
  3049  0005B4  0E0F               	movlw	15
  3050  0005B6  0100               	movlb	0	; () banked
  3051  0005B8  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  3052  0005BA  0EA0               	movlw	160
  3053  0005BC  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;AD7147.c: 145: StageBuffer[5]=2500;
  3057  0005BE  0E09               	movlw	9
  3058  0005C0  0100               	movlb	0	; () banked
  3059  0005C2  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  3060  0005C4  0EC4               	movlw	196
  3061  0005C6  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3062                           
  3063                           ; BSR set to: 0
  3064                           ;AD7147.c: 146: StageBuffer[6]=4000;
  3065  0005C8  0E0F               	movlw	15
  3066  0005CA  0100               	movlb	0	; () banked
  3067  0005CC  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3068  0005CE  0EA0               	movlw	160
  3069  0005D0  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;AD7147.c: 147: StageBuffer[7]=4000;
  3073  0005D2  0E0F               	movlw	15
  3074  0005D4  0100               	movlb	0	; () banked
  3075  0005D6  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3076  0005D8  0EA0               	movlw	160
  3077  0005DA  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;AD7147.c: 148: write_AD7147(0x0C8, 8, StageBuffer, 0, cdc);
  3081  0005DC  0E00               	movlw	0
  3082  0005DE  0100               	movlb	0	; () banked
  3083  0005E0  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3084  0005E2  0EC8               	movlw	200
  3085  0005E4  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3086  0005E6  0E00               	movlw	0
  3087  0005E8  0100               	movlb	0	; () banked
  3088  0005EA  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3089  0005EC  0E08               	movlw	8
  3090  0005EE  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3091  0005F0  0ED8               	movlw	low setup_AD7147@StageBuffer
  3092  0005F2  0100               	movlb	0	; () banked
  3093  0005F4  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3094  0005F6  0E00               	movlw	high setup_AD7147@StageBuffer
  3095  0005F8  0100               	movlb	0	; () banked
  3096  0005FA  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3097  0005FC  0E00               	movlw	0
  3098  0005FE  0100               	movlb	0	; () banked
  3099  000600  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3100  000602  0E00               	movlw	0
  3101  000604  6FC8               	movwf	write_AD7147@index& (0+255),b
  3102  000606  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3103  00060A  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3104  00060E  ECFA  F005         	call	_write_AD7147	;wreg free
  3105                           
  3106                           ;AD7147.c: 153: StageBuffer[0]=0xFFFF;
  3107  000612  0100               	movlb	0	; () banked
  3108  000614  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  3109  000616  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;AD7147.c: 154: StageBuffer[1]=0x3FFF;
  3113  000618  0E3F               	movlw	63
  3114  00061A  0100               	movlb	0	; () banked
  3115  00061C  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  3116  00061E  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;AD7147.c: 155: StageBuffer[2]=0x0000;
  3120  000620  0E00               	movlw	0
  3121  000622  0100               	movlb	0	; () banked
  3122  000624  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3123  000626  0E00               	movlw	0
  3124  000628  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;AD7147.c: 156: StageBuffer[3]=0x2626;
  3128  00062A  0E26               	movlw	38
  3129  00062C  0100               	movlb	0	; () banked
  3130  00062E  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  3131  000630  0E26               	movlw	38
  3132  000632  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;AD7147.c: 157: StageBuffer[4]=4000;
  3136  000634  0E0F               	movlw	15
  3137  000636  0100               	movlb	0	; () banked
  3138  000638  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  3139  00063A  0EA0               	movlw	160
  3140  00063C  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;AD7147.c: 158: StageBuffer[5]=2500;
  3144  00063E  0E09               	movlw	9
  3145  000640  0100               	movlb	0	; () banked
  3146  000642  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  3147  000644  0EC4               	movlw	196
  3148  000646  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;AD7147.c: 159: StageBuffer[6]=4000;
  3152  000648  0E0F               	movlw	15
  3153  00064A  0100               	movlb	0	; () banked
  3154  00064C  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3155  00064E  0EA0               	movlw	160
  3156  000650  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;AD7147.c: 160: StageBuffer[7]=4000;
  3160  000652  0E0F               	movlw	15
  3161  000654  0100               	movlb	0	; () banked
  3162  000656  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3163  000658  0EA0               	movlw	160
  3164  00065A  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;AD7147.c: 161: write_AD7147(0x0D0, 8, StageBuffer, 0, cdc);
  3168  00065C  0E00               	movlw	0
  3169  00065E  0100               	movlb	0	; () banked
  3170  000660  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3171  000662  0ED0               	movlw	208
  3172  000664  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3173  000666  0E00               	movlw	0
  3174  000668  0100               	movlb	0	; () banked
  3175  00066A  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3176  00066C  0E08               	movlw	8
  3177  00066E  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3178  000670  0ED8               	movlw	low setup_AD7147@StageBuffer
  3179  000672  0100               	movlb	0	; () banked
  3180  000674  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3181  000676  0E00               	movlw	high setup_AD7147@StageBuffer
  3182  000678  0100               	movlb	0	; () banked
  3183  00067A  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3184  00067C  0E00               	movlw	0
  3185  00067E  0100               	movlb	0	; () banked
  3186  000680  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3187  000682  0E00               	movlw	0
  3188  000684  6FC8               	movwf	write_AD7147@index& (0+255),b
  3189  000686  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3190  00068A  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3191  00068E  ECFA  F005         	call	_write_AD7147	;wreg free
  3192                           
  3193                           ;AD7147.c: 166: StageBuffer[0]=0xFFFF;
  3194  000692  0100               	movlb	0	; () banked
  3195  000694  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  3196  000696  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;AD7147.c: 167: StageBuffer[1]=0x3FFF;
  3200  000698  0E3F               	movlw	63
  3201  00069A  0100               	movlb	0	; () banked
  3202  00069C  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  3203  00069E  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;AD7147.c: 168: StageBuffer[2]=0x0000;
  3207  0006A0  0E00               	movlw	0
  3208  0006A2  0100               	movlb	0	; () banked
  3209  0006A4  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3210  0006A6  0E00               	movlw	0
  3211  0006A8  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;AD7147.c: 169: StageBuffer[3]=0x2626;
  3215  0006AA  0E26               	movlw	38
  3216  0006AC  0100               	movlb	0	; () banked
  3217  0006AE  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  3218  0006B0  0E26               	movlw	38
  3219  0006B2  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;AD7147.c: 170: StageBuffer[4]=4000;
  3223  0006B4  0E0F               	movlw	15
  3224  0006B6  0100               	movlb	0	; () banked
  3225  0006B8  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  3226  0006BA  0EA0               	movlw	160
  3227  0006BC  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;AD7147.c: 171: StageBuffer[5]=2500;
  3231  0006BE  0E09               	movlw	9
  3232  0006C0  0100               	movlb	0	; () banked
  3233  0006C2  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  3234  0006C4  0EC4               	movlw	196
  3235  0006C6  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;AD7147.c: 172: StageBuffer[6]=4000;
  3239  0006C8  0E0F               	movlw	15
  3240  0006CA  0100               	movlb	0	; () banked
  3241  0006CC  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3242  0006CE  0EA0               	movlw	160
  3243  0006D0  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;AD7147.c: 173: StageBuffer[7]=4000;
  3247  0006D2  0E0F               	movlw	15
  3248  0006D4  0100               	movlb	0	; () banked
  3249  0006D6  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3250  0006D8  0EA0               	movlw	160
  3251  0006DA  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;AD7147.c: 174: write_AD7147(0x0D8, 8, StageBuffer, 0, cdc);
  3255  0006DC  0E00               	movlw	0
  3256  0006DE  0100               	movlb	0	; () banked
  3257  0006E0  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3258  0006E2  0ED8               	movlw	216
  3259  0006E4  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3260  0006E6  0E00               	movlw	0
  3261  0006E8  0100               	movlb	0	; () banked
  3262  0006EA  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3263  0006EC  0E08               	movlw	8
  3264  0006EE  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3265  0006F0  0ED8               	movlw	low setup_AD7147@StageBuffer
  3266  0006F2  0100               	movlb	0	; () banked
  3267  0006F4  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3268  0006F6  0E00               	movlw	high setup_AD7147@StageBuffer
  3269  0006F8  0100               	movlb	0	; () banked
  3270  0006FA  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3271  0006FC  0E00               	movlw	0
  3272  0006FE  0100               	movlb	0	; () banked
  3273  000700  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3274  000702  0E00               	movlw	0
  3275  000704  6FC8               	movwf	write_AD7147@index& (0+255),b
  3276  000706  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3277  00070A  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3278  00070E  ECFA  F005         	call	_write_AD7147	;wreg free
  3279                           
  3280                           ;AD7147.c: 181: StageBuffer[0] = 0x00B2;
  3281  000712  0E00               	movlw	0
  3282  000714  0100               	movlb	0	; () banked
  3283  000716  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  3284  000718  0EB2               	movlw	178
  3285  00071A  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;AD7147.c: 182: write_AD7147(0x000, 1, StageBuffer, 0, cdc);
  3289  00071C  0E00               	movlw	0
  3290  00071E  0100               	movlb	0	; () banked
  3291  000720  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3292  000722  0E00               	movlw	0
  3293  000724  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3294  000726  0E00               	movlw	0
  3295  000728  0100               	movlb	0	; () banked
  3296  00072A  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3297  00072C  0E01               	movlw	1
  3298  00072E  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3299  000730  0ED8               	movlw	low setup_AD7147@StageBuffer
  3300  000732  0100               	movlb	0	; () banked
  3301  000734  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3302  000736  0E00               	movlw	high setup_AD7147@StageBuffer
  3303  000738  0100               	movlb	0	; () banked
  3304  00073A  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3305  00073C  0E00               	movlw	0
  3306  00073E  0100               	movlb	0	; () banked
  3307  000740  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3308  000742  0E00               	movlw	0
  3309  000744  6FC8               	movwf	write_AD7147@index& (0+255),b
  3310  000746  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3311  00074A  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3312  00074E  ECFA  F005         	call	_write_AD7147	;wreg free
  3313                           
  3314                           ;AD7147.c: 185: read_AD7147(DataBuffer, 0x008, 3, cdc);
  3315  000752  C0D4  F0C2         	movff	setup_AD7147@DataBuffer,read_AD7147@DataBuffer
  3316  000756  C0D5  F0C3         	movff	setup_AD7147@DataBuffer+1,read_AD7147@DataBuffer+1
  3317  00075A  0E00               	movlw	0
  3318  00075C  0100               	movlb	0	; () banked
  3319  00075E  6FC5               	movwf	(read_AD7147@RegisterStartAddress+1)& (0+255),b
  3320  000760  0E08               	movlw	8
  3321  000762  6FC4               	movwf	read_AD7147@RegisterStartAddress& (0+255),b
  3322  000764  0E00               	movlw	0
  3323  000766  0100               	movlb	0	; () banked
  3324  000768  6FC7               	movwf	(read_AD7147@NumberOfRegisters+1)& (0+255),b
  3325  00076A  0E03               	movlw	3
  3326  00076C  6FC6               	movwf	read_AD7147@NumberOfRegisters& (0+255),b
  3327  00076E  C0D6  F0C8         	movff	setup_AD7147@cdc,read_AD7147@cdc
  3328  000772  C0D7  F0C9         	movff	setup_AD7147@cdc+1,read_AD7147@cdc+1
  3329  000776  EC8D  F007         	call	_read_AD7147	;wreg free
  3330                           
  3331                           ;AD7147.c: 187: StageBuffer[2] = 0x3230;
  3332  00077A  0E32               	movlw	50
  3333  00077C  0100               	movlb	0	; () banked
  3334  00077E  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3335  000780  0E30               	movlw	48
  3336  000782  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;AD7147.c: 188: StageBuffer[3] = 0x0819;
  3340  000784  0E08               	movlw	8
  3341  000786  0100               	movlb	0	; () banked
  3342  000788  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  3343  00078A  0E19               	movlw	25
  3344  00078C  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;AD7147.c: 189: StageBuffer[4] = 0x0832;
  3348  00078E  0E08               	movlw	8
  3349  000790  0100               	movlb	0	; () banked
  3350  000792  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  3351  000794  0E32               	movlw	50
  3352  000796  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;AD7147.c: 190: StageBuffer[5] = 0x0000;
  3356  000798  0E00               	movlw	0
  3357  00079A  0100               	movlb	0	; () banked
  3358  00079C  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  3359  00079E  0E00               	movlw	0
  3360  0007A0  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3361                           
  3362                           ; BSR set to: 0
  3363                           ;AD7147.c: 191: StageBuffer[6] = 0x0000;
  3364  0007A2  0E00               	movlw	0
  3365  0007A4  0100               	movlb	0	; () banked
  3366  0007A6  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3367  0007A8  0E00               	movlw	0
  3368  0007AA  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;AD7147.c: 192: StageBuffer[7] = 0x0008;
  3372  0007AC  0E00               	movlw	0
  3373  0007AE  0100               	movlb	0	; () banked
  3374  0007B0  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3375  0007B2  0E08               	movlw	8
  3376  0007B4  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;AD7147.c: 193: write_AD7147(0x002, 6, StageBuffer, 2, cdc);
  3380  0007B6  0E00               	movlw	0
  3381  0007B8  0100               	movlb	0	; () banked
  3382  0007BA  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3383  0007BC  0E02               	movlw	2
  3384  0007BE  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3385  0007C0  0E00               	movlw	0
  3386  0007C2  0100               	movlb	0	; () banked
  3387  0007C4  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3388  0007C6  0E06               	movlw	6
  3389  0007C8  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3390  0007CA  0ED8               	movlw	low setup_AD7147@StageBuffer
  3391  0007CC  0100               	movlb	0	; () banked
  3392  0007CE  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3393  0007D0  0E00               	movlw	high setup_AD7147@StageBuffer
  3394  0007D2  0100               	movlb	0	; () banked
  3395  0007D4  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3396  0007D6  0E00               	movlw	0
  3397  0007D8  0100               	movlb	0	; () banked
  3398  0007DA  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3399  0007DC  0E02               	movlw	2
  3400  0007DE  6FC8               	movwf	write_AD7147@index& (0+255),b
  3401  0007E0  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3402  0007E4  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3403  0007E8  ECFA  F005         	call	_write_AD7147	;wreg free
  3404                           
  3405                           ;AD7147.c: 196: StageBuffer[1] = 0x000F;
  3406  0007EC  0E00               	movlw	0
  3407  0007EE  0100               	movlb	0	; () banked
  3408  0007F0  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  3409  0007F2  0E0F               	movlw	15
  3410  0007F4  6FDA               	movwf	(setup_AD7147@StageBuffer+2)& (0+255),b
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;AD7147.c: 197: write_AD7147(0x001, 1, StageBuffer, 1, cdc);
  3414  0007F6  0E00               	movlw	0
  3415  0007F8  0100               	movlb	0	; () banked
  3416  0007FA  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3417  0007FC  0E01               	movlw	1
  3418  0007FE  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3419  000800  0E00               	movlw	0
  3420  000802  0100               	movlb	0	; () banked
  3421  000804  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3422  000806  0E01               	movlw	1
  3423  000808  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3424  00080A  0ED8               	movlw	low setup_AD7147@StageBuffer
  3425  00080C  0100               	movlb	0	; () banked
  3426  00080E  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3427  000810  0E00               	movlw	high setup_AD7147@StageBuffer
  3428  000812  0100               	movlb	0	; () banked
  3429  000814  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3430  000816  0E00               	movlw	0
  3431  000818  0100               	movlb	0	; () banked
  3432  00081A  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3433  00081C  0E01               	movlw	1
  3434  00081E  6FC8               	movwf	write_AD7147@index& (0+255),b
  3435  000820  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3436  000824  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3437  000828  ECFA  F005         	call	_write_AD7147	;wreg free
  3438                           
  3439                           ;AD7147.c: 200: StageBuffer[2] = 0x4000;
  3440  00082C  0E40               	movlw	64
  3441  00082E  0100               	movlb	0	; () banked
  3442  000830  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3443  000832  0E00               	movlw	0
  3444  000834  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3445                           
  3446                           ; BSR set to: 0
  3447                           ;AD7147.c: 201: write_AD7147(0x002, 1, StageBuffer, 2, cdc);
  3448  000836  0E00               	movlw	0
  3449  000838  0100               	movlb	0	; () banked
  3450  00083A  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3451  00083C  0E02               	movlw	2
  3452  00083E  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3453  000840  0E00               	movlw	0
  3454  000842  0100               	movlb	0	; () banked
  3455  000844  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3456  000846  0E01               	movlw	1
  3457  000848  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3458  00084A  0ED8               	movlw	low setup_AD7147@StageBuffer
  3459  00084C  0100               	movlb	0	; () banked
  3460  00084E  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3461  000850  0E00               	movlw	high setup_AD7147@StageBuffer
  3462  000852  0100               	movlb	0	; () banked
  3463  000854  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3464  000856  0E00               	movlw	0
  3465  000858  0100               	movlb	0	; () banked
  3466  00085A  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3467  00085C  0E02               	movlw	2
  3468  00085E  6FC8               	movwf	write_AD7147@index& (0+255),b
  3469  000860  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3470  000864  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3471  000868  ECFA  F005         	call	_write_AD7147	;wreg free
  3472                           
  3473                           ;AD7147.c: 204: read_AD7147(DataBuffer, 0x008, 3, cdc);
  3474  00086C  C0D4  F0C2         	movff	setup_AD7147@DataBuffer,read_AD7147@DataBuffer
  3475  000870  C0D5  F0C3         	movff	setup_AD7147@DataBuffer+1,read_AD7147@DataBuffer+1
  3476  000874  0E00               	movlw	0
  3477  000876  0100               	movlb	0	; () banked
  3478  000878  6FC5               	movwf	(read_AD7147@RegisterStartAddress+1)& (0+255),b
  3479  00087A  0E08               	movlw	8
  3480  00087C  6FC4               	movwf	read_AD7147@RegisterStartAddress& (0+255),b
  3481  00087E  0E00               	movlw	0
  3482  000880  0100               	movlb	0	; () banked
  3483  000882  6FC7               	movwf	(read_AD7147@NumberOfRegisters+1)& (0+255),b
  3484  000884  0E03               	movlw	3
  3485  000886  6FC6               	movwf	read_AD7147@NumberOfRegisters& (0+255),b
  3486  000888  C0D6  F0C8         	movff	setup_AD7147@cdc,read_AD7147@cdc
  3487  00088C  C0D7  F0C9         	movff	setup_AD7147@cdc+1,read_AD7147@cdc+1
  3488  000890  EC8D  F007         	call	_read_AD7147	;wreg free
  3489  000894  0012               	return		;funcret
  3490  000896                     __end_of_setup_AD7147:
  3491                           	opt stack 0
  3492                           tblptru	equ	0xFF8
  3493                           tblptrh	equ	0xFF7
  3494                           tblptrl	equ	0xFF6
  3495                           tablat	equ	0xFF5
  3496                           postinc0	equ	0xFEE
  3497                           wreg	equ	0xFE8
  3498                           plusw1	equ	0xFE3
  3499                           postinc2	equ	0xFDE
  3500                           postdec2	equ	0xFDD
  3501                           plusw2	equ	0xFDB
  3502                           fsr2h	equ	0xFDA
  3503                           fsr2l	equ	0xFD9
  3504                           status	equ	0xFD8
  3505                           
  3506 ;; *************** function _write_AD7147 *****************
  3507 ;; Defined at:
  3508 ;;		line 208 in file "AD7147.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;  RegisterStar    2   22[BANK0 ] unsigned int 
  3511 ;;  NumberOfRegi    2   24[BANK0 ] unsigned int 
  3512 ;;  OutputBuffer    2   26[BANK0 ] PTR unsigned int 
  3513 ;;		 -> setup_AD7147@StageBuffer(16), 
  3514 ;;  index           2   28[BANK0 ] unsigned int 
  3515 ;;  cdc             2   30[BANK0 ] unsigned int 
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  i               2   38[BANK0 ] unsigned int 
  3518 ;;  Data_Value      2   36[BANK0 ] unsigned int 
  3519 ;;  Register_Val    2   34[BANK0 ] unsigned int 
  3520 ;; Return value:  Size  Location     Type
  3521 ;;                  1    wreg      void 
  3522 ;; Registers used:
  3523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3524 ;; Tracked objects:
  3525 ;;		On entry : 0/0
  3526 ;;		On exit  : 0/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3529 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3530 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3531 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3532 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3533 ;;Total ram usage:       18 bytes
  3534 ;; Hardware stack levels used:    1
  3535 ;; Hardware stack levels required when called:    4
  3536 ;; This function calls:
  3537 ;;		_get_CDC
  3538 ;;		_w32_spi
  3539 ;; This function is called by:
  3540 ;;		_setup_AD7147
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           	psect	text12
  3545  000BF4                     __ptext12:
  3546                           	opt stack 0
  3547  000BF4                     _write_AD7147:
  3548                           	opt stack 25
  3549                           
  3550                           ;AD7147.c: 210: get_CDC(cdc,0);
  3551                           
  3552                           ;incstack = 0
  3553  000BF4  C0CA  F0AC         	movff	write_AD7147@cdc,get_CDC@cdc
  3554  000BF8  C0CB  F0AD         	movff	write_AD7147@cdc+1,get_CDC@cdc+1
  3555  000BFC  0E00               	movlw	0
  3556  000BFE  0100               	movlb	0	; () banked
  3557  000C00  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3558  000C02  0E00               	movlw	0
  3559  000C04  6FAE               	movwf	get_CDC@state& (0+255),b
  3560  000C06  ECE5  F00A         	call	_get_CDC	;wreg free
  3561                           
  3562                           ;AD7147.c: 211: unsigned int Register_Value = 0xE000 + RegisterStartAddress;
  3563  000C0A  0E00               	movlw	0
  3564  000C0C  0100               	movlb	0	; () banked
  3565  000C0E  25C2               	addwf	write_AD7147@RegisterStartAddress& (0+255),w,b
  3566  000C10  0100               	movlb	0	; () banked
  3567  000C12  6FCE               	movwf	write_AD7147@Register_Value& (0+255),b
  3568  000C14  0EE0               	movlw	224
  3569  000C16  0100               	movlb	0	; () banked
  3570  000C18  21C3               	addwfc	(write_AD7147@RegisterStartAddress+1)& (0+255),w,b
  3571  000C1A  0100               	movlb	0	; () banked
  3572  000C1C  6FCF               	movwf	(write_AD7147@Register_Value+1)& (0+255),b
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;AD7147.c: 212: unsigned int Data_Value = 0;
  3576  000C1E  0E00               	movlw	0
  3577  000C20  0100               	movlb	0	; () banked
  3578  000C22  6FD1               	movwf	(write_AD7147@Data_Value+1)& (0+255),b
  3579  000C24  0E00               	movlw	0
  3580  000C26  6FD0               	movwf	write_AD7147@Data_Value& (0+255),b
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;AD7147.c: 213: for (unsigned int i=0; i<NumberOfRegisters; i++)
  3584  000C28  0E00               	movlw	0
  3585  000C2A  0100               	movlb	0	; () banked
  3586  000C2C  6FD3               	movwf	(write_AD7147@i+1)& (0+255),b
  3587  000C2E  0E00               	movlw	0
  3588  000C30  6FD2               	movwf	write_AD7147@i& (0+255),b
  3589  000C32  D033               	goto	l1883
  3590  000C34                     l1877:
  3591                           
  3592                           ; BSR set to: 0
  3593                           ;AD7147.c: 214: {
  3594                           ;AD7147.c: 215: Data_Value = OutputBuffer[index+i];
  3595  000C34  0100               	movlb	0	; () banked
  3596  000C36  51D2               	movf	write_AD7147@i& (0+255),w,b
  3597  000C38  0100               	movlb	0	; () banked
  3598  000C3A  25C8               	addwf	write_AD7147@index& (0+255),w,b
  3599  000C3C  0100               	movlb	0	; () banked
  3600  000C3E  6FCC               	movwf	??_write_AD7147& (0+255),b
  3601  000C40  0100               	movlb	0	; () banked
  3602  000C42  51D3               	movf	(write_AD7147@i+1)& (0+255),w,b
  3603  000C44  0100               	movlb	0	; () banked
  3604  000C46  21C9               	addwfc	(write_AD7147@index+1)& (0+255),w,b
  3605  000C48  0100               	movlb	0	; () banked
  3606  000C4A  6FCD               	movwf	(??_write_AD7147+1)& (0+255),b
  3607  000C4C  90D8               	bcf	status,0,c
  3608  000C4E  0100               	movlb	0	; () banked
  3609  000C50  37CC               	rlcf	??_write_AD7147& (0+255),f,b
  3610  000C52  37CD               	rlcf	(??_write_AD7147+1)& (0+255),f,b
  3611  000C54  0100               	movlb	0	; () banked
  3612  000C56  51CC               	movf	??_write_AD7147& (0+255),w,b
  3613  000C58  0100               	movlb	0	; () banked
  3614  000C5A  25C6               	addwf	write_AD7147@OutputBuffer& (0+255),w,b
  3615  000C5C  6ED9               	movwf	fsr2l,c
  3616  000C5E  0100               	movlb	0	; () banked
  3617  000C60  51CD               	movf	(??_write_AD7147+1)& (0+255),w,b
  3618  000C62  0100               	movlb	0	; () banked
  3619  000C64  21C7               	addwfc	(write_AD7147@OutputBuffer+1)& (0+255),w,b
  3620  000C66  6EDA               	movwf	fsr2h,c
  3621  000C68  CFDE F0D0          	movff	postinc2,write_AD7147@Data_Value
  3622  000C6C  CFDD F0D1          	movff	postdec2,write_AD7147@Data_Value+1
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;AD7147.c: 216: w32_spi(Register_Value+i,Data_Value);
  3626  000C70  0100               	movlb	0	; () banked
  3627  000C72  51D2               	movf	write_AD7147@i& (0+255),w,b
  3628  000C74  0100               	movlb	0	; () banked
  3629  000C76  25CE               	addwf	write_AD7147@Register_Value& (0+255),w,b
  3630  000C78  0100               	movlb	0	; () banked
  3631  000C7A  6FAC               	movwf	w32_spi@address& (0+255),b
  3632  000C7C  0100               	movlb	0	; () banked
  3633  000C7E  51D3               	movf	(write_AD7147@i+1)& (0+255),w,b
  3634  000C80  0100               	movlb	0	; () banked
  3635  000C82  21CF               	addwfc	(write_AD7147@Register_Value+1)& (0+255),w,b
  3636  000C84  0100               	movlb	0	; () banked
  3637  000C86  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  3638  000C88  C0D0  F0AE         	movff	write_AD7147@Data_Value,w32_spi@data
  3639  000C8C  C0D1  F0AF         	movff	write_AD7147@Data_Value+1,w32_spi@data+1
  3640  000C90  EC79  F008         	call	_w32_spi	;wreg free
  3641  000C94  0100               	movlb	0	; () banked
  3642  000C96  4BD2               	infsnz	write_AD7147@i& (0+255),f,b
  3643  000C98  2BD3               	incf	(write_AD7147@i+1)& (0+255),f,b
  3644  000C9A                     l1883:
  3645                           
  3646                           ; BSR set to: 0
  3647  000C9A  0100               	movlb	0	; () banked
  3648  000C9C  51C4               	movf	write_AD7147@NumberOfRegisters& (0+255),w,b
  3649  000C9E  0100               	movlb	0	; () banked
  3650  000CA0  5DD2               	subwf	write_AD7147@i& (0+255),w,b
  3651  000CA2  0100               	movlb	0	; () banked
  3652  000CA4  51C5               	movf	(write_AD7147@NumberOfRegisters+1)& (0+255),w,b
  3653  000CA6  0100               	movlb	0	; () banked
  3654  000CA8  59D3               	subwfb	(write_AD7147@i+1)& (0+255),w,b
  3655  000CAA  A0D8               	btfss	status,0,c
  3656  000CAC  D7C3               	goto	l1877
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;AD7147.c: 217: }
  3660                           ;AD7147.c: 218: get_CDC(cdc,1);
  3661                           
  3662                           ; BSR set to: 0
  3663  000CAE  C0CA  F0AC         	movff	write_AD7147@cdc,get_CDC@cdc
  3664  000CB2  C0CB  F0AD         	movff	write_AD7147@cdc+1,get_CDC@cdc+1
  3665  000CB6  0E00               	movlw	0
  3666  000CB8  0100               	movlb	0	; () banked
  3667  000CBA  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3668  000CBC  0E01               	movlw	1
  3669  000CBE  6FAE               	movwf	get_CDC@state& (0+255),b
  3670  000CC0  ECE5  F00A         	call	_get_CDC	;wreg free
  3671  000CC4  0012               	return		;funcret
  3672  000CC6                     __end_of_write_AD7147:
  3673                           	opt stack 0
  3674                           tblptru	equ	0xFF8
  3675                           tblptrh	equ	0xFF7
  3676                           tblptrl	equ	0xFF6
  3677                           tablat	equ	0xFF5
  3678                           postinc0	equ	0xFEE
  3679                           wreg	equ	0xFE8
  3680                           plusw1	equ	0xFE3
  3681                           postinc2	equ	0xFDE
  3682                           postdec2	equ	0xFDD
  3683                           plusw2	equ	0xFDB
  3684                           fsr2h	equ	0xFDA
  3685                           fsr2l	equ	0xFD9
  3686                           status	equ	0xFD8
  3687                           
  3688 ;; *************** function _read_AD7147 *****************
  3689 ;; Defined at:
  3690 ;;		line 221 in file "AD7147.c"
  3691 ;; Parameters:    Size  Location     Type
  3692 ;;  DataBuffer      2   22[BANK0 ] PTR unsigned int 
  3693 ;;		 -> interrupt_values_cdc2(6), interrupt_values_cdc1(6), 
  3694 ;;  RegisterStar    2   24[BANK0 ] unsigned int 
  3695 ;;  NumberOfRegi    2   26[BANK0 ] unsigned int 
  3696 ;;  cdc             2   28[BANK0 ] unsigned int 
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;  i               2   32[BANK0 ] unsigned int 
  3699 ;;  Register_Val    2   30[BANK0 ] unsigned int 
  3700 ;; Return value:  Size  Location     Type
  3701 ;;                  1    wreg      void 
  3702 ;; Registers used:
  3703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3704 ;; Tracked objects:
  3705 ;;		On entry : 0/0
  3706 ;;		On exit  : 0/0
  3707 ;;		Unchanged: 0/0
  3708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3709 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3710 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3712 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3713 ;;Total ram usage:       12 bytes
  3714 ;; Hardware stack levels used:    1
  3715 ;; Hardware stack levels required when called:    4
  3716 ;; This function calls:
  3717 ;;		_get_CDC
  3718 ;;		_w16_r16_spi
  3719 ;; This function is called by:
  3720 ;;		_setup_AD7147
  3721 ;;		_main
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           	psect	text13
  3726  000F1A                     __ptext13:
  3727                           	opt stack 0
  3728  000F1A                     _read_AD7147:
  3729                           	opt stack 25
  3730                           
  3731                           ;AD7147.c: 223: get_CDC(cdc,0);
  3732                           
  3733                           ;incstack = 0
  3734  000F1A  C0C8  F0AC         	movff	read_AD7147@cdc,get_CDC@cdc
  3735  000F1E  C0C9  F0AD         	movff	read_AD7147@cdc+1,get_CDC@cdc+1
  3736  000F22  0E00               	movlw	0
  3737  000F24  0100               	movlb	0	; () banked
  3738  000F26  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3739  000F28  0E00               	movlw	0
  3740  000F2A  6FAE               	movwf	get_CDC@state& (0+255),b
  3741  000F2C  ECE5  F00A         	call	_get_CDC	;wreg free
  3742                           
  3743                           ;AD7147.c: 224: unsigned int Register_Values = 0xE400 + RegisterStartAddress;
  3744  000F30  0E00               	movlw	0
  3745  000F32  0100               	movlb	0	; () banked
  3746  000F34  25C4               	addwf	read_AD7147@RegisterStartAddress& (0+255),w,b
  3747  000F36  0100               	movlb	0	; () banked
  3748  000F38  6FCA               	movwf	read_AD7147@Register_Values& (0+255),b
  3749  000F3A  0EE4               	movlw	228
  3750  000F3C  0100               	movlb	0	; () banked
  3751  000F3E  21C5               	addwfc	(read_AD7147@RegisterStartAddress+1)& (0+255),w,b
  3752  000F40  0100               	movlb	0	; () banked
  3753  000F42  6FCB               	movwf	(read_AD7147@Register_Values+1)& (0+255),b
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;AD7147.c: 225: for (unsigned int i=0; i<NumberOfRegisters; i++)
  3757  000F44  0E00               	movlw	0
  3758  000F46  0100               	movlb	0	; () banked
  3759  000F48  6FCD               	movwf	(read_AD7147@i+1)& (0+255),b
  3760  000F4A  0E00               	movlw	0
  3761  000F4C  6FCC               	movwf	read_AD7147@i& (0+255),b
  3762  000F4E  D024               	goto	l1897
  3763  000F50                     l1893:
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;AD7147.c: 226: {
  3767                           ;AD7147.c: 227: DataBuffer[i]=w16_r16_spi(Register_Values+i);
  3768  000F50  0100               	movlb	0	; () banked
  3769  000F52  51CC               	movf	read_AD7147@i& (0+255),w,b
  3770  000F54  0100               	movlb	0	; () banked
  3771  000F56  25CA               	addwf	read_AD7147@Register_Values& (0+255),w,b
  3772  000F58  0100               	movlb	0	; () banked
  3773  000F5A  6FAC               	movwf	w16_r16_spi@address& (0+255),b
  3774  000F5C  0100               	movlb	0	; () banked
  3775  000F5E  51CD               	movf	(read_AD7147@i+1)& (0+255),w,b
  3776  000F60  0100               	movlb	0	; () banked
  3777  000F62  21CB               	addwfc	(read_AD7147@Register_Values+1)& (0+255),w,b
  3778  000F64  0100               	movlb	0	; () banked
  3779  000F66  6FAD               	movwf	(w16_r16_spi@address+1)& (0+255),b
  3780  000F68  ECE2  F007         	call	_w16_r16_spi	;wreg free
  3781  000F6C  90D8               	bcf	status,0,c
  3782  000F6E  0100               	movlb	0	; () banked
  3783  000F70  35CC               	rlcf	read_AD7147@i& (0+255),w,b
  3784  000F72  6ED9               	movwf	fsr2l,c
  3785  000F74  0100               	movlb	0	; () banked
  3786  000F76  35CD               	rlcf	(read_AD7147@i+1)& (0+255),w,b
  3787  000F78  6EDA               	movwf	fsr2h,c
  3788  000F7A  0100               	movlb	0	; () banked
  3789  000F7C  51C2               	movf	read_AD7147@DataBuffer& (0+255),w,b
  3790  000F7E  26D9               	addwf	fsr2l,f,c
  3791  000F80  0100               	movlb	0	; () banked
  3792  000F82  51C3               	movf	(read_AD7147@DataBuffer+1)& (0+255),w,b
  3793  000F84  22DA               	addwfc	fsr2h,f,c
  3794  000F86  0100               	movlb	0	; () banked
  3795  000F88  C0AC  FFDE         	movff	?_w16_r16_spi,postinc2
  3796  000F8C  0100               	movlb	0	; () banked
  3797  000F8E  C0AD  FFDD         	movff	?_w16_r16_spi+1,postdec2
  3798                           
  3799                           ; BSR set to: 0
  3800  000F92  0100               	movlb	0	; () banked
  3801  000F94  4BCC               	infsnz	read_AD7147@i& (0+255),f,b
  3802  000F96  2BCD               	incf	(read_AD7147@i+1)& (0+255),f,b
  3803  000F98                     l1897:
  3804                           
  3805                           ; BSR set to: 0
  3806  000F98  0100               	movlb	0	; () banked
  3807  000F9A  51C6               	movf	read_AD7147@NumberOfRegisters& (0+255),w,b
  3808  000F9C  0100               	movlb	0	; () banked
  3809  000F9E  5DCC               	subwf	read_AD7147@i& (0+255),w,b
  3810  000FA0  0100               	movlb	0	; () banked
  3811  000FA2  51C7               	movf	(read_AD7147@NumberOfRegisters+1)& (0+255),w,b
  3812  000FA4  0100               	movlb	0	; () banked
  3813  000FA6  59CD               	subwfb	(read_AD7147@i+1)& (0+255),w,b
  3814  000FA8  A0D8               	btfss	status,0,c
  3815  000FAA  D7D2               	goto	l1893
  3816                           
  3817                           ; BSR set to: 0
  3818                           ;AD7147.c: 228: }
  3819                           ;AD7147.c: 229: get_CDC(cdc,1);
  3820                           
  3821                           ; BSR set to: 0
  3822  000FAC  C0C8  F0AC         	movff	read_AD7147@cdc,get_CDC@cdc
  3823  000FB0  C0C9  F0AD         	movff	read_AD7147@cdc+1,get_CDC@cdc+1
  3824  000FB4  0E00               	movlw	0
  3825  000FB6  0100               	movlb	0	; () banked
  3826  000FB8  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3827  000FBA  0E01               	movlw	1
  3828  000FBC  6FAE               	movwf	get_CDC@state& (0+255),b
  3829  000FBE  ECE5  F00A         	call	_get_CDC	;wreg free
  3830  000FC2  0012               	return		;funcret
  3831  000FC4                     __end_of_read_AD7147:
  3832                           	opt stack 0
  3833                           tblptru	equ	0xFF8
  3834                           tblptrh	equ	0xFF7
  3835                           tblptrl	equ	0xFF6
  3836                           tablat	equ	0xFF5
  3837                           postinc0	equ	0xFEE
  3838                           wreg	equ	0xFE8
  3839                           plusw1	equ	0xFE3
  3840                           postinc2	equ	0xFDE
  3841                           postdec2	equ	0xFDD
  3842                           plusw2	equ	0xFDB
  3843                           fsr2h	equ	0xFDA
  3844                           fsr2l	equ	0xFD9
  3845                           status	equ	0xFD8
  3846                           
  3847 ;; *************** function _read_sensor *****************
  3848 ;; Defined at:
  3849 ;;		line 232 in file "AD7147.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;  sensor_value    2   22[BANK0 ] PTR unsigned int 
  3852 ;;		 -> sensor_values(48), 
  3853 ;;  sensor          2   24[BANK0 ] unsigned int 
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;  cdc_sensor      2   32[BANK0 ] unsigned int 
  3856 ;;  register1       2   30[BANK0 ] unsigned int 
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  1    wreg      void 
  3859 ;; Registers used:
  3860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3866 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3867 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3868 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3869 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3870 ;;Total ram usage:       12 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    5
  3873 ;; This function calls:
  3874 ;;		_sensor_CDC
  3875 ;;		_w16_r16_spi
  3876 ;; This function is called by:
  3877 ;;		_main
  3878 ;; This function uses a non-reentrant model
  3879 ;;
  3880                           
  3881                           	psect	text14
  3882  000CC6                     __ptext14:
  3883                           	opt stack 0
  3884  000CC6                     _read_sensor:
  3885                           	opt stack 25
  3886                           
  3887                           ;AD7147.c: 234: unsigned int cdc_sensor = 0;
  3888                           
  3889                           ;incstack = 0
  3890  000CC6  0E00               	movlw	0
  3891  000CC8  0100               	movlb	0	; () banked
  3892  000CCA  6FCD               	movwf	(read_sensor@cdc_sensor+1)& (0+255),b
  3893  000CCC  0E00               	movlw	0
  3894  000CCE  6FCC               	movwf	read_sensor@cdc_sensor& (0+255),b
  3895                           
  3896                           ; BSR set to: 0
  3897                           ;AD7147.c: 235: if (sensor > 12)
  3898  000CD0  0100               	movlb	0	; () banked
  3899  000CD2  51C5               	movf	(read_sensor@sensor+1)& (0+255),w,b
  3900  000CD4  E105               	bnz	u1000
  3901  000CD6  0E0D               	movlw	13
  3902  000CD8  0100               	movlb	0	; () banked
  3903  000CDA  5DC4               	subwf	read_sensor@sensor& (0+255),w,b
  3904  000CDC  A0D8               	btfss	status,0,c
  3905  000CDE  D00B               	goto	l38
  3906  000CE0                     u1000:
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;AD7147.c: 236: {
  3910                           ;AD7147.c: 237: cdc_sensor = sensor - 12;
  3911  000CE0  0EF4               	movlw	244
  3912  000CE2  0100               	movlb	0	; () banked
  3913  000CE4  25C4               	addwf	read_sensor@sensor& (0+255),w,b
  3914  000CE6  0100               	movlb	0	; () banked
  3915  000CE8  6FCC               	movwf	read_sensor@cdc_sensor& (0+255),b
  3916  000CEA  0EFF               	movlw	255
  3917  000CEC  0100               	movlb	0	; () banked
  3918  000CEE  21C5               	addwfc	(read_sensor@sensor+1)& (0+255),w,b
  3919  000CF0  0100               	movlb	0	; () banked
  3920  000CF2  6FCD               	movwf	(read_sensor@cdc_sensor+1)& (0+255),b
  3921                           
  3922                           ;AD7147.c: 238: }
  3923  000CF4  D004               	goto	l2219
  3924  000CF6                     l38:
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;AD7147.c: 239: else
  3928                           ;AD7147.c: 240: {
  3929                           ;AD7147.c: 241: cdc_sensor = sensor;
  3930  000CF6  C0C4  F0CC         	movff	read_sensor@sensor,read_sensor@cdc_sensor
  3931  000CFA  C0C5  F0CD         	movff	read_sensor@sensor+1,read_sensor@cdc_sensor+1
  3932  000CFE                     l2219:
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;AD7147.c: 242: }
  3936                           ;AD7147.c: 243: unsigned int register1 = 0xE400 + 0x00A + cdc_sensor;
  3937  000CFE  0E0A               	movlw	10
  3938  000D00  0100               	movlb	0	; () banked
  3939  000D02  25CC               	addwf	read_sensor@cdc_sensor& (0+255),w,b
  3940  000D04  0100               	movlb	0	; () banked
  3941  000D06  6FCA               	movwf	read_sensor@register1& (0+255),b
  3942  000D08  0EE4               	movlw	228
  3943  000D0A  0100               	movlb	0	; () banked
  3944  000D0C  21CD               	addwfc	(read_sensor@cdc_sensor+1)& (0+255),w,b
  3945  000D0E  0100               	movlb	0	; () banked
  3946  000D10  6FCB               	movwf	(read_sensor@register1+1)& (0+255),b
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;AD7147.c: 244: sensor_CDC(sensor, 0);
  3950  000D12  C0C4  F0B0         	movff	read_sensor@sensor,sensor_CDC@sensor
  3951  000D16  C0C5  F0B1         	movff	read_sensor@sensor+1,sensor_CDC@sensor+1
  3952  000D1A  0E00               	movlw	0
  3953  000D1C  0100               	movlb	0	; () banked
  3954  000D1E  6FB3               	movwf	(sensor_CDC@state+1)& (0+255),b
  3955  000D20  0E00               	movlw	0
  3956  000D22  6FB2               	movwf	sensor_CDC@state& (0+255),b
  3957  000D24  EC8C  F00A         	call	_sensor_CDC	;wreg free
  3958                           
  3959                           ;AD7147.c: 245: sensor_values[sensor-1] = w16_r16_spi(register1);
  3960  000D28  C0CA  F0AC         	movff	read_sensor@register1,w16_r16_spi@address
  3961  000D2C  C0CB  F0AD         	movff	read_sensor@register1+1,w16_r16_spi@address+1
  3962  000D30  ECE2  F007         	call	_w16_r16_spi	;wreg free
  3963  000D34  0EFE               	movlw	254
  3964  000D36  0100               	movlb	0	; () banked
  3965  000D38  6FC6               	movwf	??_read_sensor& (0+255),b
  3966  000D3A  0EFF               	movlw	255
  3967  000D3C  0100               	movlb	0	; () banked
  3968  000D3E  6FC7               	movwf	(??_read_sensor+1)& (0+255),b
  3969  000D40  C0C4  F0C8         	movff	read_sensor@sensor,??_read_sensor+2
  3970  000D44  C0C5  F0C9         	movff	read_sensor@sensor+1,??_read_sensor+3
  3971  000D48  90D8               	bcf	status,0,c
  3972  000D4A  0100               	movlb	0	; () banked
  3973  000D4C  37C8               	rlcf	(??_read_sensor+2)& (0+255),f,b
  3974  000D4E  37C9               	rlcf	(??_read_sensor+3)& (0+255),f,b
  3975  000D50  0100               	movlb	0	; () banked
  3976  000D52  51C6               	movf	??_read_sensor& (0+255),w,b
  3977  000D54  0100               	movlb	0	; () banked
  3978  000D56  27C8               	addwf	(??_read_sensor+2)& (0+255),f,b
  3979  000D58  0100               	movlb	0	; () banked
  3980  000D5A  51C7               	movf	(??_read_sensor+1)& (0+255),w,b
  3981  000D5C  0100               	movlb	0	; () banked
  3982  000D5E  23C9               	addwfc	(??_read_sensor+3)& (0+255),f,b
  3983  000D60  0100               	movlb	0	; () banked
  3984  000D62  51C8               	movf	(??_read_sensor+2)& (0+255),w,b
  3985  000D64  0100               	movlb	0	; () banked
  3986  000D66  25C2               	addwf	read_sensor@sensor_values& (0+255),w,b
  3987  000D68  6ED9               	movwf	fsr2l,c
  3988  000D6A  0100               	movlb	0	; () banked
  3989  000D6C  51C9               	movf	(??_read_sensor+3)& (0+255),w,b
  3990  000D6E  0100               	movlb	0	; () banked
  3991  000D70  21C3               	addwfc	(read_sensor@sensor_values+1)& (0+255),w,b
  3992  000D72  6EDA               	movwf	fsr2h,c
  3993  000D74  0100               	movlb	0	; () banked
  3994  000D76  C0AC  FFDE         	movff	?_w16_r16_spi,postinc2
  3995  000D7A  0100               	movlb	0	; () banked
  3996  000D7C  C0AD  FFDD         	movff	?_w16_r16_spi+1,postdec2
  3997                           
  3998                           ; BSR set to: 0
  3999                           ;AD7147.c: 246: sensor_CDC(sensor, 1);
  4000  000D80  C0C4  F0B0         	movff	read_sensor@sensor,sensor_CDC@sensor
  4001  000D84  C0C5  F0B1         	movff	read_sensor@sensor+1,sensor_CDC@sensor+1
  4002  000D88  0E00               	movlw	0
  4003  000D8A  0100               	movlb	0	; () banked
  4004  000D8C  6FB3               	movwf	(sensor_CDC@state+1)& (0+255),b
  4005  000D8E  0E01               	movlw	1
  4006  000D90  6FB2               	movwf	sensor_CDC@state& (0+255),b
  4007  000D92  EC8C  F00A         	call	_sensor_CDC	;wreg free
  4008  000D96  0012               	return		;funcret
  4009  000D98                     __end_of_read_sensor:
  4010                           	opt stack 0
  4011                           tblptru	equ	0xFF8
  4012                           tblptrh	equ	0xFF7
  4013                           tblptrl	equ	0xFF6
  4014                           tablat	equ	0xFF5
  4015                           postinc0	equ	0xFEE
  4016                           wreg	equ	0xFE8
  4017                           plusw1	equ	0xFE3
  4018                           postinc2	equ	0xFDE
  4019                           postdec2	equ	0xFDD
  4020                           plusw2	equ	0xFDB
  4021                           fsr2h	equ	0xFDA
  4022                           fsr2l	equ	0xFD9
  4023                           status	equ	0xFD8
  4024                           
  4025 ;; *************** function _sensor_CDC *****************
  4026 ;; Defined at:
  4027 ;;		line 291 in file "AD7147.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;  sensor          2    4[BANK0 ] unsigned int 
  4030 ;;  state           2    6[BANK0 ] unsigned int 
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;		None
  4033 ;; Return value:  Size  Location     Type
  4034 ;;                  1    wreg      void 
  4035 ;; Registers used:
  4036 ;;		wreg, status,2, status,0, cstack
  4037 ;; Tracked objects:
  4038 ;;		On entry : 0/0
  4039 ;;		On exit  : 0/0
  4040 ;;		Unchanged: 0/0
  4041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4042 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4045 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4046 ;;Total ram usage:        4 bytes
  4047 ;; Hardware stack levels used:    1
  4048 ;; Hardware stack levels required when called:    4
  4049 ;; This function calls:
  4050 ;;		_get_CDC
  4051 ;; This function is called by:
  4052 ;;		_read_sensor
  4053 ;;		_read_sensors
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           	psect	text15
  4058  001518                     __ptext15:
  4059                           	opt stack 0
  4060  001518                     _sensor_CDC:
  4061                           	opt stack 25
  4062                           
  4063                           ;AD7147.c: 295: if (sensor > 12)
  4064                           
  4065                           ;incstack = 0
  4066  001518  0100               	movlb	0	; () banked
  4067  00151A  51B1               	movf	(sensor_CDC@sensor+1)& (0+255),w,b
  4068  00151C  E105               	bnz	u870
  4069  00151E  0E0D               	movlw	13
  4070  001520  0100               	movlb	0	; () banked
  4071  001522  5DB0               	subwf	sensor_CDC@sensor& (0+255),w,b
  4072  001524  A0D8               	btfss	status,0,c
  4073  001526  D00C               	goto	l1905
  4074  001528                     u870:
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;AD7147.c: 296: {
  4078                           ;AD7147.c: 297: get_CDC(2,state);
  4079  001528  0E00               	movlw	0
  4080  00152A  0100               	movlb	0	; () banked
  4081  00152C  6FAD               	movwf	(get_CDC@cdc+1)& (0+255),b
  4082  00152E  0E02               	movlw	2
  4083  001530  6FAC               	movwf	get_CDC@cdc& (0+255),b
  4084  001532  C0B2  F0AE         	movff	sensor_CDC@state,get_CDC@state
  4085  001536  C0B3  F0AF         	movff	sensor_CDC@state+1,get_CDC@state+1
  4086  00153A  ECE5  F00A         	call	_get_CDC	;wreg free
  4087                           
  4088                           ;AD7147.c: 298: }
  4089  00153E  0012               	return	
  4090  001540                     l1905:
  4091                           
  4092                           ;AD7147.c: 299: else
  4093                           ;AD7147.c: 300: {
  4094                           ;AD7147.c: 301: get_CDC(1,state);
  4095  001540  0E00               	movlw	0
  4096  001542  0100               	movlb	0	; () banked
  4097  001544  6FAD               	movwf	(get_CDC@cdc+1)& (0+255),b
  4098  001546  0E01               	movlw	1
  4099  001548  6FAC               	movwf	get_CDC@cdc& (0+255),b
  4100  00154A  C0B2  F0AE         	movff	sensor_CDC@state,get_CDC@state
  4101  00154E  C0B3  F0AF         	movff	sensor_CDC@state+1,get_CDC@state+1
  4102  001552  ECE5  F00A         	call	_get_CDC	;wreg free
  4103  001556  0012               	return	
  4104  001558                     __end_of_sensor_CDC:
  4105                           	opt stack 0
  4106                           tblptru	equ	0xFF8
  4107                           tblptrh	equ	0xFF7
  4108                           tblptrl	equ	0xFF6
  4109                           tablat	equ	0xFF5
  4110                           postinc0	equ	0xFEE
  4111                           wreg	equ	0xFE8
  4112                           plusw1	equ	0xFE3
  4113                           postinc2	equ	0xFDE
  4114                           postdec2	equ	0xFDD
  4115                           plusw2	equ	0xFDB
  4116                           fsr2h	equ	0xFDA
  4117                           fsr2l	equ	0xFD9
  4118                           status	equ	0xFD8
  4119                           
  4120 ;; *************** function _memset *****************
  4121 ;; Defined at:
  4122 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memset.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;  p1              2    0[BANK0 ] PTR void 
  4125 ;;		 -> avail_sensors(48), 
  4126 ;;  c               2    2[BANK0 ] int 
  4127 ;;  n               2    4[BANK0 ] unsigned int 
  4128 ;; Auto vars:     Size  Location     Type
  4129 ;;  p               2    6[BANK0 ] PTR unsigned char 
  4130 ;;		 -> avail_sensors(48), 
  4131 ;; Return value:  Size  Location     Type
  4132 ;;                  2    0[BANK0 ] PTR void 
  4133 ;; Registers used:
  4134 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4135 ;; Tracked objects:
  4136 ;;		On entry : 0/0
  4137 ;;		On exit  : 0/0
  4138 ;;		Unchanged: 0/0
  4139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4140 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4141 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4142 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4143 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4144 ;;Total ram usage:        8 bytes
  4145 ;; Hardware stack levels used:    1
  4146 ;; Hardware stack levels required when called:    3
  4147 ;; This function calls:
  4148 ;;		Nothing
  4149 ;; This function is called by:
  4150 ;;		_main
  4151 ;; This function uses a non-reentrant model
  4152 ;;
  4153                           
  4154                           	psect	text16
  4155  001596                     __ptext16:
  4156                           	opt stack 0
  4157  001596                     _memset:
  4158                           	opt stack 27
  4159                           
  4160                           ;incstack = 0
  4161  001596  C0AC  F0B2         	movff	memset@p1,memset@p
  4162  00159A  C0AD  F0B3         	movff	memset@p1+1,memset@p+1
  4163  00159E  D009               	goto	l2353
  4164  0015A0                     l2349:
  4165  0015A0  C0B2  FFD9         	movff	memset@p,fsr2l
  4166  0015A4  C0B3  FFDA         	movff	memset@p+1,fsr2h
  4167  0015A8  C0AE  FFDF         	movff	memset@c,indf2
  4168  0015AC  0100               	movlb	0	; () banked
  4169  0015AE  4BB2               	infsnz	memset@p& (0+255),f,b
  4170  0015B0  2BB3               	incf	(memset@p+1)& (0+255),f,b
  4171  0015B2                     l2353:
  4172  0015B2  0100               	movlb	0	; () banked
  4173  0015B4  07B0               	decf	memset@n& (0+255),f,b
  4174  0015B6  A0D8               	btfss	status,0,c
  4175  0015B8  07B1               	decf	(memset@n+1)& (0+255),f,b
  4176  0015BA  0100               	movlb	0	; () banked
  4177  0015BC  29B0               	incf	memset@n& (0+255),w,b
  4178  0015BE  E1F0               	bnz	l2349
  4179  0015C0  0100               	movlb	0	; () banked
  4180  0015C2  29B1               	incf	(memset@n+1)& (0+255),w,b
  4181  0015C4  B4D8               	btfsc	status,2,c
  4182  0015C6  0012               	return	
  4183  0015C8  D7EB               	goto	l2349
  4184  0015CA                     __end_of_memset:
  4185                           	opt stack 0
  4186                           tblptru	equ	0xFF8
  4187                           tblptrh	equ	0xFF7
  4188                           tblptrl	equ	0xFF6
  4189                           tablat	equ	0xFF5
  4190                           postinc0	equ	0xFEE
  4191                           wreg	equ	0xFE8
  4192                           plusw1	equ	0xFE3
  4193                           indf2	equ	0xFDF
  4194                           postinc2	equ	0xFDE
  4195                           postdec2	equ	0xFDD
  4196                           plusw2	equ	0xFDB
  4197                           fsr2h	equ	0xFDA
  4198                           fsr2l	equ	0xFD9
  4199                           status	equ	0xFD8
  4200                           
  4201 ;; *************** function _init_interrupts *****************
  4202 ;; Defined at:
  4203 ;;		line 21 in file "micro_setup.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;		None
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  1    wreg      void 
  4210 ;; Registers used:
  4211 ;;		None
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4221 ;;Total ram usage:        0 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    3
  4224 ;; This function calls:
  4225 ;;		Nothing
  4226 ;; This function is called by:
  4227 ;;		_main
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           	psect	text17
  4232  0015F4                     __ptext17:
  4233                           	opt stack 0
  4234  0015F4                     _init_interrupts:
  4235                           	opt stack 27
  4236                           
  4237                           ;micro_setup.c: 23: ANCON1bits.ANSEL10 = 0;
  4238                           
  4239                           ; BSR set to: 0
  4240                           ;incstack = 0
  4241  0015F4  010F               	movlb	15	; () banked
  4242  0015F6  955C               	bcf	92,2,b	;volatile
  4243                           
  4244                           ;micro_setup.c: 24: ANCON1bits.ANSEL8 = 0;
  4245  0015F8  010F               	movlb	15	; () banked
  4246  0015FA  915C               	bcf	92,0,b	;volatile
  4247                           
  4248                           ;micro_setup.c: 25: TRISBbits.TRISB0 = 1;
  4249  0015FC  8093               	bsf	3987,0,c	;volatile
  4250                           
  4251                           ;micro_setup.c: 26: TRISBbits.TRISB1 = 1;
  4252  0015FE  8293               	bsf	3987,1,c	;volatile
  4253                           
  4254                           ;micro_setup.c: 28: RCONbits.IPEN = 1;
  4255  001600  8ED0               	bsf	4048,7,c	;volatile
  4256                           
  4257                           ;micro_setup.c: 32: INTCONbits.INT0IE = 1;
  4258  001602  88F2               	bsf	intcon,4,c	;volatile
  4259                           
  4260                           ;micro_setup.c: 33: INTCON2bits.INTEDG0 = 0;
  4261  001604  9CF1               	bcf	intcon2,6,c	;volatile
  4262                           
  4263                           ;micro_setup.c: 34: INTCONbits.INT0IF = 0;
  4264  001606  92F2               	bcf	intcon,1,c	;volatile
  4265                           
  4266                           ;micro_setup.c: 37: INTCON3bits.INT1P = 1;
  4267  001608  8CF0               	bsf	intcon3,6,c	;volatile
  4268                           
  4269                           ;micro_setup.c: 38: INTCON3bits.INT1IE = 1;
  4270  00160A  86F0               	bsf	intcon3,3,c	;volatile
  4271                           
  4272                           ;micro_setup.c: 39: INTCON2bits.INTEDG1 = 0;
  4273  00160C  9AF1               	bcf	intcon2,5,c	;volatile
  4274                           
  4275                           ;micro_setup.c: 40: INTCON3bits.INT1IF = 0;
  4276  00160E  90F0               	bcf	intcon3,0,c	;volatile
  4277                           
  4278                           ;micro_setup.c: 42: INTCONbits.PEIE = 1;
  4279  001610  8CF2               	bsf	intcon,6,c	;volatile
  4280                           
  4281                           ;micro_setup.c: 43: INTCONbits.GIE = 1;
  4282  001612  8EF2               	bsf	intcon,7,c	;volatile
  4283                           
  4284                           ;micro_setup.c: 45: (INTCONbits.GIE = 1);
  4285  001614  8EF2               	bsf	intcon,7,c	;volatile
  4286                           
  4287                           ; BSR set to: 15
  4288  001616  0012               	return		;funcret
  4289  001618                     __end_of_init_interrupts:
  4290                           	opt stack 0
  4291                           tblptru	equ	0xFF8
  4292                           tblptrh	equ	0xFF7
  4293                           tblptrl	equ	0xFF6
  4294                           tablat	equ	0xFF5
  4295                           intcon	equ	0xFF2
  4296                           intcon2	equ	0xFF1
  4297                           intcon3	equ	0xFF0
  4298                           postinc0	equ	0xFEE
  4299                           wreg	equ	0xFE8
  4300                           plusw1	equ	0xFE3
  4301                           indf2	equ	0xFDF
  4302                           postinc2	equ	0xFDE
  4303                           postdec2	equ	0xFDD
  4304                           plusw2	equ	0xFDB
  4305                           fsr2h	equ	0xFDA
  4306                           fsr2l	equ	0xFD9
  4307                           status	equ	0xFD8
  4308                           
  4309 ;; *************** function _get_ID *****************
  4310 ;; Defined at:
  4311 ;;		line 305 in file "AD7147.c"
  4312 ;; Parameters:    Size  Location     Type
  4313 ;;  cdc             2   22[BANK0 ] unsigned int 
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;  result          2   25[BANK0 ] unsigned int 
  4316 ;; Return value:  Size  Location     Type
  4317 ;;                  2   22[BANK0 ] unsigned int 
  4318 ;; Registers used:
  4319 ;;		wreg, status,2, status,0, cstack
  4320 ;; Tracked objects:
  4321 ;;		On entry : 0/0
  4322 ;;		On exit  : 0/0
  4323 ;;		Unchanged: 0/0
  4324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4325 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4326 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4327 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4328 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4329 ;;Total ram usage:        5 bytes
  4330 ;; Hardware stack levels used:    1
  4331 ;; Hardware stack levels required when called:    4
  4332 ;; This function calls:
  4333 ;;		_get_CDC
  4334 ;;		_w16_r16_spi
  4335 ;; This function is called by:
  4336 ;;		_main
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text18
  4341  001374                     __ptext18:
  4342                           	opt stack 0
  4343  001374                     _get_ID:
  4344                           	opt stack 26
  4345                           
  4346                           ;AD7147.c: 307: get_CDC(cdc,0);
  4347                           
  4348                           ; BSR set to: 15
  4349                           ;incstack = 0
  4350  001374  C0C2  F0AC         	movff	get_ID@cdc,get_CDC@cdc
  4351  001378  C0C3  F0AD         	movff	get_ID@cdc+1,get_CDC@cdc+1
  4352  00137C  0E00               	movlw	0
  4353  00137E  0100               	movlb	0	; () banked
  4354  001380  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4355  001382  0E00               	movlw	0
  4356  001384  6FAE               	movwf	get_CDC@state& (0+255),b
  4357  001386  ECE5  F00A         	call	_get_CDC	;wreg free
  4358                           
  4359                           ;AD7147.c: 308: unsigned int result = (w16_r16_spi(0xE400 + 0x017) & 0b1111111111110000)
      +                           >> 4;
  4360  00138A  0EE4               	movlw	228
  4361  00138C  0100               	movlb	0	; () banked
  4362  00138E  6FAD               	movwf	(w16_r16_spi@address+1)& (0+255),b
  4363  001390  0E17               	movlw	23
  4364  001392  6FAC               	movwf	w16_r16_spi@address& (0+255),b
  4365  001394  ECE2  F007         	call	_w16_r16_spi	;wreg free
  4366  001398  0E04               	movlw	4
  4367  00139A  0100               	movlb	0	; () banked
  4368  00139C  6FC4               	movwf	??_get_ID& (0+255),b
  4369  00139E                     u1055:
  4370  00139E  0100               	movlb	0	; () banked
  4371  0013A0  90D8               	bcf	status,0,c
  4372  0013A2  33AD               	rrcf	(?_w16_r16_spi+1)& (0+255),f,b
  4373  0013A4  33AC               	rrcf	?_w16_r16_spi& (0+255),f,b
  4374  0013A6  0100               	movlb	0	; () banked
  4375  0013A8  2FC4               	decfsz	??_get_ID& (0+255),f,b
  4376  0013AA  D7F9               	goto	u1055
  4377  0013AC  0EFF               	movlw	255
  4378  0013AE  0100               	movlb	0	; () banked
  4379  0013B0  15AC               	andwf	?_w16_r16_spi& (0+255),w,b
  4380  0013B2  0100               	movlb	0	; () banked
  4381  0013B4  6FC5               	movwf	get_ID@result& (0+255),b
  4382  0013B6  0E0F               	movlw	15
  4383  0013B8  0100               	movlb	0	; () banked
  4384  0013BA  15AD               	andwf	(?_w16_r16_spi+1)& (0+255),w,b
  4385  0013BC  0100               	movlb	0	; () banked
  4386  0013BE  6FC6               	movwf	(get_ID@result+1)& (0+255),b
  4387                           
  4388                           ;AD7147.c: 309: get_CDC(cdc,1);
  4389  0013C0  C0C2  F0AC         	movff	get_ID@cdc,get_CDC@cdc
  4390  0013C4  C0C3  F0AD         	movff	get_ID@cdc+1,get_CDC@cdc+1
  4391  0013C8  0E00               	movlw	0
  4392  0013CA  0100               	movlb	0	; () banked
  4393  0013CC  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4394  0013CE  0E01               	movlw	1
  4395  0013D0  6FAE               	movwf	get_CDC@state& (0+255),b
  4396  0013D2  ECE5  F00A         	call	_get_CDC	;wreg free
  4397                           
  4398                           ;AD7147.c: 310: return result;
  4399  0013D6  C0C5  F0C2         	movff	get_ID@result,?_get_ID
  4400  0013DA  C0C6  F0C3         	movff	get_ID@result+1,?_get_ID+1
  4401  0013DE  0012               	return	
  4402  0013E0                     __end_of_get_ID:
  4403                           	opt stack 0
  4404                           tblptru	equ	0xFF8
  4405                           tblptrh	equ	0xFF7
  4406                           tblptrl	equ	0xFF6
  4407                           tablat	equ	0xFF5
  4408                           intcon	equ	0xFF2
  4409                           intcon2	equ	0xFF1
  4410                           intcon3	equ	0xFF0
  4411                           postinc0	equ	0xFEE
  4412                           wreg	equ	0xFE8
  4413                           plusw1	equ	0xFE3
  4414                           indf2	equ	0xFDF
  4415                           postinc2	equ	0xFDE
  4416                           postdec2	equ	0xFDD
  4417                           plusw2	equ	0xFDB
  4418                           fsr2h	equ	0xFDA
  4419                           fsr2l	equ	0xFD9
  4420                           status	equ	0xFD8
  4421                           
  4422 ;; *************** function _w16_r16_spi *****************
  4423 ;; Defined at:
  4424 ;;		line 89 in file "spi.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;  address         2    0[BANK0 ] unsigned int 
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;  p4              2   20[BANK0 ] unsigned int 
  4429 ;;  p3              2   18[BANK0 ] unsigned int 
  4430 ;;  blank_high      2   16[BANK0 ] unsigned int 
  4431 ;;  blank_low       2   14[BANK0 ] unsigned int 
  4432 ;;  result          2   12[BANK0 ] unsigned int 
  4433 ;;  address_high    2   10[BANK0 ] unsigned int 
  4434 ;;  address_low     2    8[BANK0 ] unsigned int 
  4435 ;;  p2              2    6[BANK0 ] unsigned int 
  4436 ;;  p1              2    4[BANK0 ] unsigned int 
  4437 ;; Return value:  Size  Location     Type
  4438 ;;                  2    0[BANK0 ] unsigned int 
  4439 ;; Registers used:
  4440 ;;		wreg, status,2, status,0
  4441 ;; Tracked objects:
  4442 ;;		On entry : 0/0
  4443 ;;		On exit  : 0/0
  4444 ;;		Unchanged: 0/0
  4445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4446 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4447 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4448 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4449 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4450 ;;Total ram usage:       22 bytes
  4451 ;; Hardware stack levels used:    1
  4452 ;; Hardware stack levels required when called:    3
  4453 ;; This function calls:
  4454 ;;		Nothing
  4455 ;; This function is called by:
  4456 ;;		_read_AD7147
  4457 ;;		_read_sensor
  4458 ;;		_get_ID
  4459 ;;		_read_sensors
  4460 ;; This function uses a non-reentrant model
  4461 ;;
  4462                           
  4463                           	psect	text19
  4464  000FC4                     __ptext19:
  4465                           	opt stack 0
  4466  000FC4                     _w16_r16_spi:
  4467                           	opt stack 25
  4468                           
  4469                           ;spi.c: 91: unsigned int address_low, address_high, result;
  4470                           ;spi.c: 92: unsigned int blank_low = 0x000;
  4471                           
  4472                           ;incstack = 0
  4473  000FC4  0E00               	movlw	0
  4474  000FC6  0100               	movlb	0	; () banked
  4475  000FC8  6FBB               	movwf	(w16_r16_spi@blank_low+1)& (0+255),b
  4476  000FCA  0E00               	movlw	0
  4477  000FCC  6FBA               	movwf	w16_r16_spi@blank_low& (0+255),b
  4478                           
  4479                           ;spi.c: 93: unsigned int blank_high = 0x000;
  4480  000FCE  0E00               	movlw	0
  4481  000FD0  0100               	movlb	0	; () banked
  4482  000FD2  6FBD               	movwf	(w16_r16_spi@blank_high+1)& (0+255),b
  4483  000FD4  0E00               	movlw	0
  4484  000FD6  6FBC               	movwf	w16_r16_spi@blank_high& (0+255),b
  4485                           
  4486                           ;spi.c: 94: unsigned int p1, p2, p3, p4;
  4487                           ;spi.c: 96: address_low = address & 0xFF;
  4488  000FD8  0100               	movlb	0	; () banked
  4489  000FDA  51AC               	movf	w16_r16_spi@address& (0+255),w,b
  4490  000FDC  0100               	movlb	0	; () banked
  4491  000FDE  6FB4               	movwf	w16_r16_spi@address_low& (0+255),b
  4492  000FE0  6BB5               	clrf	(w16_r16_spi@address_low+1)& (0+255),b
  4493                           
  4494                           ;spi.c: 97: address_high = (address >> 8) & 0xFF;
  4495  000FE2  C0AC  F0AE         	movff	w16_r16_spi@address,??_w16_r16_spi
  4496  000FE6  C0AD  F0AF         	movff	w16_r16_spi@address+1,??_w16_r16_spi+1
  4497  000FEA  C0AF  F0AE         	movff	??_w16_r16_spi+1,??_w16_r16_spi
  4498  000FEE  0100               	movlb	0	; () banked
  4499  000FF0  6BAF               	clrf	(??_w16_r16_spi+1)& (0+255),b
  4500  000FF2  0100               	movlb	0	; () banked
  4501  000FF4  51AE               	movf	??_w16_r16_spi& (0+255),w,b
  4502  000FF6  0100               	movlb	0	; () banked
  4503  000FF8  6FB6               	movwf	w16_r16_spi@address_high& (0+255),b
  4504  000FFA  6BB7               	clrf	(w16_r16_spi@address_high+1)& (0+255),b
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;spi.c: 99: SSPBUF = address_high;
  4508  000FFC  C0B6  FFC9         	movff	w16_r16_spi@address_high,4041	;volatile
  4509  001000                     l300:
  4510  001000  A0C7               	btfss	4039,0,c	;volatile
  4511  001002  D7FE               	goto	l300
  4512                           
  4513                           ;spi.c: 101: p1 = SSPBUF;
  4514  001004  CFC9 F0B0          	movff	4041,w16_r16_spi@p1	;volatile
  4515  001008  0100               	movlb	0	; () banked
  4516  00100A  6BB1               	clrf	(w16_r16_spi@p1+1)& (0+255),b
  4517                           
  4518                           ;spi.c: 103: SSPBUF = address_low;
  4519  00100C  C0B4  FFC9         	movff	w16_r16_spi@address_low,4041	;volatile
  4520  001010                     l303:
  4521  001010  A0C7               	btfss	4039,0,c	;volatile
  4522  001012  D7FE               	goto	l303
  4523                           
  4524                           ;spi.c: 105: p2 = SSPBUF;
  4525  001014  CFC9 F0B2          	movff	4041,w16_r16_spi@p2	;volatile
  4526  001018  0100               	movlb	0	; () banked
  4527  00101A  6BB3               	clrf	(w16_r16_spi@p2+1)& (0+255),b
  4528                           
  4529                           ;spi.c: 107: SSPBUF = blank_high;
  4530  00101C  C0BC  FFC9         	movff	w16_r16_spi@blank_high,4041	;volatile
  4531  001020                     l306:
  4532  001020  A0C7               	btfss	4039,0,c	;volatile
  4533  001022  D7FE               	goto	l306
  4534                           
  4535                           ;spi.c: 109: p3 = SSPBUF;
  4536  001024  CFC9 F0BE          	movff	4041,w16_r16_spi@p3	;volatile
  4537  001028  0100               	movlb	0	; () banked
  4538  00102A  6BBF               	clrf	(w16_r16_spi@p3+1)& (0+255),b
  4539                           
  4540                           ;spi.c: 111: SSPBUF = blank_low;
  4541  00102C  C0BA  FFC9         	movff	w16_r16_spi@blank_low,4041	;volatile
  4542  001030                     l309:
  4543  001030  A0C7               	btfss	4039,0,c	;volatile
  4544  001032  D7FE               	goto	l309
  4545                           
  4546                           ;spi.c: 113: p4 = SSPBUF;
  4547  001034  CFC9 F0C0          	movff	4041,w16_r16_spi@p4	;volatile
  4548  001038  0100               	movlb	0	; () banked
  4549  00103A  6BC1               	clrf	(w16_r16_spi@p4+1)& (0+255),b
  4550                           
  4551                           ; BSR set to: 0
  4552                           ;spi.c: 115: result = (p3 << 8) + p4;
  4553  00103C  0100               	movlb	0	; () banked
  4554  00103E  51BE               	movf	w16_r16_spi@p3& (0+255),w,b
  4555  001040  0100               	movlb	0	; () banked
  4556  001042  6FAF               	movwf	(??_w16_r16_spi+1)& (0+255),b
  4557  001044  6BAE               	clrf	??_w16_r16_spi& (0+255),b
  4558  001046  0100               	movlb	0	; () banked
  4559  001048  51C0               	movf	w16_r16_spi@p4& (0+255),w,b
  4560  00104A  0100               	movlb	0	; () banked
  4561  00104C  25AE               	addwf	??_w16_r16_spi& (0+255),w,b
  4562  00104E  0100               	movlb	0	; () banked
  4563  001050  6FB8               	movwf	w16_r16_spi@result& (0+255),b
  4564  001052  0100               	movlb	0	; () banked
  4565  001054  51C1               	movf	(w16_r16_spi@p4+1)& (0+255),w,b
  4566  001056  0100               	movlb	0	; () banked
  4567  001058  21AF               	addwfc	(??_w16_r16_spi+1)& (0+255),w,b
  4568  00105A  0100               	movlb	0	; () banked
  4569  00105C  6FB9               	movwf	(w16_r16_spi@result+1)& (0+255),b
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;spi.c: 116: return result;
  4573  00105E  C0B8  F0AC         	movff	w16_r16_spi@result,?_w16_r16_spi
  4574  001062  C0B9  F0AD         	movff	w16_r16_spi@result+1,?_w16_r16_spi+1
  4575  001066  0012               	return	
  4576  001068                     __end_of_w16_r16_spi:
  4577                           	opt stack 0
  4578                           tblptru	equ	0xFF8
  4579                           tblptrh	equ	0xFF7
  4580                           tblptrl	equ	0xFF6
  4581                           tablat	equ	0xFF5
  4582                           intcon	equ	0xFF2
  4583                           intcon2	equ	0xFF1
  4584                           intcon3	equ	0xFF0
  4585                           postinc0	equ	0xFEE
  4586                           wreg	equ	0xFE8
  4587                           plusw1	equ	0xFE3
  4588                           indf2	equ	0xFDF
  4589                           postinc2	equ	0xFDE
  4590                           postdec2	equ	0xFDD
  4591                           plusw2	equ	0xFDB
  4592                           fsr2h	equ	0xFDA
  4593                           fsr2l	equ	0xFD9
  4594                           status	equ	0xFD8
  4595                           
  4596 ;; *************** function _blink_LED *****************
  4597 ;; Defined at:
  4598 ;;		line 329 in file "AD7147.c"
  4599 ;; Parameters:    Size  Location     Type
  4600 ;;  cdc             2   22[BANK0 ] unsigned int 
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;  message         2   24[BANK0 ] unsigned int 
  4603 ;; Return value:  Size  Location     Type
  4604 ;;                  1    wreg      void 
  4605 ;; Registers used:
  4606 ;;		wreg, status,2, status,0, cstack
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4612 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4613 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4615 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4616 ;;Total ram usage:        4 bytes
  4617 ;; Hardware stack levels used:    1
  4618 ;; Hardware stack levels required when called:    5
  4619 ;; This function calls:
  4620 ;;		_delay_ms
  4621 ;;		_get_CDC
  4622 ;;		_w32_spi
  4623 ;; This function is called by:
  4624 ;;		_main
  4625 ;; This function uses a non-reentrant model
  4626 ;;
  4627                           
  4628                           	psect	text20
  4629  000D98                     __ptext20:
  4630                           	opt stack 0
  4631  000D98                     _blink_LED:
  4632                           	opt stack 25
  4633                           
  4634                           ;AD7147.c: 331: get_CDC(cdc,0);
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;incstack = 0
  4638  000D98  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4639  000D9C  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4640  000DA0  0E00               	movlw	0
  4641  000DA2  0100               	movlb	0	; () banked
  4642  000DA4  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4643  000DA6  0E00               	movlw	0
  4644  000DA8  6FAE               	movwf	get_CDC@state& (0+255),b
  4645  000DAA  ECE5  F00A         	call	_get_CDC	;wreg free
  4646                           
  4647                           ;AD7147.c: 332: unsigned int message = 0b0010000000000000;
  4648  000DAE  0E20               	movlw	32
  4649  000DB0  0100               	movlb	0	; () banked
  4650  000DB2  6FC5               	movwf	(blink_LED@message+1)& (0+255),b
  4651  000DB4  0E00               	movlw	0
  4652  000DB6  6FC4               	movwf	blink_LED@message& (0+255),b
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;AD7147.c: 333: w32_spi((0xE000 + 0x005),message);
  4656  000DB8  0EE0               	movlw	224
  4657  000DBA  0100               	movlb	0	; () banked
  4658  000DBC  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  4659  000DBE  0E05               	movlw	5
  4660  000DC0  6FAC               	movwf	w32_spi@address& (0+255),b
  4661  000DC2  C0C4  F0AE         	movff	blink_LED@message,w32_spi@data
  4662  000DC6  C0C5  F0AF         	movff	blink_LED@message+1,w32_spi@data+1
  4663  000DCA  EC79  F008         	call	_w32_spi	;wreg free
  4664                           
  4665                           ;AD7147.c: 334: delay_ms(10);
  4666  000DCE  0E00               	movlw	0
  4667  000DD0  0100               	movlb	0	; () banked
  4668  000DD2  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  4669  000DD4  0E0A               	movlw	10
  4670  000DD6  6FB4               	movwf	delay_ms@n& (0+255),b
  4671  000DD8  EC43  F00A         	call	_delay_ms	;wreg free
  4672                           
  4673                           ;AD7147.c: 335: get_CDC(cdc,1);
  4674  000DDC  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4675  000DE0  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4676  000DE4  0E00               	movlw	0
  4677  000DE6  0100               	movlb	0	; () banked
  4678  000DE8  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4679  000DEA  0E01               	movlw	1
  4680  000DEC  6FAE               	movwf	get_CDC@state& (0+255),b
  4681  000DEE  ECE5  F00A         	call	_get_CDC	;wreg free
  4682                           
  4683                           ;AD7147.c: 336: delay_ms(1000);
  4684  000DF2  0E03               	movlw	3
  4685  000DF4  0100               	movlb	0	; () banked
  4686  000DF6  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  4687  000DF8  0EE8               	movlw	232
  4688  000DFA  6FB4               	movwf	delay_ms@n& (0+255),b
  4689  000DFC  EC43  F00A         	call	_delay_ms	;wreg free
  4690                           
  4691                           ;AD7147.c: 337: get_CDC(cdc,0);
  4692  000E00  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4693  000E04  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4694  000E08  0E00               	movlw	0
  4695  000E0A  0100               	movlb	0	; () banked
  4696  000E0C  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4697  000E0E  0E00               	movlw	0
  4698  000E10  6FAE               	movwf	get_CDC@state& (0+255),b
  4699  000E12  ECE5  F00A         	call	_get_CDC	;wreg free
  4700                           
  4701                           ;AD7147.c: 338: unsigned int message = 0b0011000000000000;
  4702  000E16  0E30               	movlw	48
  4703  000E18  0100               	movlb	0	; () banked
  4704  000E1A  6FC5               	movwf	(blink_LED@message+1)& (0+255),b
  4705  000E1C  0E00               	movlw	0
  4706  000E1E  6FC4               	movwf	blink_LED@message& (0+255),b
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;AD7147.c: 339: w32_spi((0xE000 + 0x005),message);
  4710  000E20  0EE0               	movlw	224
  4711  000E22  0100               	movlb	0	; () banked
  4712  000E24  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  4713  000E26  0E05               	movlw	5
  4714  000E28  6FAC               	movwf	w32_spi@address& (0+255),b
  4715  000E2A  C0C4  F0AE         	movff	blink_LED@message,w32_spi@data
  4716  000E2E  C0C5  F0AF         	movff	blink_LED@message+1,w32_spi@data+1
  4717  000E32  EC79  F008         	call	_w32_spi	;wreg free
  4718                           
  4719                           ;AD7147.c: 340: delay_ms(10);
  4720  000E36  0E00               	movlw	0
  4721  000E38  0100               	movlb	0	; () banked
  4722  000E3A  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  4723  000E3C  0E0A               	movlw	10
  4724  000E3E  6FB4               	movwf	delay_ms@n& (0+255),b
  4725  000E40  EC43  F00A         	call	_delay_ms	;wreg free
  4726                           
  4727                           ;AD7147.c: 341: get_CDC(cdc,1);
  4728  000E44  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4729  000E48  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4730  000E4C  0E00               	movlw	0
  4731  000E4E  0100               	movlb	0	; () banked
  4732  000E50  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4733  000E52  0E01               	movlw	1
  4734  000E54  6FAE               	movwf	get_CDC@state& (0+255),b
  4735  000E56  ECE5  F00A         	call	_get_CDC	;wreg free
  4736  000E5A  0012               	return		;funcret
  4737  000E5C                     __end_of_blink_LED:
  4738                           	opt stack 0
  4739                           tblptru	equ	0xFF8
  4740                           tblptrh	equ	0xFF7
  4741                           tblptrl	equ	0xFF6
  4742                           tablat	equ	0xFF5
  4743                           intcon	equ	0xFF2
  4744                           intcon2	equ	0xFF1
  4745                           intcon3	equ	0xFF0
  4746                           postinc0	equ	0xFEE
  4747                           wreg	equ	0xFE8
  4748                           plusw1	equ	0xFE3
  4749                           indf2	equ	0xFDF
  4750                           postinc2	equ	0xFDE
  4751                           postdec2	equ	0xFDD
  4752                           plusw2	equ	0xFDB
  4753                           fsr2h	equ	0xFDA
  4754                           fsr2l	equ	0xFD9
  4755                           status	equ	0xFD8
  4756                           
  4757 ;; *************** function _w32_spi *****************
  4758 ;; Defined at:
  4759 ;;		line 26 in file "spi.c"
  4760 ;; Parameters:    Size  Location     Type
  4761 ;;  address         2    0[BANK0 ] unsigned int 
  4762 ;;  data            2    2[BANK0 ] unsigned int 
  4763 ;; Auto vars:     Size  Location     Type
  4764 ;;  data_high       2   20[BANK0 ] unsigned int 
  4765 ;;  data_low        2   18[BANK0 ] unsigned int 
  4766 ;;  address_high    2   16[BANK0 ] unsigned int 
  4767 ;;  address_low     2   14[BANK0 ] unsigned int 
  4768 ;;  p4              2   12[BANK0 ] unsigned int 
  4769 ;;  p3              2   10[BANK0 ] unsigned int 
  4770 ;;  p2              2    8[BANK0 ] unsigned int 
  4771 ;;  p1              2    6[BANK0 ] unsigned int 
  4772 ;; Return value:  Size  Location     Type
  4773 ;;                  1    wreg      void 
  4774 ;; Registers used:
  4775 ;;		wreg, status,2
  4776 ;; Tracked objects:
  4777 ;;		On entry : 0/0
  4778 ;;		On exit  : 0/0
  4779 ;;		Unchanged: 0/0
  4780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4781 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4782 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4783 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4784 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4785 ;;Total ram usage:       22 bytes
  4786 ;; Hardware stack levels used:    1
  4787 ;; Hardware stack levels required when called:    3
  4788 ;; This function calls:
  4789 ;;		Nothing
  4790 ;; This function is called by:
  4791 ;;		_write_AD7147
  4792 ;;		_switch_LED
  4793 ;;		_blink_LED
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           	psect	text21
  4798  0010F2                     __ptext21:
  4799                           	opt stack 0
  4800  0010F2                     _w32_spi:
  4801                           	opt stack 26
  4802                           
  4803                           ;spi.c: 28: unsigned int address_low, address_high, data_low, data_high;
  4804                           ;spi.c: 30: address_low = address & 0xFF;
  4805                           
  4806                           ;incstack = 0
  4807  0010F2  0100               	movlb	0	; () banked
  4808  0010F4  51AC               	movf	w32_spi@address& (0+255),w,b
  4809  0010F6  0100               	movlb	0	; () banked
  4810  0010F8  6FBA               	movwf	w32_spi@address_low& (0+255),b
  4811  0010FA  6BBB               	clrf	(w32_spi@address_low+1)& (0+255),b
  4812                           
  4813                           ;spi.c: 31: address_high = (address >> 8) & 0xFF;
  4814  0010FC  C0AC  F0B0         	movff	w32_spi@address,??_w32_spi
  4815  001100  C0AD  F0B1         	movff	w32_spi@address+1,??_w32_spi+1
  4816  001104  C0B1  F0B0         	movff	??_w32_spi+1,??_w32_spi
  4817  001108  0100               	movlb	0	; () banked
  4818  00110A  6BB1               	clrf	(??_w32_spi+1)& (0+255),b
  4819  00110C  0100               	movlb	0	; () banked
  4820  00110E  51B0               	movf	??_w32_spi& (0+255),w,b
  4821  001110  0100               	movlb	0	; () banked
  4822  001112  6FBC               	movwf	w32_spi@address_high& (0+255),b
  4823  001114  6BBD               	clrf	(w32_spi@address_high+1)& (0+255),b
  4824                           
  4825                           ;spi.c: 33: data_low = data & 0xFF;
  4826  001116  0100               	movlb	0	; () banked
  4827  001118  51AE               	movf	w32_spi@data& (0+255),w,b
  4828  00111A  0100               	movlb	0	; () banked
  4829  00111C  6FBE               	movwf	w32_spi@data_low& (0+255),b
  4830  00111E  6BBF               	clrf	(w32_spi@data_low+1)& (0+255),b
  4831                           
  4832                           ;spi.c: 34: data_high = (data >> 8) & 0xFF;
  4833  001120  C0AE  F0B0         	movff	w32_spi@data,??_w32_spi
  4834  001124  C0AF  F0B1         	movff	w32_spi@data+1,??_w32_spi+1
  4835  001128  C0B1  F0B0         	movff	??_w32_spi+1,??_w32_spi
  4836  00112C  0100               	movlb	0	; () banked
  4837  00112E  6BB1               	clrf	(??_w32_spi+1)& (0+255),b
  4838  001130  0100               	movlb	0	; () banked
  4839  001132  51B0               	movf	??_w32_spi& (0+255),w,b
  4840  001134  0100               	movlb	0	; () banked
  4841  001136  6FC0               	movwf	w32_spi@data_high& (0+255),b
  4842  001138  6BC1               	clrf	(w32_spi@data_high+1)& (0+255),b
  4843                           
  4844                           ; BSR set to: 0
  4845                           ;spi.c: 36: SSPBUF = address_high;
  4846  00113A  C0BC  FFC9         	movff	w32_spi@address_high,4041	;volatile
  4847  00113E                     l267:
  4848  00113E  A0C7               	btfss	4039,0,c	;volatile
  4849  001140  D7FE               	goto	l267
  4850                           
  4851                           ;spi.c: 38: unsigned int p1 = SSPBUF;
  4852  001142  CFC9 F0B2          	movff	4041,w32_spi@p1	;volatile
  4853  001146  0100               	movlb	0	; () banked
  4854  001148  6BB3               	clrf	(w32_spi@p1+1)& (0+255),b
  4855                           
  4856                           ;spi.c: 40: SSPBUF = address_low;
  4857  00114A  C0BA  FFC9         	movff	w32_spi@address_low,4041	;volatile
  4858  00114E                     l270:
  4859  00114E  A0C7               	btfss	4039,0,c	;volatile
  4860  001150  D7FE               	goto	l270
  4861                           
  4862                           ;spi.c: 42: unsigned int p2 = SSPBUF;
  4863  001152  CFC9 F0B4          	movff	4041,w32_spi@p2	;volatile
  4864  001156  0100               	movlb	0	; () banked
  4865  001158  6BB5               	clrf	(w32_spi@p2+1)& (0+255),b
  4866                           
  4867                           ;spi.c: 44: SSPBUF = data_high;
  4868  00115A  C0C0  FFC9         	movff	w32_spi@data_high,4041	;volatile
  4869  00115E                     l273:
  4870  00115E  A0C7               	btfss	4039,0,c	;volatile
  4871  001160  D7FE               	goto	l273
  4872                           
  4873                           ;spi.c: 46: unsigned int p3 = SSPBUF;
  4874  001162  CFC9 F0B6          	movff	4041,w32_spi@p3	;volatile
  4875  001166  0100               	movlb	0	; () banked
  4876  001168  6BB7               	clrf	(w32_spi@p3+1)& (0+255),b
  4877                           
  4878                           ;spi.c: 48: SSPBUF = data_low;
  4879  00116A  C0BE  FFC9         	movff	w32_spi@data_low,4041	;volatile
  4880  00116E                     l276:
  4881  00116E  A0C7               	btfss	4039,0,c	;volatile
  4882  001170  D7FE               	goto	l276
  4883                           
  4884                           ;spi.c: 50: unsigned int p4 = SSPBUF;
  4885  001172  CFC9 F0B8          	movff	4041,w32_spi@p4	;volatile
  4886  001176  0100               	movlb	0	; () banked
  4887  001178  6BB9               	clrf	(w32_spi@p4+1)& (0+255),b
  4888                           
  4889                           ; BSR set to: 0
  4890  00117A  0012               	return		;funcret
  4891  00117C                     __end_of_w32_spi:
  4892                           	opt stack 0
  4893                           tblptru	equ	0xFF8
  4894                           tblptrh	equ	0xFF7
  4895                           tblptrl	equ	0xFF6
  4896                           tablat	equ	0xFF5
  4897                           intcon	equ	0xFF2
  4898                           intcon2	equ	0xFF1
  4899                           intcon3	equ	0xFF0
  4900                           postinc0	equ	0xFEE
  4901                           wreg	equ	0xFE8
  4902                           plusw1	equ	0xFE3
  4903                           indf2	equ	0xFDF
  4904                           postinc2	equ	0xFDE
  4905                           postdec2	equ	0xFDD
  4906                           plusw2	equ	0xFDB
  4907                           fsr2h	equ	0xFDA
  4908                           fsr2l	equ	0xFD9
  4909                           status	equ	0xFD8
  4910                           
  4911 ;; *************** function _get_CDC *****************
  4912 ;; Defined at:
  4913 ;;		line 343 in file "AD7147.c"
  4914 ;; Parameters:    Size  Location     Type
  4915 ;;  cdc             2    0[BANK0 ] unsigned int 
  4916 ;;  state           2    2[BANK0 ] unsigned int 
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;		None
  4919 ;; Return value:  Size  Location     Type
  4920 ;;                  1    wreg      void 
  4921 ;; Registers used:
  4922 ;;		wreg, status,2, status,0
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4928 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4931 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4932 ;;Total ram usage:        4 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; Hardware stack levels required when called:    3
  4935 ;; This function calls:
  4936 ;;		Nothing
  4937 ;; This function is called by:
  4938 ;;		_write_AD7147
  4939 ;;		_read_AD7147
  4940 ;;		_sensor_CDC
  4941 ;;		_get_ID
  4942 ;;		_switch_LED
  4943 ;;		_blink_LED
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           	psect	text22
  4948  0015CA                     __ptext22:
  4949                           	opt stack 0
  4950  0015CA                     _get_CDC:
  4951                           	opt stack 26
  4952                           
  4953                           ;AD7147.c: 345: if (state == 1)
  4954                           
  4955                           ; BSR set to: 0
  4956                           ;incstack = 0
  4957  0015CA  0100               	movlb	0	; () banked
  4958  0015CC  05AE               	decf	get_CDC@state& (0+255),w,b
  4959  0015CE  0100               	movlb	0	; () banked
  4960  0015D0  11AF               	iorwf	(get_CDC@state+1)& (0+255),w,b
  4961  0015D2  A4D8               	btfss	status,2,c
  4962  0015D4  D003               	goto	l1807
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;AD7147.c: 346: {
  4966                           ;AD7147.c: 347: LATCbits.LATC1 = 1;
  4967  0015D6  828B               	bsf	3979,1,c	;volatile
  4968                           
  4969                           ;AD7147.c: 348: LATCbits.LATC0 = 1;
  4970  0015D8  808B               	bsf	3979,0,c	;volatile
  4971                           
  4972                           ;AD7147.c: 349: }
  4973  0015DA  0012               	return	
  4974  0015DC                     l1807:
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;AD7147.c: 350: else
  4978                           ;AD7147.c: 351: {
  4979                           ;AD7147.c: 352: if (cdc == 1)
  4980  0015DC  0100               	movlb	0	; () banked
  4981  0015DE  05AC               	decf	get_CDC@cdc& (0+255),w,b
  4982  0015E0  0100               	movlb	0	; () banked
  4983  0015E2  11AD               	iorwf	(get_CDC@cdc+1)& (0+255),w,b
  4984  0015E4  A4D8               	btfss	status,2,c
  4985  0015E6  D003               	goto	l79
  4986                           
  4987                           ; BSR set to: 0
  4988                           ;AD7147.c: 353: {
  4989                           ;AD7147.c: 354: LATCbits.LATC1 = 0;
  4990  0015E8  928B               	bcf	3979,1,c	;volatile
  4991                           
  4992                           ;AD7147.c: 355: LATCbits.LATC0 = 1;
  4993  0015EA  808B               	bsf	3979,0,c	;volatile
  4994                           
  4995                           ;AD7147.c: 356: }
  4996  0015EC  0012               	return	
  4997  0015EE                     l79:
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;AD7147.c: 357: else
  5001                           ;AD7147.c: 358: {
  5002                           ;AD7147.c: 359: LATCbits.LATC0 = 0;
  5003  0015EE  908B               	bcf	3979,0,c	;volatile
  5004                           
  5005                           ;AD7147.c: 360: LATCbits.LATC1 = 1;
  5006  0015F0  828B               	bsf	3979,1,c	;volatile
  5007                           
  5008                           ; BSR set to: 0
  5009  0015F2  0012               	return	
  5010  0015F4                     __end_of_get_CDC:
  5011                           	opt stack 0
  5012                           tblptru	equ	0xFF8
  5013                           tblptrh	equ	0xFF7
  5014                           tblptrl	equ	0xFF6
  5015                           tablat	equ	0xFF5
  5016                           intcon	equ	0xFF2
  5017                           intcon2	equ	0xFF1
  5018                           intcon3	equ	0xFF0
  5019                           postinc0	equ	0xFEE
  5020                           wreg	equ	0xFE8
  5021                           plusw1	equ	0xFE3
  5022                           indf2	equ	0xFDF
  5023                           postinc2	equ	0xFDE
  5024                           postdec2	equ	0xFDD
  5025                           plusw2	equ	0xFDB
  5026                           fsr2h	equ	0xFDA
  5027                           fsr2l	equ	0xFD9
  5028                           status	equ	0xFD8
  5029                           
  5030 ;; *************** function _delay_ms *****************
  5031 ;; Defined at:
  5032 ;;		line 92 in file "micro_setup.c"
  5033 ;; Parameters:    Size  Location     Type
  5034 ;;  n               2    8[BANK0 ] int 
  5035 ;; Auto vars:     Size  Location     Type
  5036 ;;  j               2   11[BANK0 ] int 
  5037 ;; Return value:  Size  Location     Type
  5038 ;;                  1    wreg      void 
  5039 ;; Registers used:
  5040 ;;		wreg, status,2, status,0, cstack
  5041 ;; Tracked objects:
  5042 ;;		On entry : 0/0
  5043 ;;		On exit  : 0/0
  5044 ;;		Unchanged: 0/0
  5045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5046 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5047 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5048 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5049 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5050 ;;Total ram usage:        5 bytes
  5051 ;; Hardware stack levels used:    1
  5052 ;; Hardware stack levels required when called:    4
  5053 ;; This function calls:
  5054 ;;		___awdiv
  5055 ;; This function is called by:
  5056 ;;		_switch_LED
  5057 ;;		_blink_LED
  5058 ;;		_main
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           	psect	text23
  5063  001486                     __ptext23:
  5064                           	opt stack 0
  5065  001486                     _delay_ms:
  5066                           	opt stack 25
  5067                           
  5068                           ;micro_setup.c: 94: int j = n/10;
  5069                           
  5070                           ; BSR set to: 0
  5071                           ;incstack = 0
  5072  001486  C0B4  F0AC         	movff	delay_ms@n,___awdiv@dividend
  5073  00148A  C0B5  F0AD         	movff	delay_ms@n+1,___awdiv@dividend+1
  5074  00148E  0E00               	movlw	0
  5075  001490  0100               	movlb	0	; () banked
  5076  001492  6FAF               	movwf	(___awdiv@divisor+1)& (0+255),b
  5077  001494  0E0A               	movlw	10
  5078  001496  6FAE               	movwf	___awdiv@divisor& (0+255),b
  5079  001498  EC2E  F007         	call	___awdiv	;wreg free
  5080  00149C  C0AC  F0B7         	movff	?___awdiv,delay_ms@j
  5081  0014A0  C0AD  F0B8         	movff	?___awdiv+1,delay_ms@j+1
  5082                           
  5083                           ;micro_setup.c: 95: while(j--)
  5084  0014A4  D009               	goto	l1921
  5085  0014A6                     l1919:
  5086                           
  5087                           ;micro_setup.c: 96: {
  5088                           ;micro_setup.c: 97: _delay((unsigned long)((10)*(8000000/4000.0)));
  5089  0014A6  0E1A               	movlw	26
  5090  0014A8  0100               	movlb	0	; () banked
  5091  0014AA  6FB6               	movwf	??_delay_ms& (0+255),b
  5092  0014AC  0EF8               	movlw	248
  5093  0014AE                     u1307:
  5094  0014AE  2EE8               	decfsz	wreg,f,c
  5095  0014B0  D7FE               	bra	u1307
  5096  0014B2  2FB6               	decfsz	??_delay_ms& (0+255),f,b
  5097  0014B4  D7FC               	bra	u1307
  5098  0014B6  F000               	nop	
  5099  0014B8                     l1921:
  5100  0014B8  0100               	movlb	0	; () banked
  5101  0014BA  07B7               	decf	delay_ms@j& (0+255),f,b
  5102  0014BC  A0D8               	btfss	status,0,c
  5103  0014BE  07B8               	decf	(delay_ms@j+1)& (0+255),f,b
  5104  0014C0  0100               	movlb	0	; () banked
  5105  0014C2  29B7               	incf	delay_ms@j& (0+255),w,b
  5106  0014C4  E1F0               	bnz	l1919
  5107  0014C6  0100               	movlb	0	; () banked
  5108  0014C8  29B8               	incf	(delay_ms@j+1)& (0+255),w,b
  5109  0014CA  B4D8               	btfsc	status,2,c
  5110  0014CC  0012               	return	
  5111  0014CE  D7EB               	goto	l1919
  5112  0014D0                     __end_of_delay_ms:
  5113                           	opt stack 0
  5114                           tblptru	equ	0xFF8
  5115                           tblptrh	equ	0xFF7
  5116                           tblptrl	equ	0xFF6
  5117                           tablat	equ	0xFF5
  5118                           intcon	equ	0xFF2
  5119                           intcon2	equ	0xFF1
  5120                           intcon3	equ	0xFF0
  5121                           postinc0	equ	0xFEE
  5122                           wreg	equ	0xFE8
  5123                           plusw1	equ	0xFE3
  5124                           indf2	equ	0xFDF
  5125                           postinc2	equ	0xFDE
  5126                           postdec2	equ	0xFDD
  5127                           plusw2	equ	0xFDB
  5128                           fsr2h	equ	0xFDA
  5129                           fsr2l	equ	0xFD9
  5130                           status	equ	0xFD8
  5131                           
  5132 ;; *************** function ___awdiv *****************
  5133 ;; Defined at:
  5134 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;  dividend        2    0[BANK0 ] int 
  5137 ;;  divisor         2    2[BANK0 ] int 
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;  quotient        2    6[BANK0 ] int 
  5140 ;;  sign            1    5[BANK0 ] unsigned char 
  5141 ;;  counter         1    4[BANK0 ] unsigned char 
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  2    0[BANK0 ] int 
  5144 ;; Registers used:
  5145 ;;		wreg, status,2, status,0
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5151 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5152 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5154 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5155 ;;Total ram usage:        8 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    3
  5158 ;; This function calls:
  5159 ;;		Nothing
  5160 ;; This function is called by:
  5161 ;;		_delay_ms
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text24
  5166  000E5C                     __ptext24:
  5167                           	opt stack 0
  5168  000E5C                     ___awdiv:
  5169                           	opt stack 25
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;incstack = 0
  5173  000E5C  0E00               	movlw	0
  5174  000E5E  0100               	movlb	0	; () banked
  5175  000E60  6FB1               	movwf	___awdiv@sign& (0+255),b
  5176                           
  5177                           ; BSR set to: 0
  5178  000E62  0100               	movlb	0	; () banked
  5179  000E64  AFAF               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5180  000E66  D008               	goto	l1833
  5181                           
  5182                           ; BSR set to: 0
  5183  000E68  0100               	movlb	0	; () banked
  5184  000E6A  6DAE               	negf	___awdiv@divisor& (0+255),b
  5185  000E6C  1FAF               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5186  000E6E  B0D8               	btfsc	status,0,c
  5187  000E70  2BAF               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5188                           
  5189                           ; BSR set to: 0
  5190  000E72  0E01               	movlw	1
  5191  000E74  0100               	movlb	0	; () banked
  5192  000E76  6FB1               	movwf	___awdiv@sign& (0+255),b
  5193  000E78                     l1833:
  5194                           
  5195                           ; BSR set to: 0
  5196  000E78  0100               	movlb	0	; () banked
  5197  000E7A  AFAD               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5198  000E7C  D008               	goto	l1839
  5199                           
  5200                           ; BSR set to: 0
  5201  000E7E  0100               	movlb	0	; () banked
  5202  000E80  6DAC               	negf	___awdiv@dividend& (0+255),b
  5203  000E82  1FAD               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5204  000E84  B0D8               	btfsc	status,0,c
  5205  000E86  2BAD               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5206                           
  5207                           ; BSR set to: 0
  5208  000E88  0E01               	movlw	1
  5209  000E8A  0100               	movlb	0	; () banked
  5210  000E8C  1BB1               	xorwf	___awdiv@sign& (0+255),f,b
  5211  000E8E                     l1839:
  5212                           
  5213                           ; BSR set to: 0
  5214  000E8E  0E00               	movlw	0
  5215  000E90  0100               	movlb	0	; () banked
  5216  000E92  6FB3               	movwf	(___awdiv@quotient+1)& (0+255),b
  5217  000E94  0E00               	movlw	0
  5218  000E96  6FB2               	movwf	___awdiv@quotient& (0+255),b
  5219                           
  5220                           ; BSR set to: 0
  5221  000E98  0100               	movlb	0	; () banked
  5222  000E9A  51AE               	movf	___awdiv@divisor& (0+255),w,b
  5223  000E9C  0100               	movlb	0	; () banked
  5224  000E9E  11AF               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5225  000EA0  B4D8               	btfsc	status,2,c
  5226  000EA2  D02C               	goto	l1861
  5227                           
  5228                           ; BSR set to: 0
  5229  000EA4  0E01               	movlw	1
  5230  000EA6  0100               	movlb	0	; () banked
  5231  000EA8  6FB0               	movwf	___awdiv@counter& (0+255),b
  5232  000EAA  D006               	goto	l1847
  5233  000EAC                     l1845:
  5234                           
  5235                           ; BSR set to: 0
  5236  000EAC  0100               	movlb	0	; () banked
  5237  000EAE  90D8               	bcf	status,0,c
  5238  000EB0  37AE               	rlcf	___awdiv@divisor& (0+255),f,b
  5239  000EB2  37AF               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5240  000EB4  0100               	movlb	0	; () banked
  5241  000EB6  2BB0               	incf	___awdiv@counter& (0+255),f,b
  5242  000EB8                     l1847:
  5243                           
  5244                           ; BSR set to: 0
  5245  000EB8  0100               	movlb	0	; () banked
  5246  000EBA  AFAF               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5247  000EBC  D7F7               	goto	l1845
  5248  000EBE                     l1849:
  5249                           
  5250                           ; BSR set to: 0
  5251  000EBE  0100               	movlb	0	; () banked
  5252  000EC0  90D8               	bcf	status,0,c
  5253  000EC2  37B2               	rlcf	___awdiv@quotient& (0+255),f,b
  5254  000EC4  37B3               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5255                           
  5256                           ; BSR set to: 0
  5257  000EC6  0100               	movlb	0	; () banked
  5258  000EC8  51AE               	movf	___awdiv@divisor& (0+255),w,b
  5259  000ECA  0100               	movlb	0	; () banked
  5260  000ECC  5DAC               	subwf	___awdiv@dividend& (0+255),w,b
  5261  000ECE  0100               	movlb	0	; () banked
  5262  000ED0  51AF               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5263  000ED2  0100               	movlb	0	; () banked
  5264  000ED4  59AD               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5265  000ED6  A0D8               	btfss	status,0,c
  5266  000ED8  D00A               	goto	l1857
  5267                           
  5268                           ; BSR set to: 0
  5269  000EDA  0100               	movlb	0	; () banked
  5270  000EDC  51AE               	movf	___awdiv@divisor& (0+255),w,b
  5271  000EDE  0100               	movlb	0	; () banked
  5272  000EE0  5FAC               	subwf	___awdiv@dividend& (0+255),f,b
  5273  000EE2  0100               	movlb	0	; () banked
  5274  000EE4  51AF               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5275  000EE6  0100               	movlb	0	; () banked
  5276  000EE8  5BAD               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5277                           
  5278                           ; BSR set to: 0
  5279  000EEA  0100               	movlb	0	; () banked
  5280  000EEC  81B2               	bsf	___awdiv@quotient& (0+255),0,b
  5281  000EEE                     l1857:
  5282                           
  5283                           ; BSR set to: 0
  5284  000EEE  0100               	movlb	0	; () banked
  5285  000EF0  90D8               	bcf	status,0,c
  5286  000EF2  33AF               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5287  000EF4  33AE               	rrcf	___awdiv@divisor& (0+255),f,b
  5288                           
  5289                           ; BSR set to: 0
  5290  000EF6  0100               	movlb	0	; () banked
  5291  000EF8  2FB0               	decfsz	___awdiv@counter& (0+255),f,b
  5292  000EFA  D7E1               	goto	l1849
  5293  000EFC                     l1861:
  5294                           
  5295                           ; BSR set to: 0
  5296  000EFC  0100               	movlb	0	; () banked
  5297  000EFE  51B1               	movf	___awdiv@sign& (0+255),w,b
  5298  000F00  0100               	movlb	0	; () banked
  5299  000F02  B4D8               	btfsc	status,2,c
  5300  000F04  D005               	goto	l1865
  5301                           
  5302                           ; BSR set to: 0
  5303  000F06  0100               	movlb	0	; () banked
  5304  000F08  6DB2               	negf	___awdiv@quotient& (0+255),b
  5305  000F0A  1FB3               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5306  000F0C  B0D8               	btfsc	status,0,c
  5307  000F0E  2BB3               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5308  000F10                     l1865:
  5309                           
  5310                           ; BSR set to: 0
  5311  000F10  C0B2  F0AC         	movff	___awdiv@quotient,?___awdiv
  5312  000F14  C0B3  F0AD         	movff	___awdiv@quotient+1,?___awdiv+1
  5313  000F18  0012               	return	
  5314  000F1A                     __end_of___awdiv:
  5315                           	opt stack 0
  5316                           tblptru	equ	0xFF8
  5317                           tblptrh	equ	0xFF7
  5318                           tblptrl	equ	0xFF6
  5319                           tablat	equ	0xFF5
  5320                           intcon	equ	0xFF2
  5321                           intcon2	equ	0xFF1
  5322                           intcon3	equ	0xFF0
  5323                           postinc0	equ	0xFEE
  5324                           wreg	equ	0xFE8
  5325                           plusw1	equ	0xFE3
  5326                           indf2	equ	0xFDF
  5327                           postinc2	equ	0xFDE
  5328                           postdec2	equ	0xFDD
  5329                           plusw2	equ	0xFDB
  5330                           fsr2h	equ	0xFDA
  5331                           fsr2l	equ	0xFD9
  5332                           status	equ	0xFD8
  5333                           
  5334 ;; *************** function _ISR *****************
  5335 ;; Defined at:
  5336 ;;		line 21 in file "main.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;		None
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;		None
  5341 ;; Return value:  Size  Location     Type
  5342 ;;                  1    wreg      void 
  5343 ;; Registers used:
  5344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5345 ;; Tracked objects:
  5346 ;;		On entry : 0/0
  5347 ;;		On exit  : 0/0
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5352 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5353 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5354 ;;Total ram usage:       14 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; Hardware stack levels required when called:    2
  5357 ;; This function calls:
  5358 ;;		_read_cdc1
  5359 ;;		_read_cdc2
  5360 ;;		i2_read_AD7147
  5361 ;; This function is called by:
  5362 ;;		Interrupt level 2
  5363 ;; This function uses a non-reentrant model
  5364 ;;
  5365                           
  5366                           	psect	intcode
  5367  000008                     __pintcode:
  5368                           	opt stack 0
  5369  000008                     _ISR:
  5370                           	opt stack 25
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;incstack = 0
  5374  000008  8257               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5375  00000A  CFFA F023          	movff	pclath,??_ISR
  5376  00000E  CFFB F024          	movff	pclatu,??_ISR+1
  5377  000012  CFE9 F025          	movff	fsr0l,??_ISR+2
  5378  000016  CFEA F026          	movff	fsr0h,??_ISR+3
  5379  00001A  CFE1 F027          	movff	fsr1l,??_ISR+4
  5380  00001E  CFE2 F028          	movff	fsr1h,??_ISR+5
  5381  000022  CFD9 F029          	movff	fsr2l,??_ISR+6
  5382  000026  CFDA F02A          	movff	fsr2h,??_ISR+7
  5383  00002A  CFF3 F02B          	movff	prodl,??_ISR+8
  5384  00002E  CFF4 F02C          	movff	prodh,??_ISR+9
  5385  000032  CFF6 F02D          	movff	tblptrl,??_ISR+10
  5386  000036  CFF7 F02E          	movff	tblptrh,??_ISR+11
  5387  00003A  CFF8 F02F          	movff	tblptru,??_ISR+12
  5388  00003E  CFF5 F030          	movff	tablat,??_ISR+13
  5389                           
  5390                           ;main.c: 24: if(INTCONbits.INT0IF && INTCONbits.INT0IE)
  5391  000042  B2F2               	btfsc	intcon,1,c	;volatile
  5392  000044  A8F2               	btfss	intcon,4,c	;volatile
  5393  000046  D019               	goto	i2l2395
  5394                           
  5395                           ;main.c: 25: {
  5396                           ;main.c: 26: read_cdc1(sensor_values);
  5397  000048  0E7C               	movlw	low _sensor_values
  5398  00004A  6E17               	movwf	read_cdc1@sensor_values,c
  5399  00004C  0E00               	movlw	high _sensor_values
  5400  00004E  6E18               	movwf	read_cdc1@sensor_values+1,c
  5401  000050  ECFF  F008         	call	_read_cdc1	;wreg free
  5402                           
  5403                           ;main.c: 27: read_AD7147(interrupt_values_cdc1, 0x008, 3, 1);
  5404  000054  0E51               	movlw	low _interrupt_values_cdc1
  5405  000056  6E17               	movwf	i2read_AD7147@DataBuffer,c
  5406  000058  0E00               	movlw	high _interrupt_values_cdc1
  5407  00005A  6E18               	movwf	i2read_AD7147@DataBuffer+1,c
  5408  00005C  0E00               	movlw	0
  5409  00005E  6E1A               	movwf	i2read_AD7147@RegisterStartAddress+1,c
  5410  000060  0E08               	movlw	8
  5411  000062  6E19               	movwf	i2read_AD7147@RegisterStartAddress,c
  5412  000064  0E00               	movlw	0
  5413  000066  6E1C               	movwf	i2read_AD7147@NumberOfRegisters+1,c
  5414  000068  0E03               	movlw	3
  5415  00006A  6E1B               	movwf	i2read_AD7147@NumberOfRegisters,c
  5416  00006C  0E00               	movlw	0
  5417  00006E  6E1E               	movwf	i2read_AD7147@cdc+1,c
  5418  000070  0E01               	movlw	1
  5419  000072  6E1D               	movwf	i2read_AD7147@cdc,c
  5420  000074  EC7D  F009         	call	i2_read_AD7147	;wreg free
  5421                           
  5422                           ;main.c: 28: INTCONbits.INT0IF = 0;
  5423  000078  92F2               	bcf	intcon,1,c	;volatile
  5424  00007A                     i2l2395:
  5425                           
  5426                           ;main.c: 29: }
  5427                           ;main.c: 30: if(INTCON3bits.INT1IF && INTCON3bits.INT1E)
  5428  00007A  B0F0               	btfsc	intcon3,0,c	;volatile
  5429  00007C  A6F0               	btfss	intcon3,3,c	;volatile
  5430  00007E  D019               	goto	i2l156
  5431                           
  5432                           ;main.c: 31: {
  5433                           ;main.c: 32: read_cdc2(sensor_values);
  5434  000080  0E7C               	movlw	low _sensor_values
  5435  000082  6E17               	movwf	read_cdc2@sensor_values,c
  5436  000084  0E00               	movlw	high _sensor_values
  5437  000086  6E18               	movwf	read_cdc2@sensor_values+1,c
  5438  000088  ECBE  F008         	call	_read_cdc2	;wreg free
  5439                           
  5440                           ;main.c: 33: read_AD7147(interrupt_values_cdc2, 0x008, 3, 2);
  5441  00008C  0E4B               	movlw	low _interrupt_values_cdc2
  5442  00008E  6E17               	movwf	i2read_AD7147@DataBuffer,c
  5443  000090  0E00               	movlw	high _interrupt_values_cdc2
  5444  000092  6E18               	movwf	i2read_AD7147@DataBuffer+1,c
  5445  000094  0E00               	movlw	0
  5446  000096  6E1A               	movwf	i2read_AD7147@RegisterStartAddress+1,c
  5447  000098  0E08               	movlw	8
  5448  00009A  6E19               	movwf	i2read_AD7147@RegisterStartAddress,c
  5449  00009C  0E00               	movlw	0
  5450  00009E  6E1C               	movwf	i2read_AD7147@NumberOfRegisters+1,c
  5451  0000A0  0E03               	movlw	3
  5452  0000A2  6E1B               	movwf	i2read_AD7147@NumberOfRegisters,c
  5453  0000A4  0E00               	movlw	0
  5454  0000A6  6E1E               	movwf	i2read_AD7147@cdc+1,c
  5455  0000A8  0E02               	movlw	2
  5456  0000AA  6E1D               	movwf	i2read_AD7147@cdc,c
  5457  0000AC  EC7D  F009         	call	i2_read_AD7147	;wreg free
  5458                           
  5459                           ;main.c: 34: INTCON3bits.INT1IF = 0;
  5460  0000B0  90F0               	bcf	intcon3,0,c	;volatile
  5461  0000B2                     i2l156:
  5462  0000B2  C030  FFF5         	movff	??_ISR+13,tablat
  5463  0000B6  C02F  FFF8         	movff	??_ISR+12,tblptru
  5464  0000BA  C02E  FFF7         	movff	??_ISR+11,tblptrh
  5465  0000BE  C02D  FFF6         	movff	??_ISR+10,tblptrl
  5466  0000C2  C02C  FFF4         	movff	??_ISR+9,prodh
  5467  0000C6  C02B  FFF3         	movff	??_ISR+8,prodl
  5468  0000CA  C02A  FFDA         	movff	??_ISR+7,fsr2h
  5469  0000CE  C029  FFD9         	movff	??_ISR+6,fsr2l
  5470  0000D2  C028  FFE2         	movff	??_ISR+5,fsr1h
  5471  0000D6  C027  FFE1         	movff	??_ISR+4,fsr1l
  5472  0000DA  C026  FFEA         	movff	??_ISR+3,fsr0h
  5473  0000DE  C025  FFE9         	movff	??_ISR+2,fsr0l
  5474  0000E2  C024  FFFB         	movff	??_ISR+1,pclatu
  5475  0000E6  C023  FFFA         	movff	??_ISR,pclath
  5476  0000EA  9257               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5477  0000EC  0011               	retfie		f
  5478  0000EE                     __end_of_ISR:
  5479                           	opt stack 0
  5480                           pclatu	equ	0xFFB
  5481                           pclath	equ	0xFFA
  5482                           tblptru	equ	0xFF8
  5483                           tblptrh	equ	0xFF7
  5484                           tblptrl	equ	0xFF6
  5485                           tablat	equ	0xFF5
  5486                           prodh	equ	0xFF4
  5487                           prodl	equ	0xFF3
  5488                           intcon	equ	0xFF2
  5489                           intcon2	equ	0xFF1
  5490                           intcon3	equ	0xFF0
  5491                           postinc0	equ	0xFEE
  5492                           fsr0h	equ	0xFEA
  5493                           fsr0l	equ	0xFE9
  5494                           wreg	equ	0xFE8
  5495                           plusw1	equ	0xFE3
  5496                           fsr1h	equ	0xFE2
  5497                           fsr1l	equ	0xFE1
  5498                           indf2	equ	0xFDF
  5499                           postinc2	equ	0xFDE
  5500                           postdec2	equ	0xFDD
  5501                           plusw2	equ	0xFDB
  5502                           fsr2h	equ	0xFDA
  5503                           fsr2l	equ	0xFD9
  5504                           status	equ	0xFD8
  5505                           
  5506 ;; *************** function i2_read_AD7147 *****************
  5507 ;; Defined at:
  5508 ;;		line 221 in file "AD7147.c"
  5509 ;; Parameters:    Size  Location     Type
  5510 ;;  DataBuffer      2   22[COMRAM] PTR unsigned int 
  5511 ;;		 -> interrupt_values_cdc2(6), interrupt_values_cdc1(6), 
  5512 ;;  RegisterStar    2   24[COMRAM] unsigned int 
  5513 ;;  NumberOfRegi    2   26[COMRAM] unsigned int 
  5514 ;;  cdc             2   28[COMRAM] unsigned int 
  5515 ;; Auto vars:     Size  Location     Type
  5516 ;;  read_AD7147     2   32[COMRAM] unsigned int 
  5517 ;;  read_AD7147     2   30[COMRAM] unsigned int 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;                  1    wreg      void 
  5520 ;; Registers used:
  5521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5527 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5528 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5530 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5531 ;;Total ram usage:       12 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    1
  5534 ;; This function calls:
  5535 ;;		i2_get_CDC
  5536 ;;		i2_w16_r16_spi
  5537 ;; This function is called by:
  5538 ;;		_ISR
  5539 ;; This function uses a non-reentrant model
  5540 ;;
  5541                           
  5542                           	psect	text26
  5543  0012FA                     __ptext26:
  5544                           	opt stack 0
  5545  0012FA                     i2_read_AD7147:
  5546                           	opt stack 25
  5547                           
  5548                           ;AD7147.c: 223: get_CDC(cdc,0);
  5549                           
  5550                           ;incstack = 0
  5551  0012FA  C01D  F001         	movff	i2read_AD7147@cdc,i2get_CDC@cdc
  5552  0012FE  C01E  F002         	movff	i2read_AD7147@cdc+1,i2get_CDC@cdc+1
  5553  001302  0E00               	movlw	0
  5554  001304  6E04               	movwf	i2get_CDC@state+1,c
  5555  001306  0E00               	movlw	0
  5556  001308  6E03               	movwf	i2get_CDC@state,c
  5557  00130A  EC0C  F00B         	call	i2_get_CDC	;wreg free
  5558                           
  5559                           ;AD7147.c: 224: unsigned int Register_Values = 0xE400 + RegisterStartAddress;
  5560  00130E  0E00               	movlw	0
  5561  001310  2419               	addwf	i2read_AD7147@RegisterStartAddress,w,c
  5562  001312  6E1F               	movwf	i2read_AD7147@Register_Values,c
  5563  001314  0EE4               	movlw	228
  5564  001316  201A               	addwfc	i2read_AD7147@RegisterStartAddress+1,w,c
  5565  001318  6E20               	movwf	i2read_AD7147@Register_Values+1,c
  5566                           
  5567                           ;AD7147.c: 225: for (unsigned int i=0; i<NumberOfRegisters; i++)
  5568  00131A  0E00               	movlw	0
  5569  00131C  6E22               	movwf	i2read_AD7147@i+1,c
  5570  00131E  0E00               	movlw	0
  5571  001320  6E21               	movwf	i2read_AD7147@i,c
  5572  001322  D017               	goto	i2l2365
  5573  001324                     i2l2361:
  5574                           
  5575                           ;AD7147.c: 226: {
  5576                           ;AD7147.c: 227: DataBuffer[i]=w16_r16_spi(Register_Values+i);
  5577  001324  5021               	movf	i2read_AD7147@i,w,c
  5578  001326  241F               	addwf	i2read_AD7147@Register_Values,w,c
  5579  001328  6E01               	movwf	i2w16_r16_spi@address,c
  5580  00132A  5022               	movf	i2read_AD7147@i+1,w,c
  5581  00132C  2020               	addwfc	i2read_AD7147@Register_Values+1,w,c
  5582  00132E  6E02               	movwf	i2w16_r16_spi@address+1,c
  5583  001330  EC3E  F009         	call	i2_w16_r16_spi	;wreg free
  5584  001334  90D8               	bcf	status,0,c
  5585  001336  3421               	rlcf	i2read_AD7147@i,w,c
  5586  001338  6ED9               	movwf	fsr2l,c
  5587  00133A  3422               	rlcf	i2read_AD7147@i+1,w,c
  5588  00133C  6EDA               	movwf	fsr2h,c
  5589  00133E  5017               	movf	i2read_AD7147@DataBuffer,w,c
  5590  001340  26D9               	addwf	fsr2l,f,c
  5591  001342  5018               	movf	i2read_AD7147@DataBuffer+1,w,c
  5592  001344  22DA               	addwfc	fsr2h,f,c
  5593  001346  C001  FFDE         	movff	?i2_w16_r16_spi,postinc2
  5594  00134A  C002  FFDD         	movff	?i2_w16_r16_spi+1,postdec2
  5595  00134E  4A21               	infsnz	i2read_AD7147@i,f,c
  5596  001350  2A22               	incf	i2read_AD7147@i+1,f,c
  5597  001352                     i2l2365:
  5598  001352  501B               	movf	i2read_AD7147@NumberOfRegisters,w,c
  5599  001354  5C21               	subwf	i2read_AD7147@i,w,c
  5600  001356  501C               	movf	i2read_AD7147@NumberOfRegisters+1,w,c
  5601  001358  5822               	subwfb	i2read_AD7147@i+1,w,c
  5602  00135A  A0D8               	btfss	status,0,c
  5603  00135C  D7E3               	goto	i2l2361
  5604                           
  5605                           ;AD7147.c: 228: }
  5606                           ;AD7147.c: 229: get_CDC(cdc,1);
  5607  00135E  C01D  F001         	movff	i2read_AD7147@cdc,i2get_CDC@cdc
  5608  001362  C01E  F002         	movff	i2read_AD7147@cdc+1,i2get_CDC@cdc+1
  5609  001366  0E00               	movlw	0
  5610  001368  6E04               	movwf	i2get_CDC@state+1,c
  5611  00136A  0E01               	movlw	1
  5612  00136C  6E03               	movwf	i2get_CDC@state,c
  5613  00136E  EC0C  F00B         	call	i2_get_CDC	;wreg free
  5614  001372  0012               	return		;funcret
  5615  001374                     __end_ofi2_read_AD7147:
  5616                           	opt stack 0
  5617                           pclatu	equ	0xFFB
  5618                           pclath	equ	0xFFA
  5619                           tblptru	equ	0xFF8
  5620                           tblptrh	equ	0xFF7
  5621                           tblptrl	equ	0xFF6
  5622                           tablat	equ	0xFF5
  5623                           prodh	equ	0xFF4
  5624                           prodl	equ	0xFF3
  5625                           intcon	equ	0xFF2
  5626                           intcon2	equ	0xFF1
  5627                           intcon3	equ	0xFF0
  5628                           postinc0	equ	0xFEE
  5629                           fsr0h	equ	0xFEA
  5630                           fsr0l	equ	0xFE9
  5631                           wreg	equ	0xFE8
  5632                           plusw1	equ	0xFE3
  5633                           fsr1h	equ	0xFE2
  5634                           fsr1l	equ	0xFE1
  5635                           indf2	equ	0xFDF
  5636                           postinc2	equ	0xFDE
  5637                           postdec2	equ	0xFDD
  5638                           plusw2	equ	0xFDB
  5639                           fsr2h	equ	0xFDA
  5640                           fsr2l	equ	0xFD9
  5641                           status	equ	0xFD8
  5642                           
  5643 ;; *************** function _read_cdc2 *****************
  5644 ;; Defined at:
  5645 ;;		line 281 in file "AD7147.c"
  5646 ;; Parameters:    Size  Location     Type
  5647 ;;  sensor_value    2   22[COMRAM] PTR unsigned int 
  5648 ;;		 -> sensor_values(48), 
  5649 ;; Auto vars:     Size  Location     Type
  5650 ;;  i               2   24[COMRAM] unsigned int 
  5651 ;; Return value:  Size  Location     Type
  5652 ;;                  1    wreg      void 
  5653 ;; Registers used:
  5654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5655 ;; Tracked objects:
  5656 ;;		On entry : 0/0
  5657 ;;		On exit  : 0/0
  5658 ;;		Unchanged: 0/0
  5659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5660 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5661 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5663 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5664 ;;Total ram usage:        4 bytes
  5665 ;; Hardware stack levels used:    1
  5666 ;; Hardware stack levels required when called:    1
  5667 ;; This function calls:
  5668 ;;		_r16_spi
  5669 ;;		i2_get_CDC
  5670 ;;		i2_w16_r16_spi
  5671 ;; This function is called by:
  5672 ;;		_ISR
  5673 ;; This function uses a non-reentrant model
  5674 ;;
  5675                           
  5676                           	psect	text27
  5677  00117C                     __ptext27:
  5678                           	opt stack 0
  5679  00117C                     _read_cdc2:
  5680                           	opt stack 25
  5681                           
  5682                           ;AD7147.c: 283: get_CDC(2,0);
  5683                           
  5684                           ;incstack = 0
  5685  00117C  0E00               	movlw	0
  5686  00117E  6E02               	movwf	i2get_CDC@cdc+1,c
  5687  001180  0E02               	movlw	2
  5688  001182  6E01               	movwf	i2get_CDC@cdc,c
  5689  001184  0E00               	movlw	0
  5690  001186  6E04               	movwf	i2get_CDC@state+1,c
  5691  001188  0E00               	movlw	0
  5692  00118A  6E03               	movwf	i2get_CDC@state,c
  5693  00118C  EC0C  F00B         	call	i2_get_CDC	;wreg free
  5694                           
  5695                           ;AD7147.c: 284: sensor_values[12] = w16_r16_spi(0xE400 + 0x00B);
  5696  001190  0EE4               	movlw	228
  5697  001192  6E02               	movwf	i2w16_r16_spi@address+1,c
  5698  001194  0E0B               	movlw	11
  5699  001196  6E01               	movwf	i2w16_r16_spi@address,c
  5700  001198  EC3E  F009         	call	i2_w16_r16_spi	;wreg free
  5701  00119C  EE20 F018          	lfsr	2,24
  5702  0011A0  5017               	movf	read_cdc2@sensor_values,w,c
  5703  0011A2  26D9               	addwf	fsr2l,f,c
  5704  0011A4  5018               	movf	read_cdc2@sensor_values+1,w,c
  5705  0011A6  22DA               	addwfc	fsr2h,f,c
  5706  0011A8  C001  FFDE         	movff	?i2_w16_r16_spi,postinc2
  5707  0011AC  C002  FFDD         	movff	?i2_w16_r16_spi+1,postdec2
  5708                           
  5709                           ;AD7147.c: 285: for(unsigned int i = 13; i<17; i++)
  5710  0011B0  0E00               	movlw	0
  5711  0011B2  6E1A               	movwf	read_cdc2@i+1,c
  5712  0011B4  0E0D               	movlw	13
  5713  0011B6  6E19               	movwf	read_cdc2@i,c
  5714  0011B8                     i2l2251:
  5715  0011B8  501A               	movf	read_cdc2@i+1,w,c
  5716  0011BA  E116               	bnz	i2l2261
  5717  0011BC  0E11               	movlw	17
  5718  0011BE  5C19               	subwf	read_cdc2@i,w,c
  5719  0011C0  B0D8               	btfsc	status,0,c
  5720  0011C2  D012               	goto	i2l2261
  5721                           
  5722                           ;AD7147.c: 286: {
  5723                           ;AD7147.c: 287: sensor_values[i] = r16_spi();
  5724  0011C4  EC68  F00A         	call	_r16_spi	;wreg free
  5725  0011C8  90D8               	bcf	status,0,c
  5726  0011CA  3419               	rlcf	read_cdc2@i,w,c
  5727  0011CC  6ED9               	movwf	fsr2l,c
  5728  0011CE  341A               	rlcf	read_cdc2@i+1,w,c
  5729  0011D0  6EDA               	movwf	fsr2h,c
  5730  0011D2  5017               	movf	read_cdc2@sensor_values,w,c
  5731  0011D4  26D9               	addwf	fsr2l,f,c
  5732  0011D6  5018               	movf	read_cdc2@sensor_values+1,w,c
  5733  0011D8  22DA               	addwfc	fsr2h,f,c
  5734  0011DA  C001  FFDE         	movff	?_r16_spi,postinc2
  5735  0011DE  C002  FFDD         	movff	?_r16_spi+1,postdec2
  5736  0011E2  4A19               	infsnz	read_cdc2@i,f,c
  5737  0011E4  2A1A               	incf	read_cdc2@i+1,f,c
  5738  0011E6  D7E8               	goto	i2l2251
  5739  0011E8                     i2l2261:
  5740                           
  5741                           ;AD7147.c: 288: }
  5742                           ;AD7147.c: 289: get_CDC(2,1);
  5743  0011E8  0E00               	movlw	0
  5744  0011EA  6E02               	movwf	i2get_CDC@cdc+1,c
  5745  0011EC  0E02               	movlw	2
  5746  0011EE  6E01               	movwf	i2get_CDC@cdc,c
  5747  0011F0  0E00               	movlw	0
  5748  0011F2  6E04               	movwf	i2get_CDC@state+1,c
  5749  0011F4  0E01               	movlw	1
  5750  0011F6  6E03               	movwf	i2get_CDC@state,c
  5751  0011F8  EC0C  F00B         	call	i2_get_CDC	;wreg free
  5752  0011FC  0012               	return		;funcret
  5753  0011FE                     __end_of_read_cdc2:
  5754                           	opt stack 0
  5755                           pclatu	equ	0xFFB
  5756                           pclath	equ	0xFFA
  5757                           tblptru	equ	0xFF8
  5758                           tblptrh	equ	0xFF7
  5759                           tblptrl	equ	0xFF6
  5760                           tablat	equ	0xFF5
  5761                           prodh	equ	0xFF4
  5762                           prodl	equ	0xFF3
  5763                           intcon	equ	0xFF2
  5764                           intcon2	equ	0xFF1
  5765                           intcon3	equ	0xFF0
  5766                           postinc0	equ	0xFEE
  5767                           fsr0h	equ	0xFEA
  5768                           fsr0l	equ	0xFE9
  5769                           wreg	equ	0xFE8
  5770                           plusw1	equ	0xFE3
  5771                           fsr1h	equ	0xFE2
  5772                           fsr1l	equ	0xFE1
  5773                           indf2	equ	0xFDF
  5774                           postinc2	equ	0xFDE
  5775                           postdec2	equ	0xFDD
  5776                           plusw2	equ	0xFDB
  5777                           fsr2h	equ	0xFDA
  5778                           fsr2l	equ	0xFD9
  5779                           status	equ	0xFD8
  5780                           
  5781 ;; *************** function _read_cdc1 *****************
  5782 ;; Defined at:
  5783 ;;		line 271 in file "AD7147.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;  sensor_value    2   22[COMRAM] PTR unsigned int 
  5786 ;;		 -> sensor_values(48), 
  5787 ;; Auto vars:     Size  Location     Type
  5788 ;;  i               2   24[COMRAM] unsigned int 
  5789 ;; Return value:  Size  Location     Type
  5790 ;;                  1    wreg      void 
  5791 ;; Registers used:
  5792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5793 ;; Tracked objects:
  5794 ;;		On entry : 0/0
  5795 ;;		On exit  : 0/0
  5796 ;;		Unchanged: 0/0
  5797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5798 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5799 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5801 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5802 ;;Total ram usage:        4 bytes
  5803 ;; Hardware stack levels used:    1
  5804 ;; Hardware stack levels required when called:    1
  5805 ;; This function calls:
  5806 ;;		_r16_spi
  5807 ;;		i2_get_CDC
  5808 ;;		i2_w16_r16_spi
  5809 ;; This function is called by:
  5810 ;;		_ISR
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           	psect	text28
  5815  0011FE                     __ptext28:
  5816                           	opt stack 0
  5817  0011FE                     _read_cdc1:
  5818                           	opt stack 25
  5819                           
  5820                           ;AD7147.c: 273: get_CDC(1,0);
  5821                           
  5822                           ;incstack = 0
  5823  0011FE  0E00               	movlw	0
  5824  001200  6E02               	movwf	i2get_CDC@cdc+1,c
  5825  001202  0E01               	movlw	1
  5826  001204  6E01               	movwf	i2get_CDC@cdc,c
  5827  001206  0E00               	movlw	0
  5828  001208  6E04               	movwf	i2get_CDC@state+1,c
  5829  00120A  0E00               	movlw	0
  5830  00120C  6E03               	movwf	i2get_CDC@state,c
  5831  00120E  EC0C  F00B         	call	i2_get_CDC	;wreg free
  5832                           
  5833                           ;AD7147.c: 274: sensor_values[0] = w16_r16_spi(0xE400 + 0x00B);
  5834  001212  0EE4               	movlw	228
  5835  001214  6E02               	movwf	i2w16_r16_spi@address+1,c
  5836  001216  0E0B               	movlw	11
  5837  001218  6E01               	movwf	i2w16_r16_spi@address,c
  5838  00121A  EC3E  F009         	call	i2_w16_r16_spi	;wreg free
  5839  00121E  C017  FFD9         	movff	read_cdc1@sensor_values,fsr2l
  5840  001222  C018  FFDA         	movff	read_cdc1@sensor_values+1,fsr2h
  5841  001226  C001  FFDE         	movff	?i2_w16_r16_spi,postinc2
  5842  00122A  C002  FFDD         	movff	?i2_w16_r16_spi+1,postdec2
  5843                           
  5844                           ;AD7147.c: 275: for(unsigned int i = 1; i<3; i++)
  5845  00122E  0E00               	movlw	0
  5846  001230  6E1A               	movwf	read_cdc1@i+1,c
  5847  001232  0E01               	movlw	1
  5848  001234  6E19               	movwf	read_cdc1@i,c
  5849  001236                     i2l2233:
  5850  001236  501A               	movf	read_cdc1@i+1,w,c
  5851  001238  E116               	bnz	i2l2243
  5852  00123A  0E03               	movlw	3
  5853  00123C  5C19               	subwf	read_cdc1@i,w,c
  5854  00123E  B0D8               	btfsc	status,0,c
  5855  001240  D012               	goto	i2l2243
  5856                           
  5857                           ;AD7147.c: 276: {
  5858                           ;AD7147.c: 277: sensor_values[i] = r16_spi();
  5859  001242  EC68  F00A         	call	_r16_spi	;wreg free
  5860  001246  90D8               	bcf	status,0,c
  5861  001248  3419               	rlcf	read_cdc1@i,w,c
  5862  00124A  6ED9               	movwf	fsr2l,c
  5863  00124C  341A               	rlcf	read_cdc1@i+1,w,c
  5864  00124E  6EDA               	movwf	fsr2h,c
  5865  001250  5017               	movf	read_cdc1@sensor_values,w,c
  5866  001252  26D9               	addwf	fsr2l,f,c
  5867  001254  5018               	movf	read_cdc1@sensor_values+1,w,c
  5868  001256  22DA               	addwfc	fsr2h,f,c
  5869  001258  C001  FFDE         	movff	?_r16_spi,postinc2
  5870  00125C  C002  FFDD         	movff	?_r16_spi+1,postdec2
  5871  001260  4A19               	infsnz	read_cdc1@i,f,c
  5872  001262  2A1A               	incf	read_cdc1@i+1,f,c
  5873  001264  D7E8               	goto	i2l2233
  5874  001266                     i2l2243:
  5875                           
  5876                           ;AD7147.c: 278: }
  5877                           ;AD7147.c: 279: get_CDC(1,1);
  5878  001266  0E00               	movlw	0
  5879  001268  6E02               	movwf	i2get_CDC@cdc+1,c
  5880  00126A  0E01               	movlw	1
  5881  00126C  6E01               	movwf	i2get_CDC@cdc,c
  5882  00126E  0E00               	movlw	0
  5883  001270  6E04               	movwf	i2get_CDC@state+1,c
  5884  001272  0E01               	movlw	1
  5885  001274  6E03               	movwf	i2get_CDC@state,c
  5886  001276  EC0C  F00B         	call	i2_get_CDC	;wreg free
  5887  00127A  0012               	return		;funcret
  5888  00127C                     __end_of_read_cdc1:
  5889                           	opt stack 0
  5890                           pclatu	equ	0xFFB
  5891                           pclath	equ	0xFFA
  5892                           tblptru	equ	0xFF8
  5893                           tblptrh	equ	0xFF7
  5894                           tblptrl	equ	0xFF6
  5895                           tablat	equ	0xFF5
  5896                           prodh	equ	0xFF4
  5897                           prodl	equ	0xFF3
  5898                           intcon	equ	0xFF2
  5899                           intcon2	equ	0xFF1
  5900                           intcon3	equ	0xFF0
  5901                           postinc0	equ	0xFEE
  5902                           fsr0h	equ	0xFEA
  5903                           fsr0l	equ	0xFE9
  5904                           wreg	equ	0xFE8
  5905                           plusw1	equ	0xFE3
  5906                           fsr1h	equ	0xFE2
  5907                           fsr1l	equ	0xFE1
  5908                           indf2	equ	0xFDF
  5909                           postinc2	equ	0xFDE
  5910                           postdec2	equ	0xFDD
  5911                           plusw2	equ	0xFDB
  5912                           fsr2h	equ	0xFDA
  5913                           fsr2l	equ	0xFD9
  5914                           status	equ	0xFD8
  5915                           
  5916 ;; *************** function i2_w16_r16_spi *****************
  5917 ;; Defined at:
  5918 ;;		line 89 in file "spi.c"
  5919 ;; Parameters:    Size  Location     Type
  5920 ;;  address         2    0[COMRAM] unsigned int 
  5921 ;; Auto vars:     Size  Location     Type
  5922 ;;  w16_r16_spi     2   20[COMRAM] unsigned int 
  5923 ;;  w16_r16_spi     2   18[COMRAM] unsigned int 
  5924 ;;  w16_r16_spi     2   16[COMRAM] unsigned int 
  5925 ;;  w16_r16_spi     2   14[COMRAM] unsigned int 
  5926 ;;  w16_r16_spi     2   12[COMRAM] unsigned int 
  5927 ;;  w16_r16_spi     2   10[COMRAM] unsigned int 
  5928 ;;  w16_r16_spi     2    8[COMRAM] unsigned int 
  5929 ;;  w16_r16_spi     2    6[COMRAM] unsigned int 
  5930 ;;  w16_r16_spi     2    4[COMRAM] unsigned int 
  5931 ;; Return value:  Size  Location     Type
  5932 ;;                  2    0[COMRAM] unsigned int 
  5933 ;; Registers used:
  5934 ;;		wreg, status,2, status,0
  5935 ;; Tracked objects:
  5936 ;;		On entry : 0/0
  5937 ;;		On exit  : 0/0
  5938 ;;		Unchanged: 0/0
  5939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5940 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5941 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5942 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5943 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5944 ;;Total ram usage:       22 bytes
  5945 ;; Hardware stack levels used:    1
  5946 ;; This function calls:
  5947 ;;		Nothing
  5948 ;; This function is called by:
  5949 ;;		_read_cdc1
  5950 ;;		_read_cdc2
  5951 ;;		i2_read_AD7147
  5952 ;; This function uses a non-reentrant model
  5953 ;;
  5954                           
  5955                           	psect	text29
  5956  00127C                     __ptext29:
  5957                           	opt stack 0
  5958  00127C                     i2_w16_r16_spi:
  5959                           	opt stack 25
  5960                           
  5961                           ;spi.c: 91: unsigned int address_low, address_high, result;
  5962                           ;spi.c: 92: unsigned int blank_low = 0x000;
  5963                           
  5964                           ;incstack = 0
  5965  00127C  0E00               	movlw	0
  5966  00127E  6E10               	movwf	i2w16_r16_spi@blank_low+1,c
  5967  001280  0E00               	movlw	0
  5968  001282  6E0F               	movwf	i2w16_r16_spi@blank_low,c
  5969                           
  5970                           ;spi.c: 93: unsigned int blank_high = 0x000;
  5971  001284  0E00               	movlw	0
  5972  001286  6E12               	movwf	i2w16_r16_spi@blank_high+1,c
  5973  001288  0E00               	movlw	0
  5974  00128A  6E11               	movwf	i2w16_r16_spi@blank_high,c
  5975                           
  5976                           ;spi.c: 94: unsigned int p1, p2, p3, p4;
  5977                           ;spi.c: 96: address_low = address & 0xFF;
  5978  00128C  5001               	movf	i2w16_r16_spi@address,w,c
  5979  00128E  6E09               	movwf	i2w16_r16_spi@address_low,c
  5980  001290  6A0A               	clrf	i2w16_r16_spi@address_low+1,c
  5981                           
  5982                           ;spi.c: 97: address_high = (address >> 8) & 0xFF;
  5983  001292  C001  F003         	movff	i2w16_r16_spi@address,??i2_w16_r16_spi
  5984  001296  C002  F004         	movff	i2w16_r16_spi@address+1,??i2_w16_r16_spi+1
  5985  00129A  C004  F003         	movff	??i2_w16_r16_spi+1,??i2_w16_r16_spi
  5986  00129E  6A04               	clrf	??i2_w16_r16_spi+1,c
  5987  0012A0  5003               	movf	??i2_w16_r16_spi,w,c
  5988  0012A2  6E0B               	movwf	i2w16_r16_spi@address_high,c
  5989  0012A4  6A0C               	clrf	i2w16_r16_spi@address_high+1,c
  5990                           
  5991                           ;spi.c: 99: SSPBUF = address_high;
  5992  0012A6  C00B  FFC9         	movff	i2w16_r16_spi@address_high,4041	;volatile
  5993  0012AA                     i2l300:
  5994  0012AA  A0C7               	btfss	4039,0,c	;volatile
  5995  0012AC  D7FE               	goto	i2l300
  5996                           
  5997                           ;spi.c: 101: p1 = SSPBUF;
  5998  0012AE  CFC9 F005          	movff	4041,i2w16_r16_spi@p1	;volatile
  5999  0012B2  6A06               	clrf	i2w16_r16_spi@p1+1,c
  6000                           
  6001                           ;spi.c: 103: SSPBUF = address_low;
  6002  0012B4  C009  FFC9         	movff	i2w16_r16_spi@address_low,4041	;volatile
  6003  0012B8                     i2l303:
  6004  0012B8  A0C7               	btfss	4039,0,c	;volatile
  6005  0012BA  D7FE               	goto	i2l303
  6006                           
  6007                           ;spi.c: 105: p2 = SSPBUF;
  6008  0012BC  CFC9 F007          	movff	4041,i2w16_r16_spi@p2	;volatile
  6009  0012C0  6A08               	clrf	i2w16_r16_spi@p2+1,c
  6010                           
  6011                           ;spi.c: 107: SSPBUF = blank_high;
  6012  0012C2  C011  FFC9         	movff	i2w16_r16_spi@blank_high,4041	;volatile
  6013  0012C6                     i2l306:
  6014  0012C6  A0C7               	btfss	4039,0,c	;volatile
  6015  0012C8  D7FE               	goto	i2l306
  6016                           
  6017                           ;spi.c: 109: p3 = SSPBUF;
  6018  0012CA  CFC9 F013          	movff	4041,i2w16_r16_spi@p3	;volatile
  6019  0012CE  6A14               	clrf	i2w16_r16_spi@p3+1,c
  6020                           
  6021                           ;spi.c: 111: SSPBUF = blank_low;
  6022  0012D0  C00F  FFC9         	movff	i2w16_r16_spi@blank_low,4041	;volatile
  6023  0012D4                     i2l309:
  6024  0012D4  A0C7               	btfss	4039,0,c	;volatile
  6025  0012D6  D7FE               	goto	i2l309
  6026                           
  6027                           ;spi.c: 113: p4 = SSPBUF;
  6028  0012D8  CFC9 F015          	movff	4041,i2w16_r16_spi@p4	;volatile
  6029  0012DC  6A16               	clrf	i2w16_r16_spi@p4+1,c
  6030                           
  6031                           ;spi.c: 115: result = (p3 << 8) + p4;
  6032  0012DE  5013               	movf	i2w16_r16_spi@p3,w,c
  6033  0012E0  6E04               	movwf	(??i2_w16_r16_spi+1)& (0+255),c
  6034  0012E2  6A03               	clrf	??i2_w16_r16_spi& (0+255),c
  6035  0012E4  5015               	movf	i2w16_r16_spi@p4,w,c
  6036  0012E6  2403               	addwf	??i2_w16_r16_spi,w,c
  6037  0012E8  6E0D               	movwf	i2w16_r16_spi@result,c
  6038  0012EA  5016               	movf	i2w16_r16_spi@p4+1,w,c
  6039  0012EC  2004               	addwfc	??i2_w16_r16_spi+1,w,c
  6040  0012EE  6E0E               	movwf	i2w16_r16_spi@result+1,c
  6041                           
  6042                           ;spi.c: 116: return result;
  6043  0012F0  C00D  F001         	movff	i2w16_r16_spi@result,?i2_w16_r16_spi
  6044  0012F4  C00E  F002         	movff	i2w16_r16_spi@result+1,?i2_w16_r16_spi+1
  6045  0012F8  0012               	return	
  6046  0012FA                     __end_ofi2_w16_r16_spi:
  6047                           	opt stack 0
  6048                           pclatu	equ	0xFFB
  6049                           pclath	equ	0xFFA
  6050                           tblptru	equ	0xFF8
  6051                           tblptrh	equ	0xFF7
  6052                           tblptrl	equ	0xFF6
  6053                           tablat	equ	0xFF5
  6054                           prodh	equ	0xFF4
  6055                           prodl	equ	0xFF3
  6056                           intcon	equ	0xFF2
  6057                           intcon2	equ	0xFF1
  6058                           intcon3	equ	0xFF0
  6059                           postinc0	equ	0xFEE
  6060                           fsr0h	equ	0xFEA
  6061                           fsr0l	equ	0xFE9
  6062                           wreg	equ	0xFE8
  6063                           plusw1	equ	0xFE3
  6064                           fsr1h	equ	0xFE2
  6065                           fsr1l	equ	0xFE1
  6066                           indf2	equ	0xFDF
  6067                           postinc2	equ	0xFDE
  6068                           postdec2	equ	0xFDD
  6069                           plusw2	equ	0xFDB
  6070                           fsr2h	equ	0xFDA
  6071                           fsr2l	equ	0xFD9
  6072                           status	equ	0xFD8
  6073                           
  6074 ;; *************** function i2_get_CDC *****************
  6075 ;; Defined at:
  6076 ;;		line 343 in file "AD7147.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;  cdc             2    0[COMRAM] unsigned int 
  6079 ;;  state           2    2[COMRAM] unsigned int 
  6080 ;; Auto vars:     Size  Location     Type
  6081 ;;		None
  6082 ;; Return value:  Size  Location     Type
  6083 ;;                  1    wreg      void 
  6084 ;; Registers used:
  6085 ;;		wreg, status,2, status,0
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6091 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6094 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6095 ;;Total ram usage:        4 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; This function calls:
  6098 ;;		Nothing
  6099 ;; This function is called by:
  6100 ;;		_read_cdc1
  6101 ;;		_read_cdc2
  6102 ;;		i2_read_AD7147
  6103 ;; This function uses a non-reentrant model
  6104 ;;
  6105                           
  6106                           	psect	text30
  6107  001618                     __ptext30:
  6108                           	opt stack 0
  6109  001618                     i2_get_CDC:
  6110                           	opt stack 25
  6111                           
  6112                           ;AD7147.c: 345: if (state == 1)
  6113                           
  6114                           ;incstack = 0
  6115  001618  0403               	decf	i2get_CDC@state,w,c
  6116  00161A  1004               	iorwf	i2get_CDC@state+1,w,c
  6117  00161C  A4D8               	btfss	status,2,c
  6118  00161E  D003               	goto	i2l1951
  6119                           
  6120                           ;AD7147.c: 346: {
  6121                           ;AD7147.c: 347: LATCbits.LATC1 = 1;
  6122  001620  828B               	bsf	3979,1,c	;volatile
  6123                           
  6124                           ;AD7147.c: 348: LATCbits.LATC0 = 1;
  6125  001622  808B               	bsf	3979,0,c	;volatile
  6126                           
  6127                           ;AD7147.c: 349: }
  6128  001624  0012               	return	
  6129  001626                     i2l1951:
  6130                           
  6131                           ;AD7147.c: 350: else
  6132                           ;AD7147.c: 351: {
  6133                           ;AD7147.c: 352: if (cdc == 1)
  6134  001626  0401               	decf	i2get_CDC@cdc,w,c
  6135  001628  1002               	iorwf	i2get_CDC@cdc+1,w,c
  6136  00162A  A4D8               	btfss	status,2,c
  6137  00162C  D003               	goto	i2l79
  6138                           
  6139                           ;AD7147.c: 353: {
  6140                           ;AD7147.c: 354: LATCbits.LATC1 = 0;
  6141  00162E  928B               	bcf	3979,1,c	;volatile
  6142                           
  6143                           ;AD7147.c: 355: LATCbits.LATC0 = 1;
  6144  001630  808B               	bsf	3979,0,c	;volatile
  6145                           
  6146                           ;AD7147.c: 356: }
  6147  001632  0012               	return	
  6148  001634                     i2l79:
  6149                           
  6150                           ;AD7147.c: 357: else
  6151                           ;AD7147.c: 358: {
  6152                           ;AD7147.c: 359: LATCbits.LATC0 = 0;
  6153  001634  908B               	bcf	3979,0,c	;volatile
  6154                           
  6155                           ;AD7147.c: 360: LATCbits.LATC1 = 1;
  6156  001636  828B               	bsf	3979,1,c	;volatile
  6157  001638  0012               	return	
  6158  00163A                     __end_ofi2_get_CDC:
  6159                           	opt stack 0
  6160                           pclatu	equ	0xFFB
  6161                           pclath	equ	0xFFA
  6162                           tblptru	equ	0xFF8
  6163                           tblptrh	equ	0xFF7
  6164                           tblptrl	equ	0xFF6
  6165                           tablat	equ	0xFF5
  6166                           prodh	equ	0xFF4
  6167                           prodl	equ	0xFF3
  6168                           intcon	equ	0xFF2
  6169                           intcon2	equ	0xFF1
  6170                           intcon3	equ	0xFF0
  6171                           postinc0	equ	0xFEE
  6172                           fsr0h	equ	0xFEA
  6173                           fsr0l	equ	0xFE9
  6174                           wreg	equ	0xFE8
  6175                           plusw1	equ	0xFE3
  6176                           fsr1h	equ	0xFE2
  6177                           fsr1l	equ	0xFE1
  6178                           indf2	equ	0xFDF
  6179                           postinc2	equ	0xFDE
  6180                           postdec2	equ	0xFDD
  6181                           plusw2	equ	0xFDB
  6182                           fsr2h	equ	0xFDA
  6183                           fsr2l	equ	0xFD9
  6184                           status	equ	0xFD8
  6185                           
  6186 ;; *************** function _r16_spi *****************
  6187 ;; Defined at:
  6188 ;;		line 70 in file "spi.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;		None
  6191 ;; Auto vars:     Size  Location     Type
  6192 ;;  result          2   12[COMRAM] unsigned int 
  6193 ;;  p2              2   10[COMRAM] unsigned int 
  6194 ;;  p1              2    8[COMRAM] unsigned int 
  6195 ;;  blank_high      2    6[COMRAM] unsigned int 
  6196 ;;  blank_low       2    4[COMRAM] unsigned int 
  6197 ;; Return value:  Size  Location     Type
  6198 ;;                  2    0[COMRAM] unsigned int 
  6199 ;; Registers used:
  6200 ;;		wreg, status,2, status,0
  6201 ;; Tracked objects:
  6202 ;;		On entry : 0/0
  6203 ;;		On exit  : 0/0
  6204 ;;		Unchanged: 0/0
  6205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6206 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6207 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6208 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6209 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6210 ;;Total ram usage:       14 bytes
  6211 ;; Hardware stack levels used:    1
  6212 ;; This function calls:
  6213 ;;		Nothing
  6214 ;; This function is called by:
  6215 ;;		_read_cdc1
  6216 ;;		_read_cdc2
  6217 ;; This function uses a non-reentrant model
  6218 ;;
  6219                           
  6220                           	psect	text31
  6221  0014D0                     __ptext31:
  6222                           	opt stack 0
  6223  0014D0                     _r16_spi:
  6224                           	opt stack 25
  6225                           
  6226                           ;spi.c: 72: unsigned int blank_low = 0x000;
  6227                           
  6228                           ;incstack = 0
  6229  0014D0  0E00               	movlw	0
  6230  0014D2  6E06               	movwf	r16_spi@blank_low+1,c
  6231  0014D4  0E00               	movlw	0
  6232  0014D6  6E05               	movwf	r16_spi@blank_low,c
  6233                           
  6234                           ;spi.c: 73: unsigned int blank_high = 0x000;
  6235  0014D8  0E00               	movlw	0
  6236  0014DA  6E08               	movwf	r16_spi@blank_high+1,c
  6237  0014DC  0E00               	movlw	0
  6238  0014DE  6E07               	movwf	r16_spi@blank_high,c
  6239                           
  6240                           ;spi.c: 74: unsigned int p1, p2, result;
  6241                           ;spi.c: 77: SSPBUF = blank_high;
  6242  0014E0  C007  FFC9         	movff	r16_spi@blank_high,4041	;volatile
  6243  0014E4                     i2l291:
  6244  0014E4  A0C7               	btfss	4039,0,c	;volatile
  6245  0014E6  D7FE               	goto	i2l291
  6246                           
  6247                           ;spi.c: 79: p1 = SSPBUF;
  6248  0014E8  CFC9 F009          	movff	4041,r16_spi@p1	;volatile
  6249  0014EC  6A0A               	clrf	r16_spi@p1+1,c
  6250                           
  6251                           ;spi.c: 81: SSPBUF = blank_low;
  6252  0014EE  C005  FFC9         	movff	r16_spi@blank_low,4041	;volatile
  6253  0014F2                     i2l294:
  6254  0014F2  A0C7               	btfss	4039,0,c	;volatile
  6255  0014F4  D7FE               	goto	i2l294
  6256                           
  6257                           ;spi.c: 83: p2 = SSPBUF;
  6258  0014F6  CFC9 F00B          	movff	4041,r16_spi@p2	;volatile
  6259  0014FA  6A0C               	clrf	r16_spi@p2+1,c
  6260                           
  6261                           ;spi.c: 85: result = (p1 << 8) + p2;
  6262  0014FC  5009               	movf	r16_spi@p1,w,c
  6263  0014FE  6E04               	movwf	(??_r16_spi+1)& (0+255),c
  6264  001500  6A03               	clrf	??_r16_spi& (0+255),c
  6265  001502  500B               	movf	r16_spi@p2,w,c
  6266  001504  2403               	addwf	??_r16_spi,w,c
  6267  001506  6E0D               	movwf	r16_spi@result,c
  6268  001508  500C               	movf	r16_spi@p2+1,w,c
  6269  00150A  2004               	addwfc	??_r16_spi+1,w,c
  6270  00150C  6E0E               	movwf	r16_spi@result+1,c
  6271                           
  6272                           ;spi.c: 86: return result;
  6273  00150E  C00D  F001         	movff	r16_spi@result,?_r16_spi
  6274  001512  C00E  F002         	movff	r16_spi@result+1,?_r16_spi+1
  6275  001516  0012               	return	
  6276  001518                     __end_of_r16_spi:
  6277                           	opt stack 0
  6278  0000                     pclatu	equ	0xFFB
  6279                           pclath	equ	0xFFA
  6280                           tblptru	equ	0xFF8
  6281                           tblptrh	equ	0xFF7
  6282                           tblptrl	equ	0xFF6
  6283                           tablat	equ	0xFF5
  6284                           prodh	equ	0xFF4
  6285                           prodl	equ	0xFF3
  6286                           intcon	equ	0xFF2
  6287                           intcon2	equ	0xFF1
  6288                           intcon3	equ	0xFF0
  6289                           postinc0	equ	0xFEE
  6290                           fsr0h	equ	0xFEA
  6291                           fsr0l	equ	0xFE9
  6292                           wreg	equ	0xFE8
  6293                           plusw1	equ	0xFE3
  6294                           fsr1h	equ	0xFE2
  6295                           fsr1l	equ	0xFE1
  6296                           indf2	equ	0xFDF
  6297                           postinc2	equ	0xFDE
  6298                           postdec2	equ	0xFDD
  6299                           plusw2	equ	0xFDB
  6300                           fsr2h	equ	0xFDA
  6301                           fsr2l	equ	0xFD9
  6302                           status	equ	0xFD8
  6303                           pclatu	equ	0xFFB
  6304                           pclath	equ	0xFFA
  6305                           tblptru	equ	0xFF8
  6306                           tblptrh	equ	0xFF7
  6307                           tblptrl	equ	0xFF6
  6308                           tablat	equ	0xFF5
  6309                           prodh	equ	0xFF4
  6310                           prodl	equ	0xFF3
  6311                           intcon	equ	0xFF2
  6312                           intcon2	equ	0xFF1
  6313                           intcon3	equ	0xFF0
  6314                           postinc0	equ	0xFEE
  6315                           fsr0h	equ	0xFEA
  6316                           fsr0l	equ	0xFE9
  6317                           wreg	equ	0xFE8
  6318                           plusw1	equ	0xFE3
  6319                           fsr1h	equ	0xFE2
  6320                           fsr1l	equ	0xFE1
  6321                           indf2	equ	0xFDF
  6322                           postinc2	equ	0xFDE
  6323                           postdec2	equ	0xFDD
  6324                           plusw2	equ	0xFDB
  6325                           fsr2h	equ	0xFDA
  6326                           fsr2l	equ	0xFD9
  6327                           status	equ	0xFD8
  6328                           
  6329                           	psect	rparam
  6330  0000                     pclatu	equ	0xFFB
  6331                           pclath	equ	0xFFA
  6332                           tblptru	equ	0xFF8
  6333                           tblptrh	equ	0xFF7
  6334                           tblptrl	equ	0xFF6
  6335                           tablat	equ	0xFF5
  6336                           prodh	equ	0xFF4
  6337                           prodl	equ	0xFF3
  6338                           intcon	equ	0xFF2
  6339                           intcon2	equ	0xFF1
  6340                           intcon3	equ	0xFF0
  6341                           postinc0	equ	0xFEE
  6342                           fsr0h	equ	0xFEA
  6343                           fsr0l	equ	0xFE9
  6344                           wreg	equ	0xFE8
  6345                           plusw1	equ	0xFE3
  6346                           fsr1h	equ	0xFE2
  6347                           fsr1l	equ	0xFE1
  6348                           indf2	equ	0xFDF
  6349                           postinc2	equ	0xFDE
  6350                           postdec2	equ	0xFDD
  6351                           plusw2	equ	0xFDB
  6352                           fsr2h	equ	0xFDA
  6353                           fsr2l	equ	0xFD9
  6354                           status	equ	0xFD8
  6355                           
  6356                           	psect	temp
  6357  000057                     btemp:
  6358                           	opt stack 0
  6359  000057                     	ds	1
  6360  0000                     int$flags	set	btemp
  6361                           pclatu	equ	0xFFB
  6362                           pclath	equ	0xFFA
  6363                           tblptru	equ	0xFF8
  6364                           tblptrh	equ	0xFF7
  6365                           tblptrl	equ	0xFF6
  6366                           tablat	equ	0xFF5
  6367                           prodh	equ	0xFF4
  6368                           prodl	equ	0xFF3
  6369                           intcon	equ	0xFF2
  6370                           intcon2	equ	0xFF1
  6371                           intcon3	equ	0xFF0
  6372                           postinc0	equ	0xFEE
  6373                           fsr0h	equ	0xFEA
  6374                           fsr0l	equ	0xFE9
  6375                           wreg	equ	0xFE8
  6376                           plusw1	equ	0xFE3
  6377                           fsr1h	equ	0xFE2
  6378                           fsr1l	equ	0xFE1
  6379                           indf2	equ	0xFDF
  6380                           postinc2	equ	0xFDE
  6381                           postdec2	equ	0xFDD
  6382                           plusw2	equ	0xFDB
  6383                           fsr2h	equ	0xFDA
  6384                           fsr2l	equ	0xFD9
  6385                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         162
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      86
    BANK0           160     70     149
    BANK1           256      0      48
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 48
		 -> avail_sensors(BANK1[48]), 

    memset@p	PTR unsigned char  size(2) Largest target is 48
		 -> avail_sensors(BANK1[48]), 

    CDC_RESULT	PTR unsigned int [12] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__memset	PTR void  size(2) Largest target is 48
		 -> avail_sensors(BANK1[48]), 

    read_cdc2@sensor_values	PTR unsigned int  size(2) Largest target is 48
		 -> sensor_values(BANK0[48]), 

    read_cdc1@sensor_values	PTR unsigned int  size(2) Largest target is 48
		 -> sensor_values(BANK0[48]), 

    read_sensor@sensor_values	PTR unsigned int  size(2) Largest target is 48
		 -> sensor_values(BANK0[48]), 

    read_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 6
		 -> interrupt_values_cdc2(COMRAM[6]), interrupt_values_cdc1(COMRAM[6]), 

    write_AD7147@OutputBuffer	PTR unsigned int  size(2) Largest target is 16
		 -> setup_AD7147@StageBuffer(BANK0[16]), 

    setup_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 6
		 -> interrupt_values_cdc1(COMRAM[6]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->i2_read_AD7147
    i2_read_AD7147->i2_w16_r16_spi
    _read_cdc2->i2_w16_r16_spi
    _read_cdc1->i2_w16_r16_spi

Critical Paths under _main in BANK0

    _main->_setup_AD7147
    _switch_LED->_w32_spi
    _setup_AD7147->_write_AD7147
    _write_AD7147->_w32_spi
    _read_AD7147->_w16_r16_spi
    _read_sensor->_w16_r16_spi
    _sensor_CDC->_get_CDC
    _get_ID->_w16_r16_spi
    _blink_LED->_w32_spi
    _delay_ms->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   41394
                                             60 BANK0     10    10      0
                          _blink_LED
                           _delay_ms
                             _get_ID
                    _init_interrupts
                             _memset
                        _read_AD7147
                        _read_sensor
                       _setup_AD7147
                          _setup_mcu
                          _setup_spi
                         _switch_LED
                     _uart_read_char
                _uart_read_indicator
             _uart_read_unsigned_int
                    _uart_write_char
            _uart_write_unsigned_int
 ---------------------------------------------------------------------------------
 (1) _uart_write_unsigned_int                              4     2      2     470
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _uart_write_char                                      1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_read_unsigned_int                               8     6      2      69
                                              0 BANK0      8     6      2
                     _uart_read_char
 ---------------------------------------------------------------------------------
 (2) _uart_read_char                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uart_read_indicator                                  2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _switch_LED                                           8     4      4    4657
                                             22 BANK0      8     4      4
                           _delay_ms
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (1) _setup_spi                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_mcu                                            0     0      0       0
                          _init_uart
                         _setup_port
 ---------------------------------------------------------------------------------
 (2) _setup_port                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_AD7147                                        20    16      4   17706
                                             40 BANK0     20    16      4
                        _read_AD7147
                       _write_AD7147
 ---------------------------------------------------------------------------------
 (2) _write_AD7147                                        18     8     10    9843
                                             22 BANK0     18     8     10
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (2) _read_AD7147                                         12     4      8    4696
                                             22 BANK0     12     4      8
                            _get_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (1) _read_sensor                                         12     8      4    4363
                                             22 BANK0     12     8      4
                         _sensor_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (2) _sensor_CDC                                           4     0      4    3246
                                              4 BANK0      4     0      4
                            _get_CDC
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     324
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _init_interrupts                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_ID                                               5     3      2    3326
                                             22 BANK0      5     3      2
                            _get_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (3) _w16_r16_spi                                         22    20      2     611
                                              0 BANK0     22    20      2
 ---------------------------------------------------------------------------------
 (1) _blink_LED                                            4     2      2    4679
                                             22 BANK0      4     2      2
                           _delay_ms
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (2) _w32_spi                                             22    18      4     944
                                              0 BANK0     22    18      4
 ---------------------------------------------------------------------------------
 (2) _get_CDC                                              4     0      4    2572
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     877
                                              8 BANK0      5     3      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     452
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 14    14      0    2938
                                             34 COMRAM    14    14      0
                          _read_cdc1
                          _read_cdc2
                      i2_read_AD7147
 ---------------------------------------------------------------------------------
 (5) i2_read_AD7147                                       12     4      8    1050
                                             22 COMRAM    12     4      8
                          i2_get_CDC
                      i2_w16_r16_spi
 ---------------------------------------------------------------------------------
 (5) _read_cdc2                                            4     2      2     944
                                             22 COMRAM     4     2      2
                            _r16_spi
                          i2_get_CDC
                      i2_w16_r16_spi
 ---------------------------------------------------------------------------------
 (5) _read_cdc1                                            4     2      2     944
                                             22 COMRAM     4     2      2
                            _r16_spi
                          i2_get_CDC
                      i2_w16_r16_spi
 ---------------------------------------------------------------------------------
 (6) i2_w16_r16_spi                                       22    20      2     285
                                              0 COMRAM    22    20      2
 ---------------------------------------------------------------------------------
 (6) i2_get_CDC                                            4     0      4     356
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) _r16_spi                                             14    12      2     115
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _blink_LED
     _delay_ms
       ___awdiv
     _get_CDC
     _w32_spi
   _delay_ms
     ___awdiv
   _get_ID
     _get_CDC
     _w16_r16_spi
   _init_interrupts
   _memset
   _read_AD7147
     _get_CDC
     _w16_r16_spi
   _read_sensor
     _sensor_CDC
       _get_CDC
     _w16_r16_spi
   _setup_AD7147
     _read_AD7147
       _get_CDC
       _w16_r16_spi
     _write_AD7147
       _get_CDC
       _w32_spi
   _setup_mcu
     _init_uart
     _setup_port
   _setup_spi
   _switch_LED
     _delay_ms
       ___awdiv
     _get_CDC
     _w32_spi
   _uart_read_char
   _uart_read_indicator
   _uart_read_unsigned_int
     _uart_read_char
   _uart_write_char
   _uart_write_unsigned_int

 _ISR (ROOT)
   _read_cdc1
     _r16_spi
     i2_get_CDC
     i2_w16_r16_spi
   _read_cdc2
     _r16_spi
     i2_get_CDC
     i2_w16_r16_spi
   i2_read_AD7147
     i2_get_CDC
     i2_w16_r16_spi

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      30       8       18.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     46      95       5       93.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      56       1       91.5%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11B       6        0.0%
DATA                 0      0     11B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Nov 08 16:34:30 2017

                      _SSPSTATbits 000FC7                                 l38 0CF6  
                               l79 15EE                       ___awdiv@sign 00B1  
                     __CFG_CP0$OFF 000000                                l300 1000  
                              l303 1010                                l306 1020  
                              l309 1030                                l270 114E  
                              l334 169A                                l273 115E  
                              l346 1646                                l267 113E  
                              l276 116E                                l349 164E  
                              l393 13EC                                l385 167A  
                              l386 1670                   i2read_AD7147@cdc 001D  
                ??_init_interrupts 00AC                                _ISR 0008  
                              u870 1528                                u991 00FC  
                              _cdc 0074                                wreg 000FE8  
                       _TXSTA1bits 000FAC                  write_AD7147@index 00C8  
                             ?_ISR 0001                               l2219 0CFE  
                             l2331 140A                               l2501 0B90  
                             l2421 0910                               l2343 1432  
                             l2335 141E                               l2511 0BAE  
                             l2353 15B2                               l2281 10CC  
                             l2329 13F6                               l2513 0BB2  
                             l2433 0972                               l2515 0BB6  
                             l2507 0B98                               l2523 0BD6  
                             l2419 0906                               l2349 15A0  
                             l2277 10AC                               l2509 0BAA  
                             l2453 0A34                               l2437 09A0  
                             l2429 0958                               l2445 09CE  
                             l1807 15DC                               l2519 0BBE  
                             l2447 09EC                               l1833 0E78  
                             l1921 14B8                               l1905 1540  
                             l2465 0A94                               l2457 0A44  
                             l2491 0B24                               l2475 0ABE  
                             l2483 0AD6                               l1845 0EAC  
                             l1861 0EFC                               l2485 0AE8  
                             l2469 0A9C                               l1847 0EB8  
                             l1839 0E8E                               l1919 14A6  
                             l1865 0F10                               l1857 0EEE  
                             l1849 0EBE                               l2497 0B7A  
                             l1883 0C9A                               l1893 0F50  
                             l1877 0C34                               l1897 0F98  
                             u1000 0CE0                               u1130 142E  
                             u1055 139E                               u1307 14AE  
                             i2l79 1634                      r16_spi@result 000D  
                 ??_uart_read_char 00AC             _uart_read_unsigned_int 1558  
                             _main 0896                               fsr0h 000FEA  
                             fsr1h 000FE2                               fsr2h 000FDA  
                             fsr0l 000FE9                               indf2 000FDF  
                             fsr1l 000FE1                               fsr2l 000FD9  
                             btemp 0057   __size_of_uart_write_unsigned_int 001E  
                     ?_read_AD7147 00C2                    ??i2_w16_r16_spi 0003  
    uart_read_unsigned_int@message 00B0                               prodh 000FF4  
                             prodl 000FF3                               start 00EE  
                    ??_w16_r16_spi 00AE                      __CFG_IESO$OFF 000000  
                    __CFG_FOSC$HS1 000000                       ___param_bank 000000  
           read_cdc2@sensor_values 0017                    __end_of_r16_spi 1518  
                            ??_ISR 0023                    __end_of_w32_spi 117C  
         __size_of_uart_write_char 000E                              ?_main 0001  
                  __end_of___awdiv 0F1A                    ___awdiv@divisor 00AE  
                            _RC1IF 007CF5              w16_r16_spi@blank_high 00BC  
     read_AD7147@NumberOfRegisters 00C6                              i2l300 12AA  
                            i2l303 12B8                              i2l306 12C6  
                            i2l156 00B2                              i2l309 12D4  
                            i2l291 14E4                              i2l294 14F2  
                  ___awdiv@counter 00B0                              _TRISC 000F94  
                  __end_of_get_CDC 15F4                     __CFG_FCMEN$OFF 000000  
            __size_of_write_AD7147 00D2                       ?_read_sensor 00C2  
                            _state 00F4                              main@i 00F0  
                            main@k 00EE                              pclath 000FFA  
                            tablat 000FF5                              plusw1 000FE3  
                            plusw2 000FDB                              status 000FD8  
           w16_r16_spi@address_low 00B4                     __CFG_MCLRE$OFF 000000  
                  __initialization 1436                 __size_ofi2_get_CDC 0022  
                     __end_of_main 0BF4             i2w16_r16_spi@blank_low 000F  
              __end_of_w16_r16_spi 1068                    switch_LED@state 00C4  
                     _write_AD7147 0BF4                             ??_main 00E8  
                    __activetblptr 000002                   ___awdiv@dividend 00AC  
         uart_read_indicator@count 00AC                        w32_spi@data 00AE  
                           i2l2233 1236                             i2l2243 1266  
                           i2l2251 11B8                             i2l2261 11E8  
                           i2l2361 1324                             i2l2365 1352  
                   __CFG_WDTEN$OFF 000000                             i2l2395 007A  
                           i2l1951 1626                             _RCREG1 000FAE  
                           _SPBRG1 000FAF                     read_AD7147@cdc 00C8  
                           _SSPBUF 000FC9              switch_LED@message_160 00C8  
                           _TXREG1 000FAD                          ??_r16_spi 0003  
                           _TXSTA1 000FAC                   __end_of_delay_ms 14D0  
                        ??_w32_spi 00B0   write_AD7147@RegisterStartAddress 00C2  
                   __CFG_XINST$OFF 000000                          ??___awdiv 00B0  
                   __CFG_STVREN$ON 000000                             _get_ID 1374  
                           _memset 1596                             clear_0 145A  
                           clear_1 1466                             clear_2 1472  
                           _on_off 0072                   ___awdiv@quotient 00B2  
                        ??_get_CDC 00B0         write_AD7147@Register_Value 00CE  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                  ??_uart_write_char 00AC  
                __end_ofi2_get_CDC 163A                       i2get_CDC@cdc 0001  
          w16_r16_spi@address_high 00B6            _uart_write_unsigned_int 163A  
                       __accesstop 0060            __end_of__initialization 1478  
                    ___rparam_used 000001                        _w16_r16_spi 0FC4  
             __size_of_read_AD7147 00AA                    _init_interrupts 15F4  
                   __pcstackCOMRAM 0001                       __pidataBANK0 16BA  
             i2w16_r16_spi@address 0001            i2w16_r16_spi@blank_high 0011  
               __size_of_blink_LED 00C4              _interrupt_values_cdc1 0051  
            _interrupt_values_cdc2 004B                   r16_spi@blank_low 0005  
                     read_AD7147@i 00CC             __size_ofi2_read_AD7147 007A  
          ?_uart_read_unsigned_int 00AC                         __pbssBANK0 0060  
                       __pbssBANK1 0100               __size_of_read_sensor 00D2  
               __size_of_read_cdc1 007E                 __size_of_read_cdc2 0082  
               __size_of_init_uart 0014       __size_of_uart_read_indicator 0056  
                          ?_get_ID 00C2                         _break_loop 007A  
                          ?_memset 00AC                   __CFG_CANMX$PORTB 000000  
               __size_of_setup_mcu 000A  i2read_AD7147@RegisterStartAddress 0019  
  read_AD7147@RegisterStartAddress 00C4                 __size_of_setup_spi 0016  
                        ?_delay_ms 00B4     __end_of_uart_read_unsigned_int 1596  
                    w16_r16_spi@p1 00B0                      w16_r16_spi@p2 00B2  
                    w16_r16_spi@p3 00BE                      w16_r16_spi@p4 00C0  
        ??_uart_write_unsigned_int 00AE            __end_of_init_interrupts 1618  
                __end_of_blink_LED 0E5C              read_AD7147@DataBuffer 00C2  
                          _r16_spi 14D0                            _w32_spi 10F2  
                    i2_read_AD7147 12FA                            __Hparam 0000  
            __end_ofi2_w16_r16_spi 12FA                            __Lparam 0000  
                          ___awdiv 0E5C                    __size_of_get_ID 006C  
         write_AD7147@OutputBuffer 00C6                    sensor_CDC@state 00B2  
                          __pcinit 1436                            _get_CDC 15CA  
                  __size_of_memset 0034                            __ramtop 0F00  
                          __ptext0 0896                            __ptext1 163A  
                          __ptext2 1696                            __ptext3 1558  
                          __ptext4 166E                            __ptext5 13E0  
                          __ptext6 1068                            __ptext7 1658  
                          __ptext8 16B0                            __ptext9 16A4  
                     __size_of_ISR 00E6                     w32_spi@address 00AC  
                __end_of_read_cdc1 127C                  __end_of_read_cdc2 11FE  
                __end_of_init_uart 1696                         ??_delay_ms 00B6  
                       get_CDC@cdc 00AC               end_of_initialization 1478  
                    ?_setup_AD7147 00D4                            memset@c 00AE  
                          memset@n 00B0                            memset@p 00B2  
                    __Lmediumconst 0000                     ?i2_read_AD7147 0017  
                __end_of_setup_mcu 16BA                  __end_of_setup_spi 166E  
                          postdec2 000FDD    __end_of_uart_write_unsigned_int 1658  
                          postinc0 000FEE                            postinc2 000FDE  
                       _sensor_CDC 1518            __size_of_uart_read_char 0014  
                  _uart_write_char 1696                         _setup_port 16A4  
                        _TRISBbits 000F93                          r16_spi@p1 0009  
                        r16_spi@p2 000B                     i2read_AD7147@i 0021  
                  write_AD7147@cdc 00CA           i2w16_r16_spi@address_low 0009  
                   ??_setup_AD7147 00D8                         _start_stop 00F2  
                        i2_get_CDC 1618                   ?_init_interrupts 0001  
            read_sensor@cdc_sensor 00CC                       ?_w16_r16_spi 00AC  
                       _switch_LED 1068                          w32_spi@p1 00B2  
                        w32_spi@p2 00B4                          w32_spi@p3 00B6  
                        w32_spi@p4 00B8               w16_r16_spi@blank_low 00BA  
                   __end_of_get_ID 13E0                     __end_of_memset 15CA  
              w32_spi@address_high 00BC                start_initialization 1436  
              _uart_read_indicator 13E0                        __end_of_ISR 00EE  
                switch_LED@message 00C6                uart_write_char@data 00AC  
                    _second_sensor 0049            i2read_AD7147@DataBuffer 0017  
                       ?i2_get_CDC 0001                    ??i2_read_AD7147 001F  
                r16_spi@blank_high 0007                      ??_read_AD7147 00CA  
          __end_of_uart_write_char 16A4               ?_uart_read_indicator 0001  
          setup_AD7147@StageBuffer 00D8                        ?_sensor_CDC 00B0  
                       read_cdc1@i 0019                         read_cdc2@i 0019  
                         ??_get_ID 00C4          i2w16_r16_spi@address_high 000B  
                      __pdataBANK0 00F2                           ??_memset 00B2  
         read_sensor@sensor_values 00C2             setup_AD7147@DataBuffer 00D4  
                      ?_setup_port 0001                        __pbssCOMRAM 0031  
                    __pcstackBANK0 00AC                      ??_read_sensor 00C6  
                __size_of_delay_ms 004A             write_AD7147@Data_Value 00D0  
              i2w16_r16_spi@result 000D                           ?_r16_spi 0001  
            ??_uart_read_indicator 00AC                           ?_w32_spi 00AC  
                      ?_switch_LED 00C2                          _blink_LED 0D98  
                        __pintcode 0008                          _device_ID 0076  
                   _uart_read_char 166E                __end_of_read_AD7147 0FC4  
                         ?___awdiv 00AC       i2read_AD7147@Register_Values 001F  
             __end_of_setup_AD7147 0896                           ?_get_CDC 00AC  
                    ?_write_AD7147 00C2                           _BAUDCON1 000FA7  
     uart_write_unsigned_int@char1 00AE       uart_write_unsigned_int@char2 00AF  
                        _indicator 007B                   w32_spi@data_high 00C0  
                        _read_cdc1 11FE                          _read_cdc2 117C  
                        _init_uart 1682                __size_of_sensor_CDC 0040  
                      ??i2_get_CDC 0005                           _LATCbits 000F8B  
                        delay_ms@j 00B7                          delay_ms@n 00B4  
              __end_of_read_sensor 0D98      write_AD7147@NumberOfRegisters 00C4  
                        get_ID@cdc 00C2                           _PIE1bits 000F9D  
              __size_of_setup_port 000C                   ?_uart_write_char 0001  
           __end_of_uart_read_char 1682                           _PIR1bits 000F9E  
                       ?_blink_LED 00C2                           _RCONbits 000FD0  
             __size_of_w16_r16_spi 00A4                          _setup_mcu 16B0  
                        _setup_spi 1658                     ??_write_AD7147 00CC  
                  setup_AD7147@cdc 00D6         read_AD7147@Register_Values 00CA  
                     get_CDC@state 00AE                   __CFG_SOSCSEL$DIG 000000  
                        main@index 00EC           ?_uart_write_unsigned_int 00AC  
           __size_ofi2_w16_r16_spi 007E                __size_of_switch_LED 008A  
                       ?_read_cdc1 0017                         ?_read_cdc2 0017  
                       ?_init_uart 0001                        _INTCON2bits 000FF1  
                      _INTCON3bits 000FF0                 w32_spi@address_low 00BA  
                    switch_LED@cdc 00C2                         _CDC_RESULT 0031  
                  i2w16_r16_spi@p1 0005                    i2w16_r16_spi@p2 0007  
                  i2w16_r16_spi@p3 0013                    i2w16_r16_spi@p4 0015  
                      _read_AD7147 0F1A                   __size_of_r16_spi 0048  
   i2read_AD7147@NumberOfRegisters 001B                         _ANCON1bits 000F5C  
                         __Hrparam 0000             read_cdc1@sensor_values 0017  
                  ?_uart_read_char 0001                       get_ID@result 00C5  
                 __size_of_w32_spi 008A                           __Lrparam 0000  
                     blink_LED@cdc 00C2                   __size_of___awdiv 00BE  
                       ?_setup_mcu 0001                         ?_setup_spi 0001  
         ??_uart_read_unsigned_int 00AE                   __size_of_get_CDC 002A  
      uart_read_unsigned_int@part1 00B2        uart_read_unsigned_int@part2 00B3  
                 sensor_CDC@sensor 00B0                      _single_sensor 0078  
                         _delay_ms 1486                      _sensor_values 007C  
             read_sensor@register1 00CA                           __ptext10 1682  
                         __ptext11 00F2                           __ptext20 0D98  
                         __ptext12 0BF4                           __ptext21 10F2  
                         __ptext13 0F1A                           __ptext30 1618  
                         __ptext22 15CA                           __ptext14 0CC6  
                         __ptext31 14D0                           __ptext23 1486  
                         __ptext15 1518                           __ptext24 0E5C  
                         __ptext16 1596                           __ptext17 15F4  
                         __ptext26 12FA                           __ptext18 1374  
                         __ptext27 117C                           __ptext19 0FC4  
                         __ptext28 11FE                           __ptext29 127C  
                      _read_sensor 0CC6                      _avail_sensors 0100  
                    __size_of_main 035E                    w32_spi@data_low 00BE  
                read_sensor@sensor 00C4                        ??_blink_LED 00C4  
                    i2_w16_r16_spi 127C              __size_of_setup_AD7147 07A4  
         __size_of_init_interrupts 0024                       ??_sensor_CDC 00B4  
                         int$flags 0057                      write_AD7147@i 00D2  
               w16_r16_spi@address 00AC                       ??_setup_port 00AC  
                       _INTCONbits 000FF2                           memset@p1 00AC  
                      ??_read_cdc1 0019                        ??_read_cdc2 0019  
                      ??_init_uart 00AC                           intlevel2 0000  
               __end_of_sensor_CDC 1558               __end_of_write_AD7147 0CC6  
                     _setup_AD7147 00F2              __end_ofi2_read_AD7147 1374  
                       _RCSTA1bits 000FAB                     ?i2_w16_r16_spi 0001  
                     ??_switch_LED 00C6                 __end_of_setup_port 16B0  
                      ??_setup_mcu 00AC                        ??_setup_spi 00AC  
               setup_AD7147@F14884 0060                  w16_r16_spi@result 00B8  
  __size_of_uart_read_unsigned_int 003E                     i2get_CDC@state 0003  
                      _num_sensors 0070                        _SSPCON1bits 000FC6  
               __end_of_switch_LED 10F2        __end_of_uart_read_indicator 1436  
                 blink_LED@message 00C4      uart_write_unsigned_int@number 00AC  
