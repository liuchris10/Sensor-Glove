

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Nov 08 16:24:28 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    46                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    47                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    48  0000                     
    49                           ; Version 1.42
    50                           ; Generated 13/04/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F25K80 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	idataBANK0
    85  0016BC                     __pidataBANK0:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _start_stop
    89  0016BC  0001               	dw	1
    90                           
    91                           ;initializer for _state
    92  0016BE  72                 	db	114
    93  0000                     _ANCON1bits	set	3932
    94  0000                     _RCREG1	set	4014
    95  0000                     _PIR1bits	set	3998
    96  0000                     _TXREG1	set	4013
    97  0000                     _TXSTA1bits	set	4012
    98  0000                     _SSPBUF	set	4041
    99  0000                     _PIE1bits	set	3997
   100  0000                     _SSPCON1bits	set	4038
   101  0000                     _SSPSTATbits	set	4039
   102  0000                     _RCSTA1bits	set	4011
   103  0000                     _BAUDCON1	set	4007
   104  0000                     _SPBRG1	set	4015
   105  0000                     _TXSTA1	set	4012
   106  0000                     _INTCON2bits	set	4081
   107  0000                     _RCONbits	set	4048
   108  0000                     _TRISBbits	set	3987
   109  0000                     _TRISC	set	3988
   110  0000                     _INTCON3bits	set	4080
   111  0000                     _INTCONbits	set	4082
   112  0000                     _LATCbits	set	3979
   113  0000                     _RC1IF	set	31989
   114                           
   115                           ; #config settings
   116  0000                     
   117                           	psect	cinit
   118  001438                     __pcinit:
   119                           	opt stack 0
   120  001438                     start_initialization:
   121                           	opt stack 0
   122  001438                     __initialization:
   123                           	opt stack 0
   124                           
   125                           ; Initialize objects allocated to BANK0 (3 bytes)
   126                           ; load TBLPTR registers with __pidataBANK0
   127  001438  0EBC               	movlw	low __pidataBANK0
   128  00143A  6EF6               	movwf	tblptrl,c
   129  00143C  0E16               	movlw	high __pidataBANK0
   130  00143E  6EF7               	movwf	tblptrh,c
   131  001440  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   132  001442  6EF8               	movwf	tblptru,c
   133  001444  0009               	tblrd		*+	;fetch initializer
   134  001446  CFF5 F0F2          	movff	tablat,__pdataBANK0
   135  00144A  0009               	tblrd		*+	;fetch initializer
   136  00144C  CFF5 F0F3          	movff	tablat,__pdataBANK0+1
   137  001450  0009               	tblrd		*+	;fetch initializer
   138  001452  CFF5 F0F4          	movff	tablat,__pdataBANK0+2
   139                           
   140                           ; Clear objects allocated to BANK1 (48 bytes)
   141  001456  EE01  F000         	lfsr	0,__pbssBANK1
   142  00145A  0E30               	movlw	48
   143  00145C                     clear_0:
   144  00145C  6AEE               	clrf	postinc0,c
   145  00145E  06E8               	decf	wreg,f,c
   146  001460  E1FD               	bnz	clear_0
   147                           
   148                           ; Clear objects allocated to BANK0 (76 bytes)
   149  001462  EE00  F060         	lfsr	0,__pbssBANK0
   150  001466  0E4C               	movlw	76
   151  001468                     clear_1:
   152  001468  6AEE               	clrf	postinc0,c
   153  00146A  06E8               	decf	wreg,f,c
   154  00146C  E1FD               	bnz	clear_1
   155                           
   156                           ; Clear objects allocated to COMRAM (38 bytes)
   157  00146E  EE00  F031         	lfsr	0,__pbssCOMRAM
   158  001472  0E26               	movlw	38
   159  001474                     clear_2:
   160  001474  6AEE               	clrf	postinc0,c
   161  001476  06E8               	decf	wreg,f,c
   162  001478  E1FD               	bnz	clear_2
   163  00147A                     end_of_initialization:
   164                           	opt stack 0
   165  00147A                     __end_of__initialization:
   166                           	opt stack 0
   167  00147A  9057               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   168  00147C  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   169  00147E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   170  001480  6EF8               	movwf	tblptru,c
   171  001482  0100               	movlb	0
   172  001484  EF4C  F004         	goto	_main	;jump to C main() function
   173                           tblptru	equ	0xFF8
   174                           tblptrh	equ	0xFF7
   175                           tblptrl	equ	0xFF6
   176                           tablat	equ	0xFF5
   177                           postinc0	equ	0xFEE
   178                           wreg	equ	0xFE8
   179                           
   180                           	psect	bssCOMRAM
   181  000031                     __pbssCOMRAM:
   182                           	opt stack 0
   183  000031                     _CDC_RESULT:
   184                           	opt stack 0
   185  000031                     	ds	24
   186  000049                     _second_sensor:
   187                           	opt stack 0
   188  000049                     	ds	2
   189  00004B                     _interrupt_values_cdc2:
   190                           	opt stack 0
   191  00004B                     	ds	6
   192  000051                     _interrupt_values_cdc1:
   193                           	opt stack 0
   194  000051                     	ds	6
   195                           tblptru	equ	0xFF8
   196                           tblptrh	equ	0xFF7
   197                           tblptrl	equ	0xFF6
   198                           tablat	equ	0xFF5
   199                           postinc0	equ	0xFEE
   200                           wreg	equ	0xFE8
   201                           
   202                           	psect	bssBANK0
   203  000060                     __pbssBANK0:
   204                           	opt stack 0
   205  000060                     setup_AD7147@F14884:
   206                           	opt stack 0
   207  000060                     	ds	16
   208  000070                     _num_sensors:
   209                           	opt stack 0
   210  000070                     	ds	2
   211  000072                     _on_off:
   212                           	opt stack 0
   213  000072                     	ds	2
   214  000074                     _cdc:
   215                           	opt stack 0
   216  000074                     	ds	2
   217  000076                     _device_ID:
   218                           	opt stack 0
   219  000076                     	ds	2
   220  000078                     _single_sensor:
   221                           	opt stack 0
   222  000078                     	ds	2
   223  00007A                     _break_loop:
   224                           	opt stack 0
   225  00007A                     	ds	1
   226  00007B                     _indicator:
   227                           	opt stack 0
   228  00007B                     	ds	1
   229  00007C                     _sensor_values:
   230                           	opt stack 0
   231  00007C                     	ds	48
   232                           tblptru	equ	0xFF8
   233                           tblptrh	equ	0xFF7
   234                           tblptrl	equ	0xFF6
   235                           tablat	equ	0xFF5
   236                           postinc0	equ	0xFEE
   237                           wreg	equ	0xFE8
   238                           
   239                           	psect	dataBANK0
   240  0000F2                     __pdataBANK0:
   241                           	opt stack 0
   242  0000F2                     _start_stop:
   243                           	opt stack 0
   244  0000F2                     	ds	2
   245  0000F4                     _state:
   246                           	opt stack 0
   247  0000F4                     	ds	1
   248                           tblptru	equ	0xFF8
   249                           tblptrh	equ	0xFF7
   250                           tblptrl	equ	0xFF6
   251                           tablat	equ	0xFF5
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	bssBANK1
   256  000100                     __pbssBANK1:
   257                           	opt stack 0
   258  000100                     _avail_sensors:
   259                           	opt stack 0
   260  000100                     	ds	48
   261                           tblptru	equ	0xFF8
   262                           tblptrh	equ	0xFF7
   263                           tblptrl	equ	0xFF6
   264                           tablat	equ	0xFF5
   265                           postinc0	equ	0xFEE
   266                           wreg	equ	0xFE8
   267                           
   268                           	psect	cstackBANK0
   269  0000AC                     __pcstackBANK0:
   270                           	opt stack 0
   271  0000AC                     ?_w16_r16_spi:
   272                           	opt stack 0
   273  0000AC                     ?_uart_read_unsigned_int:
   274                           	opt stack 0
   275  0000AC                     ?___awdiv:
   276                           	opt stack 0
   277  0000AC                     uart_write_char@data:
   278                           	opt stack 0
   279  0000AC                     get_CDC@cdc:
   280                           	opt stack 0
   281  0000AC                     w32_spi@address:
   282                           	opt stack 0
   283  0000AC                     w16_r16_spi@address:
   284                           	opt stack 0
   285  0000AC                     uart_write_unsigned_int@number:
   286                           	opt stack 0
   287  0000AC                     uart_read_indicator@count:
   288                           	opt stack 0
   289  0000AC                     ___awdiv@dividend:
   290                           	opt stack 0
   291  0000AC                     memset@p1:
   292                           	opt stack 0
   293                           
   294                           ; 2 bytes @ 0x0
   295  0000AC                     	ds	2
   296  0000AE                     ??_w16_r16_spi:
   297  0000AE                     ??_uart_read_unsigned_int:
   298  0000AE                     uart_write_unsigned_int@char1:
   299                           	opt stack 0
   300  0000AE                     get_CDC@state:
   301                           	opt stack 0
   302  0000AE                     w32_spi@data:
   303                           	opt stack 0
   304  0000AE                     ___awdiv@divisor:
   305                           	opt stack 0
   306  0000AE                     memset@c:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0x2
   310  0000AE                     	ds	1
   311  0000AF                     uart_write_unsigned_int@char2:
   312                           	opt stack 0
   313                           
   314                           ; 1 bytes @ 0x3
   315  0000AF                     	ds	1
   316  0000B0                     ??_w32_spi:
   317  0000B0                     ___awdiv@counter:
   318                           	opt stack 0
   319  0000B0                     sensor_CDC@sensor:
   320                           	opt stack 0
   321  0000B0                     w16_r16_spi@p1:
   322                           	opt stack 0
   323  0000B0                     uart_read_unsigned_int@message:
   324                           	opt stack 0
   325  0000B0                     memset@n:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x4
   329  0000B0                     	ds	1
   330  0000B1                     ___awdiv@sign:
   331                           	opt stack 0
   332                           
   333                           ; 1 bytes @ 0x5
   334  0000B1                     	ds	1
   335  0000B2                     uart_read_unsigned_int@part1:
   336                           	opt stack 0
   337  0000B2                     sensor_CDC@state:
   338                           	opt stack 0
   339  0000B2                     w32_spi@p1:
   340                           	opt stack 0
   341  0000B2                     w16_r16_spi@p2:
   342                           	opt stack 0
   343  0000B2                     ___awdiv@quotient:
   344                           	opt stack 0
   345  0000B2                     memset@p:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x6
   349  0000B2                     	ds	1
   350  0000B3                     uart_read_unsigned_int@part2:
   351                           	opt stack 0
   352                           
   353                           ; 1 bytes @ 0x7
   354  0000B3                     	ds	1
   355  0000B4                     delay_ms@n:
   356                           	opt stack 0
   357  0000B4                     w32_spi@p2:
   358                           	opt stack 0
   359  0000B4                     w16_r16_spi@address_low:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x8
   363  0000B4                     	ds	2
   364  0000B6                     ??_delay_ms:
   365  0000B6                     w32_spi@p3:
   366                           	opt stack 0
   367  0000B6                     w16_r16_spi@address_high:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0xA
   371  0000B6                     	ds	1
   372  0000B7                     delay_ms@j:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0xB
   376  0000B7                     	ds	1
   377  0000B8                     w32_spi@p4:
   378                           	opt stack 0
   379  0000B8                     w16_r16_spi@result:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0xC
   383  0000B8                     	ds	2
   384  0000BA                     w32_spi@address_low:
   385                           	opt stack 0
   386  0000BA                     w16_r16_spi@blank_low:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0xE
   390  0000BA                     	ds	2
   391  0000BC                     w32_spi@address_high:
   392                           	opt stack 0
   393  0000BC                     w16_r16_spi@blank_high:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x10
   397  0000BC                     	ds	2
   398  0000BE                     w32_spi@data_low:
   399                           	opt stack 0
   400  0000BE                     w16_r16_spi@p3:
   401                           	opt stack 0
   402                           
   403                           ; 2 bytes @ 0x12
   404  0000BE                     	ds	2
   405  0000C0                     w32_spi@data_high:
   406                           	opt stack 0
   407  0000C0                     w16_r16_spi@p4:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x14
   411  0000C0                     	ds	2
   412  0000C2                     ?_get_ID:
   413                           	opt stack 0
   414  0000C2                     write_AD7147@RegisterStartAddress:
   415                           	opt stack 0
   416  0000C2                     read_AD7147@DataBuffer:
   417                           	opt stack 0
   418  0000C2                     read_sensor@sensor_values:
   419                           	opt stack 0
   420  0000C2                     get_ID@cdc:
   421                           	opt stack 0
   422  0000C2                     switch_LED@cdc:
   423                           	opt stack 0
   424  0000C2                     blink_LED@cdc:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x16
   428  0000C2                     	ds	2
   429  0000C4                     ??_get_ID:
   430  0000C4                     write_AD7147@NumberOfRegisters:
   431                           	opt stack 0
   432  0000C4                     read_AD7147@RegisterStartAddress:
   433                           	opt stack 0
   434  0000C4                     read_sensor@sensor:
   435                           	opt stack 0
   436  0000C4                     switch_LED@state:
   437                           	opt stack 0
   438  0000C4                     blink_LED@message:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x18
   442  0000C4                     	ds	1
   443  0000C5                     get_ID@result:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x19
   447  0000C5                     	ds	1
   448  0000C6                     ??_read_sensor:
   449  0000C6                     write_AD7147@OutputBuffer:
   450                           	opt stack 0
   451  0000C6                     read_AD7147@NumberOfRegisters:
   452                           	opt stack 0
   453  0000C6                     switch_LED@message:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x1A
   457  0000C6                     	ds	2
   458  0000C8                     write_AD7147@index:
   459                           	opt stack 0
   460  0000C8                     read_AD7147@cdc:
   461                           	opt stack 0
   462  0000C8                     switch_LED@message_160:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x1C
   466  0000C8                     	ds	2
   467  0000CA                     write_AD7147@cdc:
   468                           	opt stack 0
   469  0000CA                     read_AD7147@Register_Values:
   470                           	opt stack 0
   471  0000CA                     read_sensor@register1:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0x1E
   475  0000CA                     	ds	2
   476  0000CC                     ??_write_AD7147:
   477  0000CC                     read_AD7147@i:
   478                           	opt stack 0
   479  0000CC                     read_sensor@cdc_sensor:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x20
   483  0000CC                     	ds	2
   484  0000CE                     write_AD7147@Register_Value:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x22
   488  0000CE                     	ds	2
   489  0000D0                     write_AD7147@Data_Value:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x24
   493  0000D0                     	ds	2
   494  0000D2                     write_AD7147@i:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x26
   498  0000D2                     	ds	2
   499  0000D4                     setup_AD7147@DataBuffer:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x28
   503  0000D4                     	ds	2
   504  0000D6                     setup_AD7147@cdc:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x2A
   508  0000D6                     	ds	2
   509  0000D8                     setup_AD7147@StageBuffer:
   510                           	opt stack 0
   511                           
   512                           ; 16 bytes @ 0x2C
   513  0000D8                     	ds	16
   514  0000E8                     ??_main:
   515                           
   516                           ; 1 bytes @ 0x3C
   517  0000E8                     	ds	4
   518  0000EC                     main@index:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x40
   522  0000EC                     	ds	2
   523  0000EE                     main@k:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x42
   527  0000EE                     	ds	2
   528  0000F0                     main@i:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x44
   532  0000F0                     	ds	2
   533                           tblptru	equ	0xFF8
   534                           tblptrh	equ	0xFF7
   535                           tblptrl	equ	0xFF6
   536                           tablat	equ	0xFF5
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           
   540                           	psect	cstackCOMRAM
   541  000001                     __pcstackCOMRAM:
   542                           	opt stack 0
   543  000001                     ?_r16_spi:
   544                           	opt stack 0
   545  000001                     ?i2_w16_r16_spi:
   546                           	opt stack 0
   547  000001                     i2get_CDC@cdc:
   548                           	opt stack 0
   549  000001                     i2w16_r16_spi@address:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x0
   553  000001                     	ds	2
   554  000003                     ??_r16_spi:
   555  000003                     ??i2_w16_r16_spi:
   556  000003                     i2get_CDC@state:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x2
   560  000003                     	ds	2
   561  000005                     r16_spi@blank_low:
   562                           	opt stack 0
   563  000005                     i2w16_r16_spi@p1:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x4
   567  000005                     	ds	2
   568  000007                     r16_spi@blank_high:
   569                           	opt stack 0
   570  000007                     i2w16_r16_spi@p2:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x6
   574  000007                     	ds	2
   575  000009                     r16_spi@p1:
   576                           	opt stack 0
   577  000009                     i2w16_r16_spi@address_low:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x8
   581  000009                     	ds	2
   582  00000B                     r16_spi@p2:
   583                           	opt stack 0
   584  00000B                     i2w16_r16_spi@address_high:
   585                           	opt stack 0
   586                           
   587                           ; 2 bytes @ 0xA
   588  00000B                     	ds	2
   589  00000D                     r16_spi@result:
   590                           	opt stack 0
   591  00000D                     i2w16_r16_spi@result:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0xC
   595  00000D                     	ds	2
   596  00000F                     i2w16_r16_spi@blank_low:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0xE
   600  00000F                     	ds	2
   601  000011                     i2w16_r16_spi@blank_high:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x10
   605  000011                     	ds	2
   606  000013                     i2w16_r16_spi@p3:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x12
   610  000013                     	ds	2
   611  000015                     i2w16_r16_spi@p4:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x14
   615  000015                     	ds	2
   616  000017                     read_cdc1@sensor_values:
   617                           	opt stack 0
   618  000017                     read_cdc2@sensor_values:
   619                           	opt stack 0
   620  000017                     i2read_AD7147@DataBuffer:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x16
   624  000017                     	ds	2
   625  000019                     read_cdc1@i:
   626                           	opt stack 0
   627  000019                     read_cdc2@i:
   628                           	opt stack 0
   629  000019                     i2read_AD7147@RegisterStartAddress:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x18
   633  000019                     	ds	2
   634  00001B                     i2read_AD7147@NumberOfRegisters:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x1A
   638  00001B                     	ds	2
   639  00001D                     i2read_AD7147@cdc:
   640                           	opt stack 0
   641                           
   642                           ; 2 bytes @ 0x1C
   643  00001D                     	ds	2
   644  00001F                     i2read_AD7147@Register_Values:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x1E
   648  00001F                     	ds	2
   649  000021                     i2read_AD7147@i:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x20
   653  000021                     	ds	2
   654  000023                     ??_ISR:
   655                           
   656                           ; 1 bytes @ 0x22
   657  000023                     	ds	14
   658                           tblptru	equ	0xFF8
   659                           tblptrh	equ	0xFF7
   660                           tblptrl	equ	0xFF6
   661                           tablat	equ	0xFF5
   662                           postinc0	equ	0xFEE
   663                           wreg	equ	0xFE8
   664                           
   665 ;;
   666 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   667 ;;
   668 ;; *************** function _main *****************
   669 ;; Defined at:
   670 ;;		line 39 in file "main.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;  index           2   64[BANK0 ] unsigned int 
   675 ;;  i               2   68[BANK0 ] unsigned int 
   676 ;;  k               2   66[BANK0 ] unsigned int 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   687 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   688 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   689 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   690 ;;Total ram usage:       10 bytes
   691 ;; Hardware stack levels required when called:    6
   692 ;; This function calls:
   693 ;;		_blink_LED
   694 ;;		_delay_ms
   695 ;;		_get_ID
   696 ;;		_init_interrupts
   697 ;;		_memset
   698 ;;		_read_AD7147
   699 ;;		_read_sensor
   700 ;;		_setup_AD7147
   701 ;;		_setup_mcu
   702 ;;		_setup_spi
   703 ;;		_switch_LED
   704 ;;		_uart_read_char
   705 ;;		_uart_read_indicator
   706 ;;		_uart_read_unsigned_int
   707 ;;		_uart_write_char
   708 ;;		_uart_write_unsigned_int
   709 ;; This function is called by:
   710 ;;		Startup code after reset
   711 ;; This function uses a non-reentrant model
   712 ;;
   713                           
   714                           	psect	text0
   715  000898                     __ptext0:
   716                           	opt stack 0
   717  000898                     _main:
   718                           	opt stack 25
   719                           
   720                           ;main.c: 41: delay_ms(500);
   721                           
   722                           ;incstack = 0
   723  000898  0E01               	movlw	1
   724  00089A  0100               	movlb	0	; () banked
   725  00089C  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
   726  00089E  0EF4               	movlw	244
   727  0008A0  6FB4               	movwf	delay_ms@n& (0+255),b
   728  0008A2  EC44  F00A         	call	_delay_ms	;wreg free
   729                           
   730                           ;main.c: 42: setup_mcu();
   731  0008A6  EC59  F00B         	call	_setup_mcu	;wreg free
   732                           
   733                           ;main.c: 43: setup_spi();
   734  0008AA  EC2D  F00B         	call	_setup_spi	;wreg free
   735                           
   736                           ;main.c: 44: setup_AD7147(interrupt_values_cdc1, 1);
   737  0008AE  0E51               	movlw	low _interrupt_values_cdc1
   738  0008B0  0100               	movlb	0	; () banked
   739  0008B2  6FD4               	movwf	setup_AD7147@DataBuffer& (0+255),b
   740  0008B4  0E00               	movlw	high _interrupt_values_cdc1
   741  0008B6  0100               	movlb	0	; () banked
   742  0008B8  6FD5               	movwf	(setup_AD7147@DataBuffer+1)& (0+255),b
   743  0008BA  0E00               	movlw	0
   744  0008BC  0100               	movlb	0	; () banked
   745  0008BE  6FD7               	movwf	(setup_AD7147@cdc+1)& (0+255),b
   746  0008C0  0E01               	movlw	1
   747  0008C2  6FD6               	movwf	setup_AD7147@cdc& (0+255),b
   748  0008C4  EC79  F000         	call	_setup_AD7147	;wreg free
   749                           
   750                           ;main.c: 47: blink_LED(1);
   751  0008C8  0E00               	movlw	0
   752  0008CA  0100               	movlb	0	; () banked
   753  0008CC  6FC3               	movwf	(blink_LED@cdc+1)& (0+255),b
   754  0008CE  0E01               	movlw	1
   755  0008D0  6FC2               	movwf	blink_LED@cdc& (0+255),b
   756  0008D2  ECCD  F006         	call	_blink_LED	;wreg free
   757                           
   758                           ;main.c: 48: read_AD7147(interrupt_values_cdc1, 0x008, 3, 1);
   759  0008D6  0E51               	movlw	low _interrupt_values_cdc1
   760  0008D8  0100               	movlb	0	; () banked
   761  0008DA  6FC2               	movwf	read_AD7147@DataBuffer& (0+255),b
   762  0008DC  0E00               	movlw	high _interrupt_values_cdc1
   763  0008DE  0100               	movlb	0	; () banked
   764  0008E0  6FC3               	movwf	(read_AD7147@DataBuffer+1)& (0+255),b
   765  0008E2  0E00               	movlw	0
   766  0008E4  0100               	movlb	0	; () banked
   767  0008E6  6FC5               	movwf	(read_AD7147@RegisterStartAddress+1)& (0+255),b
   768  0008E8  0E08               	movlw	8
   769  0008EA  6FC4               	movwf	read_AD7147@RegisterStartAddress& (0+255),b
   770  0008EC  0E00               	movlw	0
   771  0008EE  0100               	movlb	0	; () banked
   772  0008F0  6FC7               	movwf	(read_AD7147@NumberOfRegisters+1)& (0+255),b
   773  0008F2  0E03               	movlw	3
   774  0008F4  6FC6               	movwf	read_AD7147@NumberOfRegisters& (0+255),b
   775  0008F6  0E00               	movlw	0
   776  0008F8  0100               	movlb	0	; () banked
   777  0008FA  6FC9               	movwf	(read_AD7147@cdc+1)& (0+255),b
   778  0008FC  0E01               	movlw	1
   779  0008FE  6FC8               	movwf	read_AD7147@cdc& (0+255),b
   780  000900  EC8E  F007         	call	_read_AD7147	;wreg free
   781                           
   782                           ;main.c: 49: init_interrupts();
   783  000904  ECFB  F00A         	call	_init_interrupts	;wreg free
   784  000908                     l2419:
   785                           
   786                           ;main.c: 51: {
   787                           ;main.c: 52: indicator = uart_read_char();
   788  000908  EC38  F00B         	call	_uart_read_char	;wreg free
   789  00090C  0100               	movlb	0	; () banked
   790  00090E  6F7B               	movwf	_indicator& (0+255),b
   791                           
   792                           ;main.c: 53: switch (state)
   793  000910  D163               	goto	l2523
   794  000912                     l2421:
   795                           
   796                           ; BSR set to: 0
   797                           ;main.c: 59: single_sensor = uart_read_unsigned_int();
   798  000912  ECAD  F00A         	call	_uart_read_unsigned_int	;wreg free
   799  000916  C0AC  F078         	movff	?_uart_read_unsigned_int,_single_sensor
   800  00091A  C0AD  F079         	movff	?_uart_read_unsigned_int+1,_single_sensor+1
   801                           
   802                           ;main.c: 60: read_sensor(sensor_values, single_sensor);
   803  00091E  0E7C               	movlw	low _sensor_values
   804  000920  0100               	movlb	0	; () banked
   805  000922  6FC2               	movwf	read_sensor@sensor_values& (0+255),b
   806  000924  0E00               	movlw	high _sensor_values
   807  000926  0100               	movlb	0	; () banked
   808  000928  6FC3               	movwf	(read_sensor@sensor_values+1)& (0+255),b
   809  00092A  C078  F0C4         	movff	_single_sensor,read_sensor@sensor
   810  00092E  C079  F0C5         	movff	_single_sensor+1,read_sensor@sensor+1
   811  000932  EC64  F006         	call	_read_sensor	;wreg free
   812                           
   813                           ;main.c: 61: uart_write_unsigned_int(sensor_values[single_sensor]);
   814  000936  90D8               	bcf	status,0,c
   815  000938  0100               	movlb	0	; () banked
   816  00093A  3578               	rlcf	_single_sensor& (0+255),w,b
   817  00093C  6ED9               	movwf	fsr2l,c
   818  00093E  0100               	movlb	0	; () banked
   819  000940  3579               	rlcf	(_single_sensor+1)& (0+255),w,b
   820  000942  6EDA               	movwf	fsr2h,c
   821  000944  0E7C               	movlw	low _sensor_values
   822  000946  26D9               	addwf	fsr2l,f,c
   823  000948  0E00               	movlw	high _sensor_values
   824  00094A  22DA               	addwfc	fsr2h,f,c
   825  00094C  CFDE F0AC          	movff	postinc2,uart_write_unsigned_int@number
   826  000950  CFDD F0AD          	movff	postdec2,uart_write_unsigned_int@number+1
   827  000954  EC1E  F00B         	call	_uart_write_unsigned_int	;wreg free
   828  000958  D12F               	goto	l2515
   829  00095A                     l2429:
   830                           
   831                           ; BSR set to: 0
   832                           ;main.c: 65: cdc = uart_read_unsigned_int();
   833  00095A  ECAD  F00A         	call	_uart_read_unsigned_int	;wreg free
   834  00095E  C0AC  F074         	movff	?_uart_read_unsigned_int,_cdc
   835  000962  C0AD  F075         	movff	?_uart_read_unsigned_int+1,_cdc+1
   836                           
   837                           ;main.c: 66: blink_LED(cdc);
   838  000966  C074  F0C2         	movff	_cdc,blink_LED@cdc
   839  00096A  C075  F0C3         	movff	_cdc+1,blink_LED@cdc+1
   840  00096E  ECCD  F006         	call	_blink_LED	;wreg free
   841  000972  D122               	goto	l2515
   842  000974                     l2433:
   843                           
   844                           ; BSR set to: 0
   845                           ;main.c: 70: cdc = uart_read_unsigned_int();
   846  000974  ECAD  F00A         	call	_uart_read_unsigned_int	;wreg free
   847  000978  C0AC  F074         	movff	?_uart_read_unsigned_int,_cdc
   848  00097C  C0AD  F075         	movff	?_uart_read_unsigned_int+1,_cdc+1
   849                           
   850                           ;main.c: 71: on_off = uart_read_unsigned_int();
   851  000980  ECAD  F00A         	call	_uart_read_unsigned_int	;wreg free
   852  000984  C0AC  F072         	movff	?_uart_read_unsigned_int,_on_off
   853  000988  C0AD  F073         	movff	?_uart_read_unsigned_int+1,_on_off+1
   854                           
   855                           ;main.c: 72: switch_LED(cdc, on_off);
   856  00098C  C074  F0C2         	movff	_cdc,switch_LED@cdc
   857  000990  C075  F0C3         	movff	_cdc+1,switch_LED@cdc+1
   858  000994  C072  F0C4         	movff	_on_off,switch_LED@state
   859  000998  C073  F0C5         	movff	_on_off+1,switch_LED@state+1
   860  00099C  EC35  F008         	call	_switch_LED	;wreg free
   861  0009A0  D10B               	goto	l2515
   862  0009A2                     l2437:
   863                           
   864                           ; BSR set to: 0
   865                           ;main.c: 76: cdc = uart_read_unsigned_int();
   866  0009A2  ECAD  F00A         	call	_uart_read_unsigned_int	;wreg free
   867  0009A6  C0AC  F074         	movff	?_uart_read_unsigned_int,_cdc
   868  0009AA  C0AD  F075         	movff	?_uart_read_unsigned_int+1,_cdc+1
   869                           
   870                           ;main.c: 77: device_ID = get_ID(cdc);
   871  0009AE  C074  F0C2         	movff	_cdc,get_ID@cdc
   872  0009B2  C075  F0C3         	movff	_cdc+1,get_ID@cdc+1
   873  0009B6  ECBB  F009         	call	_get_ID	;wreg free
   874  0009BA  C0C2  F076         	movff	?_get_ID,_device_ID
   875  0009BE  C0C3  F077         	movff	?_get_ID+1,_device_ID+1
   876                           
   877                           ;main.c: 78: uart_write_unsigned_int(device_ID);
   878  0009C2  C076  F0AC         	movff	_device_ID,uart_write_unsigned_int@number
   879  0009C6  C077  F0AD         	movff	_device_ID+1,uart_write_unsigned_int@number+1
   880  0009CA  EC1E  F00B         	call	_uart_write_unsigned_int	;wreg free
   881  0009CE  D0F4               	goto	l2515
   882  0009D0                     l2445:
   883                           
   884                           ; BSR set to: 0
   885  0009D0  0100               	movlb	0	; () banked
   886  0009D2  517B               	movf	_indicator& (0+255),w,b
   887                           
   888                           ; Switch size 1, requested type "space"
   889                           ; Number of cases is 4, Range of values is 98 to 119
   890                           ; switch strategies available:
   891                           ; Name         Instructions Cycles
   892                           ; simple_byte           13     7 (average)
   893                           ;	Chosen strategy is simple_byte
   894  0009D4  0A62               	xorlw	98	; case 98
   895  0009D6  B4D8               	btfsc	status,2,c
   896  0009D8  D79C               	goto	l2421
   897  0009DA  0A04               	xorlw	4	; case 102
   898  0009DC  B4D8               	btfsc	status,2,c
   899  0009DE  D7BD               	goto	l2429
   900  0009E0  0A0E               	xorlw	14	; case 104
   901  0009E2  B4D8               	btfsc	status,2,c
   902  0009E4  D7C7               	goto	l2433
   903  0009E6  0A1F               	xorlw	31	; case 119
   904  0009E8  B4D8               	btfsc	status,2,c
   905  0009EA  D7DB               	goto	l2437
   906                           
   907                           ; BSR set to: 0
   908                           ;main.c: 82: break;
   909  0009EC  D78D               	goto	l2419
   910  0009EE                     l2447:
   911                           
   912                           ; BSR set to: 0
   913                           ;main.c: 88: single_sensor = uart_read_unsigned_int();
   914  0009EE  ECAD  F00A         	call	_uart_read_unsigned_int	;wreg free
   915  0009F2  C0AC  F078         	movff	?_uart_read_unsigned_int,_single_sensor
   916  0009F6  C0AD  F079         	movff	?_uart_read_unsigned_int+1,_single_sensor+1
   917                           
   918                           ;main.c: 89: read_sensor(sensor_values, single_sensor);
   919  0009FA  0E7C               	movlw	low _sensor_values
   920  0009FC  0100               	movlb	0	; () banked
   921  0009FE  6FC2               	movwf	read_sensor@sensor_values& (0+255),b
   922  000A00  0E00               	movlw	high _sensor_values
   923  000A02  0100               	movlb	0	; () banked
   924  000A04  6FC3               	movwf	(read_sensor@sensor_values+1)& (0+255),b
   925  000A06  C078  F0C4         	movff	_single_sensor,read_sensor@sensor
   926  000A0A  C079  F0C5         	movff	_single_sensor+1,read_sensor@sensor+1
   927  000A0E  EC64  F006         	call	_read_sensor	;wreg free
   928                           
   929                           ;main.c: 90: uart_write_unsigned_int(sensor_values[single_sensor]);
   930  000A12  90D8               	bcf	status,0,c
   931  000A14  0100               	movlb	0	; () banked
   932  000A16  3578               	rlcf	_single_sensor& (0+255),w,b
   933  000A18  6ED9               	movwf	fsr2l,c
   934  000A1A  0100               	movlb	0	; () banked
   935  000A1C  3579               	rlcf	(_single_sensor+1)& (0+255),w,b
   936  000A1E  6EDA               	movwf	fsr2h,c
   937  000A20  0E7C               	movlw	low _sensor_values
   938  000A22  26D9               	addwf	fsr2l,f,c
   939  000A24  0E00               	movlw	high _sensor_values
   940  000A26  22DA               	addwfc	fsr2h,f,c
   941  000A28  CFDE F0AC          	movff	postinc2,uart_write_unsigned_int@number
   942  000A2C  CFDD F0AD          	movff	postdec2,uart_write_unsigned_int@number+1
   943  000A30  EC1E  F00B         	call	_uart_write_unsigned_int	;wreg free
   944                           
   945                           ;main.c: 91: break;
   946  000A34  D769               	goto	l2419
   947  000A36                     l2453:
   948                           
   949                           ;main.c: 94: {
   950                           ;main.c: 95: uart_write_char('s');
   951  000A36  0E73               	movlw	115
   952  000A38  EC4C  F00B         	call	_uart_write_char
   953                           
   954                           ;main.c: 96: for(unsigned int i = 0; i<24; i++)
   955  000A3C  0E00               	movlw	0
   956  000A3E  0100               	movlb	0	; () banked
   957  000A40  6FF1               	movwf	(main@i+1)& (0+255),b
   958  000A42  0E00               	movlw	0
   959  000A44  6FF0               	movwf	main@i& (0+255),b
   960  000A46                     l2457:
   961                           
   962                           ; BSR set to: 0
   963  000A46  0100               	movlb	0	; () banked
   964  000A48  51F1               	movf	(main@i+1)& (0+255),w,b
   965  000A4A  E129               	bnz	l2469
   966  000A4C  0E18               	movlw	24
   967  000A4E  0100               	movlb	0	; () banked
   968  000A50  5DF0               	subwf	main@i& (0+255),w,b
   969  000A52  B0D8               	btfsc	status,0,c
   970  000A54  D024               	goto	l2469
   971                           
   972                           ; BSR set to: 0
   973                           ;main.c: 97: {
   974                           ;main.c: 98: if(avail_sensors[i] == 1)
   975                           
   976                           ; BSR set to: 0
   977                           
   978                           ; BSR set to: 0
   979  000A56  90D8               	bcf	status,0,c
   980  000A58  0100               	movlb	0	; () banked
   981  000A5A  35F0               	rlcf	main@i& (0+255),w,b
   982  000A5C  6ED9               	movwf	fsr2l,c
   983  000A5E  0100               	movlb	0	; () banked
   984  000A60  35F1               	rlcf	(main@i+1)& (0+255),w,b
   985  000A62  6EDA               	movwf	fsr2h,c
   986  000A64  0E00               	movlw	low _avail_sensors
   987  000A66  26D9               	addwf	fsr2l,f,c
   988  000A68  0E01               	movlw	high _avail_sensors
   989  000A6A  22DA               	addwfc	fsr2h,f,c
   990  000A6C  04DE               	decf	postinc2,w,c
   991  000A6E  10DE               	iorwf	postinc2,w,c
   992  000A70  A4D8               	btfss	status,2,c
   993  000A72  D011               	goto	l2465
   994                           
   995                           ; BSR set to: 0
   996                           ;main.c: 99: {
   997                           ;main.c: 100: uart_write_unsigned_int(sensor_values[i]);
   998  000A74  90D8               	bcf	status,0,c
   999  000A76  0100               	movlb	0	; () banked
  1000  000A78  35F0               	rlcf	main@i& (0+255),w,b
  1001  000A7A  6ED9               	movwf	fsr2l,c
  1002  000A7C  0100               	movlb	0	; () banked
  1003  000A7E  35F1               	rlcf	(main@i+1)& (0+255),w,b
  1004  000A80  6EDA               	movwf	fsr2h,c
  1005  000A82  0E7C               	movlw	low _sensor_values
  1006  000A84  26D9               	addwf	fsr2l,f,c
  1007  000A86  0E00               	movlw	high _sensor_values
  1008  000A88  22DA               	addwfc	fsr2h,f,c
  1009  000A8A  CFDE F0AC          	movff	postinc2,uart_write_unsigned_int@number
  1010  000A8E  CFDD F0AD          	movff	postdec2,uart_write_unsigned_int@number+1
  1011  000A92  EC1E  F00B         	call	_uart_write_unsigned_int	;wreg free
  1012  000A96                     l2465:
  1013  000A96  0100               	movlb	0	; () banked
  1014  000A98  4BF0               	infsnz	main@i& (0+255),f,b
  1015  000A9A  2BF1               	incf	(main@i+1)& (0+255),f,b
  1016  000A9C  D7D4               	goto	l2457
  1017  000A9E                     l2469:
  1018                           
  1019                           ; BSR set to: 0
  1020                           ;main.c: 101: }
  1021                           ;main.c: 102: }
  1022                           ;main.c: 103: break_loop = uart_read_indicator();
  1023  000A9E  ECF1  F009         	call	_uart_read_indicator	;wreg free
  1024  000AA2  0100               	movlb	0	; () banked
  1025  000AA4  6F7A               	movwf	_break_loop& (0+255),b
  1026                           
  1027                           ; BSR set to: 0
  1028                           ;main.c: 104: if(break_loop == 'z')
  1029  000AA6  0E7A               	movlw	122
  1030  000AA8  0100               	movlb	0	; () banked
  1031  000AAA  197A               	xorwf	_break_loop& (0+255),w,b
  1032  000AAC  A4D8               	btfss	status,2,c
  1033  000AAE  D008               	goto	l2475
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;main.c: 105: {
  1037                           ;main.c: 106: start_stop = 0;
  1038  000AB0  0E00               	movlw	0
  1039  000AB2  0100               	movlb	0	; () banked
  1040  000AB4  6FF3               	movwf	(_start_stop+1)& (0+255),b
  1041  000AB6  0E00               	movlw	0
  1042  000AB8  6FF2               	movwf	_start_stop& (0+255),b
  1043                           
  1044                           ;main.c: 107: state = 'r';
  1045  000ABA  0E72               	movlw	114
  1046  000ABC  0100               	movlb	0	; () banked
  1047  000ABE  6FF4               	movwf	_state& (0+255),b
  1048  000AC0                     l2475:
  1049  000AC0  0100               	movlb	0	; () banked
  1050  000AC2  05F2               	decf	_start_stop& (0+255),w,b
  1051  000AC4  0100               	movlb	0	; () banked
  1052  000AC6  11F3               	iorwf	(_start_stop+1)& (0+255),w,b
  1053  000AC8  B4D8               	btfsc	status,2,c
  1054  000ACA  D7B5               	goto	l2453
  1055                           
  1056                           ; BSR set to: 0
  1057                           ;main.c: 108: }
  1058                           ;main.c: 109: }
  1059                           ;main.c: 110: start_stop = 1;
  1060                           
  1061                           ; BSR set to: 0
  1062  000ACC  0E00               	movlw	0
  1063  000ACE  0100               	movlb	0	; () banked
  1064  000AD0  6FF3               	movwf	(_start_stop+1)& (0+255),b
  1065  000AD2  0E01               	movlw	1
  1066  000AD4  6FF2               	movwf	_start_stop& (0+255),b
  1067                           
  1068                           ;main.c: 111: break;
  1069  000AD6  D718               	goto	l2419
  1070  000AD8                     l2483:
  1071                           
  1072                           ; BSR set to: 0
  1073  000AD8  0100               	movlb	0	; () banked
  1074  000ADA  517B               	movf	_indicator& (0+255),w,b
  1075                           
  1076                           ; Switch size 1, requested type "space"
  1077                           ; Number of cases is 2, Range of values is 117 to 118
  1078                           ; switch strategies available:
  1079                           ; Name         Instructions Cycles
  1080                           ; simple_byte            7     4 (average)
  1081                           ;	Chosen strategy is simple_byte
  1082  000ADC  0A75               	xorlw	117	; case 117
  1083  000ADE  B4D8               	btfsc	status,2,c
  1084  000AE0  D786               	goto	l2447
  1085  000AE2  0A03               	xorlw	3	; case 118
  1086  000AE4  B4D8               	btfsc	status,2,c
  1087  000AE6  D7EC               	goto	l2475
  1088  000AE8  D067               	goto	l2515
  1089  000AEA                     l2485:
  1090                           
  1091                           ; BSR set to: 0
  1092                           ;main.c: 122: memset(avail_sensors, 0, 24*sizeof(avail_sensors[0]));
  1093  000AEA  0E00               	movlw	low _avail_sensors
  1094  000AEC  0100               	movlb	0	; () banked
  1095  000AEE  6FAC               	movwf	memset@p1& (0+255),b
  1096  000AF0  0E01               	movlw	high _avail_sensors
  1097  000AF2  0100               	movlb	0	; () banked
  1098  000AF4  6FAD               	movwf	(memset@p1+1)& (0+255),b
  1099  000AF6  0E00               	movlw	0
  1100  000AF8  0100               	movlb	0	; () banked
  1101  000AFA  6FAF               	movwf	(memset@c+1)& (0+255),b
  1102  000AFC  0E00               	movlw	0
  1103  000AFE  6FAE               	movwf	memset@c& (0+255),b
  1104  000B00  0E00               	movlw	0
  1105  000B02  0100               	movlb	0	; () banked
  1106  000B04  6FB1               	movwf	(memset@n+1)& (0+255),b
  1107  000B06  0E30               	movlw	48
  1108  000B08  6FB0               	movwf	memset@n& (0+255),b
  1109  000B0A  ECCC  F00A         	call	_memset	;wreg free
  1110                           
  1111                           ;main.c: 123: num_sensors = uart_read_unsigned_int();
  1112  000B0E  ECAD  F00A         	call	_uart_read_unsigned_int	;wreg free
  1113  000B12  C0AC  F070         	movff	?_uart_read_unsigned_int,_num_sensors
  1114  000B16  C0AD  F071         	movff	?_uart_read_unsigned_int+1,_num_sensors+1
  1115                           
  1116                           ;main.c: 124: for(unsigned int k = 0; k < num_sensors; k++)
  1117  000B1A  0E00               	movlw	0
  1118  000B1C  0100               	movlb	0	; () banked
  1119  000B1E  6FEF               	movwf	(main@k+1)& (0+255),b
  1120  000B20  0E00               	movlw	0
  1121  000B22  6FEE               	movwf	main@k& (0+255),b
  1122  000B24  D02B               	goto	l2497
  1123  000B26                     l2491:
  1124                           
  1125                           ; BSR set to: 0
  1126                           ;main.c: 125: {
  1127                           ;main.c: 126: unsigned int index = uart_read_unsigned_int();
  1128  000B26  ECAD  F00A         	call	_uart_read_unsigned_int	;wreg free
  1129  000B2A  C0AC  F0EC         	movff	?_uart_read_unsigned_int,main@index
  1130  000B2E  C0AD  F0ED         	movff	?_uart_read_unsigned_int+1,main@index+1
  1131                           
  1132                           ;main.c: 127: avail_sensors[index-1] = 1;
  1133  000B32  0EFE               	movlw	254
  1134  000B34  0100               	movlb	0	; () banked
  1135  000B36  6FE8               	movwf	??_main& (0+255),b
  1136  000B38  0EFF               	movlw	255
  1137  000B3A  0100               	movlb	0	; () banked
  1138  000B3C  6FE9               	movwf	(??_main+1)& (0+255),b
  1139  000B3E  C0EC  F0EA         	movff	main@index,??_main+2
  1140  000B42  C0ED  F0EB         	movff	main@index+1,??_main+3
  1141  000B46  90D8               	bcf	status,0,c
  1142  000B48  0100               	movlb	0	; () banked
  1143  000B4A  37EA               	rlcf	(??_main+2)& (0+255),f,b
  1144  000B4C  37EB               	rlcf	(??_main+3)& (0+255),f,b
  1145  000B4E  0100               	movlb	0	; () banked
  1146  000B50  51E8               	movf	??_main& (0+255),w,b
  1147  000B52  0100               	movlb	0	; () banked
  1148  000B54  27EA               	addwf	(??_main+2)& (0+255),f,b
  1149  000B56  0100               	movlb	0	; () banked
  1150  000B58  51E9               	movf	(??_main+1)& (0+255),w,b
  1151  000B5A  0100               	movlb	0	; () banked
  1152  000B5C  23EB               	addwfc	(??_main+3)& (0+255),f,b
  1153  000B5E  0E00               	movlw	low _avail_sensors
  1154  000B60  0100               	movlb	0	; () banked
  1155  000B62  25EA               	addwf	(??_main+2)& (0+255),w,b
  1156  000B64  6ED9               	movwf	fsr2l,c
  1157  000B66  0E01               	movlw	high _avail_sensors
  1158  000B68  0100               	movlb	0	; () banked
  1159  000B6A  21EB               	addwfc	(??_main+3)& (0+255),w,b
  1160  000B6C  6EDA               	movwf	fsr2h,c
  1161  000B6E  0E01               	movlw	1
  1162  000B70  6EDE               	movwf	postinc2,c
  1163  000B72  0E00               	movlw	0
  1164  000B74  6EDD               	movwf	postdec2,c
  1165                           
  1166                           ; BSR set to: 0
  1167  000B76  0100               	movlb	0	; () banked
  1168  000B78  4BEE               	infsnz	main@k& (0+255),f,b
  1169  000B7A  2BEF               	incf	(main@k+1)& (0+255),f,b
  1170  000B7C                     l2497:
  1171                           
  1172                           ; BSR set to: 0
  1173  000B7C  0100               	movlb	0	; () banked
  1174  000B7E  5170               	movf	_num_sensors& (0+255),w,b
  1175  000B80  0100               	movlb	0	; () banked
  1176  000B82  5DEE               	subwf	main@k& (0+255),w,b
  1177  000B84  0100               	movlb	0	; () banked
  1178  000B86  5171               	movf	(_num_sensors+1)& (0+255),w,b
  1179  000B88  0100               	movlb	0	; () banked
  1180  000B8A  59EF               	subwfb	(main@k+1)& (0+255),w,b
  1181  000B8C  B0D8               	btfsc	status,0,c
  1182  000B8E  D014               	goto	l2515
  1183  000B90  D7CA               	goto	l2491
  1184  000B92                     l2501:
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;main.c: 132: uart_write_char('e');
  1188  000B92  0E65               	movlw	101
  1189  000B94  EC4C  F00B         	call	_uart_write_char
  1190  000B98  D00F               	goto	l2515
  1191  000B9A                     l2507:
  1192                           
  1193                           ; BSR set to: 0
  1194  000B9A  0100               	movlb	0	; () banked
  1195  000B9C  517B               	movf	_indicator& (0+255),w,b
  1196                           
  1197                           ; Switch size 1, requested type "space"
  1198                           ; Number of cases is 2, Range of values is 101 to 110
  1199                           ; switch strategies available:
  1200                           ; Name         Instructions Cycles
  1201                           ; simple_byte            7     4 (average)
  1202                           ;	Chosen strategy is simple_byte
  1203  000B9E  0A65               	xorlw	101	; case 101
  1204  000BA0  B4D8               	btfsc	status,2,c
  1205  000BA2  D7F7               	goto	l2501
  1206  000BA4  0A0B               	xorlw	11	; case 110
  1207  000BA6  B4D8               	btfsc	status,2,c
  1208  000BA8  D7A0               	goto	l2485
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;main.c: 138: break;
  1212  000BAA  D6AE               	goto	l2419
  1213  000BAC                     l2509:
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;main.c: 144: state = 's';
  1217  000BAC  0E73               	movlw	115
  1218  000BAE  D005               	goto	L4
  1219  000BB0                     l2511:
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;main.c: 147: state = 'c';
  1223  000BB0  0E63               	movlw	99
  1224  000BB2  D003               	goto	L4
  1225  000BB4                     l2513:
  1226                           
  1227                           ; BSR set to: 0
  1228                           ;main.c: 150: state = 'p';
  1229  000BB4  0E70               	movlw	112
  1230  000BB6  D001               	goto	L4
  1231  000BB8                     l2515:
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;main.c: 153: state = 'r';
  1235  000BB8  0E72               	movlw	114
  1236  000BBA                     L4:
  1237  000BBA  0100               	movlb	0	; () banked
  1238  000BBC  6FF4               	movwf	_state& (0+255),b
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;main.c: 155: }
  1242                           
  1243                           ;main.c: 154: break;
  1244  000BBE  D6A4               	goto	l2419
  1245  000BC0                     l2519:
  1246                           
  1247                           ; BSR set to: 0
  1248  000BC0  0100               	movlb	0	; () banked
  1249  000BC2  517B               	movf	_indicator& (0+255),w,b
  1250                           
  1251                           ; Switch size 1, requested type "space"
  1252                           ; Number of cases is 3, Range of values is 99 to 115
  1253                           ; switch strategies available:
  1254                           ; Name         Instructions Cycles
  1255                           ; simple_byte           10     6 (average)
  1256                           ;	Chosen strategy is simple_byte
  1257  000BC4  0A63               	xorlw	99	; case 99
  1258  000BC6  B4D8               	btfsc	status,2,c
  1259  000BC8  D7F3               	goto	l2511
  1260  000BCA  0A13               	xorlw	19	; case 112
  1261  000BCC  B4D8               	btfsc	status,2,c
  1262  000BCE  D7F2               	goto	l2513
  1263  000BD0  0A03               	xorlw	3	; case 115
  1264  000BD2  B4D8               	btfsc	status,2,c
  1265  000BD4  D7EB               	goto	l2509
  1266  000BD6  D7F0               	goto	l2515
  1267  000BD8                     l2523:
  1268                           
  1269                           ; BSR set to: 0
  1270  000BD8  0100               	movlb	0	; () banked
  1271  000BDA  51F4               	movf	_state& (0+255),w,b
  1272                           
  1273                           ; Switch size 1, requested type "space"
  1274                           ; Number of cases is 4, Range of values is 99 to 115
  1275                           ; switch strategies available:
  1276                           ; Name         Instructions Cycles
  1277                           ; simple_byte           13     7 (average)
  1278                           ;	Chosen strategy is simple_byte
  1279  000BDC  0A63               	xorlw	99	; case 99
  1280  000BDE  B4D8               	btfsc	status,2,c
  1281  000BE0  D77B               	goto	l2483
  1282  000BE2  0A13               	xorlw	19	; case 112
  1283  000BE4  B4D8               	btfsc	status,2,c
  1284  000BE6  D7D9               	goto	l2507
  1285  000BE8  0A02               	xorlw	2	; case 114
  1286  000BEA  B4D8               	btfsc	status,2,c
  1287  000BEC  D7E9               	goto	l2519
  1288  000BEE  0A01               	xorlw	1	; case 115
  1289  000BF0  B4D8               	btfsc	status,2,c
  1290  000BF2  D6EE               	goto	l2445
  1291                           
  1292                           ; BSR set to: 0
  1293                           
  1294                           ; BSR set to: 0
  1295  000BF4  D689               	goto	l2419
  1296  000BF6                     __end_of_main:
  1297                           	opt stack 0
  1298                           tblptru	equ	0xFF8
  1299                           tblptrh	equ	0xFF7
  1300                           tblptrl	equ	0xFF6
  1301                           tablat	equ	0xFF5
  1302                           postinc0	equ	0xFEE
  1303                           wreg	equ	0xFE8
  1304                           postinc2	equ	0xFDE
  1305                           postdec2	equ	0xFDD
  1306                           fsr2h	equ	0xFDA
  1307                           fsr2l	equ	0xFD9
  1308                           status	equ	0xFD8
  1309                           
  1310 ;; *************** function _uart_write_unsigned_int *****************
  1311 ;; Defined at:
  1312 ;;		line 39 in file "uart.c"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;  number          2    0[BANK0 ] unsigned int 
  1315 ;; Auto vars:     Size  Location     Type
  1316 ;;  char2           1    3[BANK0 ] unsigned char 
  1317 ;;  char1           1    2[BANK0 ] unsigned char 
  1318 ;; Return value:  Size  Location     Type
  1319 ;;                  1    wreg      void 
  1320 ;; Registers used:
  1321 ;;		wreg, status,2
  1322 ;; Tracked objects:
  1323 ;;		On entry : 0/0
  1324 ;;		On exit  : 0/0
  1325 ;;		Unchanged: 0/0
  1326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1327 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1328 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1330 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1331 ;;Total ram usage:        4 bytes
  1332 ;; Hardware stack levels used:    1
  1333 ;; Hardware stack levels required when called:    3
  1334 ;; This function calls:
  1335 ;;		Nothing
  1336 ;; This function is called by:
  1337 ;;		_main
  1338 ;;		_uart_send_sensors
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           	psect	text1
  1343  00163C                     __ptext1:
  1344                           	opt stack 0
  1345  00163C                     _uart_write_unsigned_int:
  1346                           	opt stack 27
  1347                           
  1348                           ;uart.c: 41: char char1 = number & 0xFF;
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;incstack = 0
  1352  00163C  C0AC  F0AE         	movff	uart_write_unsigned_int@number,uart_write_unsigned_int@char1
  1353                           
  1354                           ;uart.c: 42: char char2 = number >> 8;
  1355  001640  0100               	movlb	0	; () banked
  1356  001642  51AD               	movf	(uart_write_unsigned_int@number+1)& (0+255),w,b
  1357  001644  0100               	movlb	0	; () banked
  1358  001646  6FAF               	movwf	uart_write_unsigned_int@char2& (0+255),b
  1359  001648                     l346:
  1360  001648  A2AC               	btfss	4012,1,c	;volatile
  1361  00164A  D7FE               	goto	l346
  1362                           
  1363                           ;uart.c: 45: TXREG1 = char1;
  1364  00164C  C0AE  FFAD         	movff	uart_write_unsigned_int@char1,4013	;volatile
  1365  001650                     l349:
  1366  001650  A2AC               	btfss	4012,1,c	;volatile
  1367  001652  D7FE               	goto	l349
  1368                           
  1369                           ;uart.c: 47: TXREG1 = char2;
  1370  001654  C0AF  FFAD         	movff	uart_write_unsigned_int@char2,4013	;volatile
  1371  001658  0012               	return		;funcret
  1372  00165A                     __end_of_uart_write_unsigned_int:
  1373                           	opt stack 0
  1374                           tblptru	equ	0xFF8
  1375                           tblptrh	equ	0xFF7
  1376                           tblptrl	equ	0xFF6
  1377                           tablat	equ	0xFF5
  1378                           postinc0	equ	0xFEE
  1379                           wreg	equ	0xFE8
  1380                           postinc2	equ	0xFDE
  1381                           postdec2	equ	0xFDD
  1382                           fsr2h	equ	0xFDA
  1383                           fsr2l	equ	0xFD9
  1384                           status	equ	0xFD8
  1385                           
  1386 ;; *************** function _uart_write_char *****************
  1387 ;; Defined at:
  1388 ;;		line 24 in file "uart.c"
  1389 ;; Parameters:    Size  Location     Type
  1390 ;;  data            1    wreg     unsigned char 
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;  data            1    0[BANK0 ] unsigned char 
  1393 ;; Return value:  Size  Location     Type
  1394 ;;                  1    wreg      void 
  1395 ;; Registers used:
  1396 ;;		wreg
  1397 ;; Tracked objects:
  1398 ;;		On entry : 0/0
  1399 ;;		On exit  : 0/0
  1400 ;;		Unchanged: 0/0
  1401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1403 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1405 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1406 ;;Total ram usage:        1 bytes
  1407 ;; Hardware stack levels used:    1
  1408 ;; Hardware stack levels required when called:    3
  1409 ;; This function calls:
  1410 ;;		Nothing
  1411 ;; This function is called by:
  1412 ;;		_main
  1413 ;;		_uart_write_string
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           	psect	text2
  1418  001698                     __ptext2:
  1419                           	opt stack 0
  1420  001698                     _uart_write_char:
  1421                           	opt stack 27
  1422                           
  1423                           ;incstack = 0
  1424                           ;uart_write_char@data stored from wreg
  1425  001698  0100               	movlb	0	; () banked
  1426  00169A  6FAC               	movwf	uart_write_char@data& (0+255),b
  1427  00169C                     l334:
  1428  00169C  A2AC               	btfss	4012,1,c	;volatile
  1429  00169E  D7FE               	goto	l334
  1430                           
  1431                           ;uart.c: 28: TXREG1 = data;
  1432  0016A0  C0AC  FFAD         	movff	uart_write_char@data,4013	;volatile
  1433  0016A4  0012               	return		;funcret
  1434  0016A6                     __end_of_uart_write_char:
  1435                           	opt stack 0
  1436                           tblptru	equ	0xFF8
  1437                           tblptrh	equ	0xFF7
  1438                           tblptrl	equ	0xFF6
  1439                           tablat	equ	0xFF5
  1440                           postinc0	equ	0xFEE
  1441                           wreg	equ	0xFE8
  1442                           postinc2	equ	0xFDE
  1443                           postdec2	equ	0xFDD
  1444                           fsr2h	equ	0xFDA
  1445                           fsr2l	equ	0xFD9
  1446                           status	equ	0xFD8
  1447                           
  1448 ;; *************** function _uart_read_unsigned_int *****************
  1449 ;; Defined at:
  1450 ;;		line 131 in file "uart.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;		None
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;  message         2    4[BANK0 ] unsigned int 
  1455 ;;  part2           1    7[BANK0 ] unsigned char 
  1456 ;;  part1           1    6[BANK0 ] unsigned char 
  1457 ;; Return value:  Size  Location     Type
  1458 ;;                  2    0[BANK0 ] unsigned int 
  1459 ;; Registers used:
  1460 ;;		wreg, status,2, status,0, cstack
  1461 ;; Tracked objects:
  1462 ;;		On entry : 0/0
  1463 ;;		On exit  : 0/0
  1464 ;;		Unchanged: 0/0
  1465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1466 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1467 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1468 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1469 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1470 ;;Total ram usage:        8 bytes
  1471 ;; Hardware stack levels used:    1
  1472 ;; Hardware stack levels required when called:    4
  1473 ;; This function calls:
  1474 ;;		_uart_read_char
  1475 ;; This function is called by:
  1476 ;;		_main
  1477 ;; This function uses a non-reentrant model
  1478 ;;
  1479                           
  1480                           	psect	text3
  1481  00155A                     __ptext3:
  1482                           	opt stack 0
  1483  00155A                     _uart_read_unsigned_int:
  1484                           	opt stack 26
  1485                           
  1486                           ;uart.c: 133: unsigned char part1 = uart_read_char();
  1487                           
  1488                           ;incstack = 0
  1489  00155A  EC38  F00B         	call	_uart_read_char	;wreg free
  1490  00155E  0100               	movlb	0	; () banked
  1491  001560  6FB2               	movwf	uart_read_unsigned_int@part1& (0+255),b
  1492                           
  1493                           ;uart.c: 134: unsigned char part2 = uart_read_char();
  1494  001562  EC38  F00B         	call	_uart_read_char	;wreg free
  1495  001566  0100               	movlb	0	; () banked
  1496  001568  6FB3               	movwf	uart_read_unsigned_int@part2& (0+255),b
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;uart.c: 135: unsigned int message = (unsigned int)((part1 << 8) | part2);
  1500  00156A  0100               	movlb	0	; () banked
  1501  00156C  51B3               	movf	uart_read_unsigned_int@part2& (0+255),w,b
  1502  00156E  C0B2  F0AE         	movff	uart_read_unsigned_int@part1,??_uart_read_unsigned_int
  1503  001572  0100               	movlb	0	; () banked
  1504  001574  6BAF               	clrf	(??_uart_read_unsigned_int+1)& (0+255),b
  1505  001576  C0AE  F0AF         	movff	??_uart_read_unsigned_int,??_uart_read_unsigned_int+1
  1506  00157A  0100               	movlb	0	; () banked
  1507  00157C  6BAE               	clrf	??_uart_read_unsigned_int& (0+255),b
  1508  00157E  0100               	movlb	0	; () banked
  1509  001580  11AE               	iorwf	??_uart_read_unsigned_int& (0+255),w,b
  1510  001582  0100               	movlb	0	; () banked
  1511  001584  6FB0               	movwf	uart_read_unsigned_int@message& (0+255),b
  1512  001586  0100               	movlb	0	; () banked
  1513  001588  51AF               	movf	(??_uart_read_unsigned_int+1)& (0+255),w,b
  1514  00158A  0100               	movlb	0	; () banked
  1515  00158C  6FB1               	movwf	(uart_read_unsigned_int@message+1)& (0+255),b
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;uart.c: 136: return message;
  1519  00158E  C0B0  F0AC         	movff	uart_read_unsigned_int@message,?_uart_read_unsigned_int
  1520  001592  C0B1  F0AD         	movff	uart_read_unsigned_int@message+1,?_uart_read_unsigned_int+1
  1521  001596  0012               	return	
  1522  001598                     __end_of_uart_read_unsigned_int:
  1523                           	opt stack 0
  1524                           tblptru	equ	0xFF8
  1525                           tblptrh	equ	0xFF7
  1526                           tblptrl	equ	0xFF6
  1527                           tablat	equ	0xFF5
  1528                           postinc0	equ	0xFEE
  1529                           wreg	equ	0xFE8
  1530                           postinc2	equ	0xFDE
  1531                           postdec2	equ	0xFDD
  1532                           fsr2h	equ	0xFDA
  1533                           fsr2l	equ	0xFD9
  1534                           status	equ	0xFD8
  1535                           
  1536 ;; *************** function _uart_read_char *****************
  1537 ;; Defined at:
  1538 ;;		line 94 in file "uart.c"
  1539 ;; Parameters:    Size  Location     Type
  1540 ;;		None
  1541 ;; Auto vars:     Size  Location     Type
  1542 ;;		None
  1543 ;; Return value:  Size  Location     Type
  1544 ;;                  1    wreg      unsigned char 
  1545 ;; Registers used:
  1546 ;;		wreg, status,2
  1547 ;; Tracked objects:
  1548 ;;		On entry : 0/0
  1549 ;;		On exit  : 0/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1556 ;;Total ram usage:        0 bytes
  1557 ;; Hardware stack levels used:    1
  1558 ;; Hardware stack levels required when called:    3
  1559 ;; This function calls:
  1560 ;;		Nothing
  1561 ;; This function is called by:
  1562 ;;		_main
  1563 ;;		_uart_read_unsigned_int
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567                           	psect	text4
  1568  001670                     __ptext4:
  1569                           	opt stack 0
  1570  001670                     _uart_read_char:
  1571                           	opt stack 26
  1572                           
  1573                           ;uart.c: 96: while(PIR1bits.RC1IF == 0)
  1574                           
  1575                           ; BSR set to: 0
  1576                           ;incstack = 0
  1577  001670  D005               	goto	l385
  1578  001672                     l386:
  1579                           
  1580                           ;uart.c: 97: {
  1581                           ;uart.c: 98: if(RCSTA1bits.OERR == 1)
  1582  001672  A2AB               	btfss	4011,1,c	;volatile
  1583  001674  D003               	goto	l385
  1584                           
  1585                           ;uart.c: 99: {
  1586                           ;uart.c: 100: RCSTA1bits.OERR = 0;
  1587  001676  92AB               	bcf	4011,1,c	;volatile
  1588                           
  1589                           ;uart.c: 101: RCSTA1bits.CREN = 0;
  1590  001678  98AB               	bcf	4011,4,c	;volatile
  1591                           
  1592                           ;uart.c: 102: RCSTA1bits.CREN = 1;
  1593  00167A  88AB               	bsf	4011,4,c	;volatile
  1594  00167C                     l385:
  1595  00167C  AA9E               	btfss	3998,5,c	;volatile
  1596  00167E  D7F9               	goto	l386
  1597                           
  1598                           ;uart.c: 103: }
  1599                           ;uart.c: 104: }
  1600                           ;uart.c: 105: return RCREG1;
  1601  001680  50AE               	movf	4014,w,c	;volatile
  1602  001682  0012               	return	
  1603  001684                     __end_of_uart_read_char:
  1604                           	opt stack 0
  1605                           tblptru	equ	0xFF8
  1606                           tblptrh	equ	0xFF7
  1607                           tblptrl	equ	0xFF6
  1608                           tablat	equ	0xFF5
  1609                           postinc0	equ	0xFEE
  1610                           wreg	equ	0xFE8
  1611                           postinc2	equ	0xFDE
  1612                           postdec2	equ	0xFDD
  1613                           fsr2h	equ	0xFDA
  1614                           fsr2l	equ	0xFD9
  1615                           status	equ	0xFD8
  1616                           
  1617 ;; *************** function _uart_read_indicator *****************
  1618 ;; Defined at:
  1619 ;;		line 108 in file "uart.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;		None
  1622 ;; Auto vars:     Size  Location     Type
  1623 ;;  count           2    0[BANK0 ] unsigned int 
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  1    wreg      unsigned char 
  1626 ;; Registers used:
  1627 ;;		wreg, status,2, status,0
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1634 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1636 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1637 ;;Total ram usage:        2 bytes
  1638 ;; Hardware stack levels used:    1
  1639 ;; Hardware stack levels required when called:    3
  1640 ;; This function calls:
  1641 ;;		Nothing
  1642 ;; This function is called by:
  1643 ;;		_main
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646                           
  1647                           	psect	text5
  1648  0013E2                     __ptext5:
  1649                           	opt stack 0
  1650  0013E2                     _uart_read_indicator:
  1651                           	opt stack 27
  1652                           
  1653                           ;uart.c: 110: unsigned int count = 0;
  1654                           
  1655                           ;incstack = 0
  1656  0013E2  0E00               	movlw	0
  1657  0013E4  0100               	movlb	0	; () banked
  1658  0013E6  6FAD               	movwf	(uart_read_indicator@count+1)& (0+255),b
  1659  0013E8  0E00               	movlw	0
  1660  0013EA  6FAC               	movwf	uart_read_indicator@count& (0+255),b
  1661                           
  1662                           ;uart.c: 111: while(PIR1bits.RC1IF == 0 && count < 5)
  1663  0013EC  D00F               	goto	l2331
  1664  0013EE                     l393:
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;uart.c: 112: {
  1668                           ;uart.c: 113: if(RCSTA1bits.OERR == 1)
  1669  0013EE  A2AB               	btfss	4011,1,c	;volatile
  1670  0013F0  D003               	goto	l2329
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;uart.c: 114: {
  1674                           ;uart.c: 115: RCSTA1bits.OERR = 0;
  1675  0013F2  92AB               	bcf	4011,1,c	;volatile
  1676                           
  1677                           ;uart.c: 116: RCSTA1bits.CREN = 0;
  1678  0013F4  98AB               	bcf	4011,4,c	;volatile
  1679                           
  1680                           ;uart.c: 117: RCSTA1bits.CREN = 1;
  1681  0013F6  88AB               	bsf	4011,4,c	;volatile
  1682  0013F8                     l2329:
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;uart.c: 118: }
  1686                           ;uart.c: 119: count = count + 1;
  1687  0013F8  0E01               	movlw	1
  1688  0013FA  0100               	movlb	0	; () banked
  1689  0013FC  25AC               	addwf	uart_read_indicator@count& (0+255),w,b
  1690  0013FE  0100               	movlb	0	; () banked
  1691  001400  6FAC               	movwf	uart_read_indicator@count& (0+255),b
  1692  001402  0E00               	movlw	0
  1693  001404  0100               	movlb	0	; () banked
  1694  001406  21AD               	addwfc	(uart_read_indicator@count+1)& (0+255),w,b
  1695  001408  0100               	movlb	0	; () banked
  1696  00140A  6FAD               	movwf	(uart_read_indicator@count+1)& (0+255),b
  1697  00140C                     l2331:
  1698                           
  1699                           ; BSR set to: 0
  1700  00140C  BA9E               	btfsc	3998,5,c	;volatile
  1701  00140E  D008               	goto	l2335
  1702                           
  1703                           ; BSR set to: 0
  1704  001410  0100               	movlb	0	; () banked
  1705  001412  51AD               	movf	(uart_read_indicator@count+1)& (0+255),w,b
  1706  001414  E105               	bnz	l2335
  1707  001416  0E05               	movlw	5
  1708  001418  0100               	movlb	0	; () banked
  1709  00141A  5DAC               	subwf	uart_read_indicator@count& (0+255),w,b
  1710  00141C  A0D8               	btfss	status,0,c
  1711  00141E  D7E7               	goto	l393
  1712  001420                     l2335:
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;uart.c: 120: }
  1716                           ;uart.c: 121: if(count >= 5)
  1717  001420  0100               	movlb	0	; () banked
  1718  001422  51AD               	movf	(uart_read_indicator@count+1)& (0+255),w,b
  1719  001424  E105               	bnz	u1130
  1720  001426  0E05               	movlw	5
  1721  001428  0100               	movlb	0	; () banked
  1722  00142A  5DAC               	subwf	uart_read_indicator@count& (0+255),w,b
  1723  00142C  A0D8               	btfss	status,0,c
  1724  00142E  D002               	goto	l2343
  1725  001430                     u1130:
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;uart.c: 122: {
  1729                           ;uart.c: 123: return 0;
  1730  001430  0E00               	movlw	0
  1731                           
  1732                           ; BSR set to: 0
  1733                           ;uart.c: 124: }
  1734                           
  1735                           ; BSR set to: 0
  1736  001432  0012               	return	
  1737  001434                     l2343:
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;uart.c: 125: else
  1741                           ;uart.c: 126: {
  1742                           ;uart.c: 127: return RCREG1;
  1743  001434  50AE               	movf	4014,w,c	;volatile
  1744                           
  1745                           ; BSR set to: 0
  1746  001436  0012               	return	
  1747  001438                     __end_of_uart_read_indicator:
  1748                           	opt stack 0
  1749                           tblptru	equ	0xFF8
  1750                           tblptrh	equ	0xFF7
  1751                           tblptrl	equ	0xFF6
  1752                           tablat	equ	0xFF5
  1753                           postinc0	equ	0xFEE
  1754                           wreg	equ	0xFE8
  1755                           postinc2	equ	0xFDE
  1756                           postdec2	equ	0xFDD
  1757                           fsr2h	equ	0xFDA
  1758                           fsr2l	equ	0xFD9
  1759                           status	equ	0xFD8
  1760                           
  1761 ;; *************** function _switch_LED *****************
  1762 ;; Defined at:
  1763 ;;		line 313 in file "AD7147.c"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;  cdc             2   22[BANK0 ] unsigned int 
  1766 ;;  state           2   24[BANK0 ] unsigned int 
  1767 ;; Auto vars:     Size  Location     Type
  1768 ;;  message         2   28[BANK0 ] unsigned int 
  1769 ;;  message         2   26[BANK0 ] unsigned int 
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  1    wreg      void 
  1772 ;; Registers used:
  1773 ;;		wreg, status,2, status,0, cstack
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1779 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1780 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1782 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1783 ;;Total ram usage:        8 bytes
  1784 ;; Hardware stack levels used:    1
  1785 ;; Hardware stack levels required when called:    5
  1786 ;; This function calls:
  1787 ;;		_delay_ms
  1788 ;;		_get_CDC
  1789 ;;		_w32_spi
  1790 ;; This function is called by:
  1791 ;;		_main
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text6
  1796  00106A                     __ptext6:
  1797                           	opt stack 0
  1798  00106A                     _switch_LED:
  1799                           	opt stack 25
  1800                           
  1801                           ;AD7147.c: 315: get_CDC(cdc,0);
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;incstack = 0
  1805  00106A  C0C2  F0AC         	movff	switch_LED@cdc,get_CDC@cdc
  1806  00106E  C0C3  F0AD         	movff	switch_LED@cdc+1,get_CDC@cdc+1
  1807  001072  0E00               	movlw	0
  1808  001074  0100               	movlb	0	; () banked
  1809  001076  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  1810  001078  0E00               	movlw	0
  1811  00107A  6FAE               	movwf	get_CDC@state& (0+255),b
  1812  00107C  ECE6  F00A         	call	_get_CDC	;wreg free
  1813                           
  1814                           ;AD7147.c: 316: if (state==1)
  1815  001080  0100               	movlb	0	; () banked
  1816  001082  05C4               	decf	switch_LED@state& (0+255),w,b
  1817  001084  0100               	movlb	0	; () banked
  1818  001086  11C5               	iorwf	(switch_LED@state+1)& (0+255),w,b
  1819  001088  A4D8               	btfss	status,2,c
  1820  00108A  D011               	goto	l2277
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;AD7147.c: 317: {
  1824                           ;AD7147.c: 318: unsigned int message = 0b0010000000000000;
  1825  00108C  0E20               	movlw	32
  1826  00108E  0100               	movlb	0	; () banked
  1827  001090  6FC7               	movwf	(switch_LED@message+1)& (0+255),b
  1828  001092  0E00               	movlw	0
  1829  001094  6FC6               	movwf	switch_LED@message& (0+255),b
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;AD7147.c: 319: w32_spi((0xE000 + 0x005),message);
  1833  001096  0EE0               	movlw	224
  1834  001098  0100               	movlb	0	; () banked
  1835  00109A  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  1836  00109C  0E05               	movlw	5
  1837  00109E  6FAC               	movwf	w32_spi@address& (0+255),b
  1838  0010A0  C0C6  F0AE         	movff	switch_LED@message,w32_spi@data
  1839  0010A4  C0C7  F0AF         	movff	switch_LED@message+1,w32_spi@data+1
  1840  0010A8  EC7A  F008         	call	_w32_spi	;wreg free
  1841                           
  1842                           ;AD7147.c: 320: }
  1843  0010AC  D010               	goto	l2281
  1844  0010AE                     l2277:
  1845                           
  1846                           ;AD7147.c: 321: else
  1847                           ;AD7147.c: 322: {
  1848                           ;AD7147.c: 323: unsigned int message = 0b0011000000000000;
  1849  0010AE  0E30               	movlw	48
  1850  0010B0  0100               	movlb	0	; () banked
  1851  0010B2  6FC9               	movwf	(switch_LED@message_160+1)& (0+255),b
  1852  0010B4  0E00               	movlw	0
  1853  0010B6  6FC8               	movwf	switch_LED@message_160& (0+255),b
  1854                           
  1855                           ; BSR set to: 0
  1856                           ;AD7147.c: 324: w32_spi((0xE000 + 0x005),message);
  1857  0010B8  0EE0               	movlw	224
  1858  0010BA  0100               	movlb	0	; () banked
  1859  0010BC  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  1860  0010BE  0E05               	movlw	5
  1861  0010C0  6FAC               	movwf	w32_spi@address& (0+255),b
  1862  0010C2  C0C8  F0AE         	movff	switch_LED@message_160,w32_spi@data
  1863  0010C6  C0C9  F0AF         	movff	switch_LED@message_160+1,w32_spi@data+1
  1864  0010CA  EC7A  F008         	call	_w32_spi	;wreg free
  1865  0010CE                     l2281:
  1866                           
  1867                           ;AD7147.c: 325: }
  1868                           ;AD7147.c: 326: delay_ms(10);
  1869  0010CE  0E00               	movlw	0
  1870  0010D0  0100               	movlb	0	; () banked
  1871  0010D2  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  1872  0010D4  0E0A               	movlw	10
  1873  0010D6  6FB4               	movwf	delay_ms@n& (0+255),b
  1874  0010D8  EC44  F00A         	call	_delay_ms	;wreg free
  1875                           
  1876                           ;AD7147.c: 327: get_CDC(cdc,1);
  1877  0010DC  C0C2  F0AC         	movff	switch_LED@cdc,get_CDC@cdc
  1878  0010E0  C0C3  F0AD         	movff	switch_LED@cdc+1,get_CDC@cdc+1
  1879  0010E4  0E00               	movlw	0
  1880  0010E6  0100               	movlb	0	; () banked
  1881  0010E8  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  1882  0010EA  0E01               	movlw	1
  1883  0010EC  6FAE               	movwf	get_CDC@state& (0+255),b
  1884  0010EE  ECE6  F00A         	call	_get_CDC	;wreg free
  1885  0010F2  0012               	return		;funcret
  1886  0010F4                     __end_of_switch_LED:
  1887                           	opt stack 0
  1888                           tblptru	equ	0xFF8
  1889                           tblptrh	equ	0xFF7
  1890                           tblptrl	equ	0xFF6
  1891                           tablat	equ	0xFF5
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postinc2	equ	0xFDE
  1895                           postdec2	equ	0xFDD
  1896                           fsr2h	equ	0xFDA
  1897                           fsr2l	equ	0xFD9
  1898                           status	equ	0xFD8
  1899                           
  1900 ;; *************** function _setup_spi *****************
  1901 ;; Defined at:
  1902 ;;		line 4 in file "spi.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;		None
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;		None
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      void 
  1909 ;; Registers used:
  1910 ;;		None
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1920 ;;Total ram usage:        0 bytes
  1921 ;; Hardware stack levels used:    1
  1922 ;; Hardware stack levels required when called:    3
  1923 ;; This function calls:
  1924 ;;		Nothing
  1925 ;; This function is called by:
  1926 ;;		_main
  1927 ;; This function uses a non-reentrant model
  1928 ;;
  1929                           
  1930                           	psect	text7
  1931  00165A                     __ptext7:
  1932                           	opt stack 0
  1933  00165A                     _setup_spi:
  1934                           	opt stack 27
  1935                           
  1936                           ;spi.c: 6: SSPSTATbits.SMP = 0;
  1937                           
  1938                           ;incstack = 0
  1939  00165A  9EC7               	bcf	4039,7,c	;volatile
  1940                           
  1941                           ;spi.c: 7: SSPSTATbits.CKE = 0;
  1942  00165C  9CC7               	bcf	4039,6,c	;volatile
  1943                           
  1944                           ;spi.c: 9: SSPCON1bits.WCOL = 0;
  1945  00165E  9EC6               	bcf	4038,7,c	;volatile
  1946                           
  1947                           ;spi.c: 10: SSPCON1bits.CKP = 1;
  1948  001660  88C6               	bsf	4038,4,c	;volatile
  1949                           
  1950                           ;spi.c: 12: SSPCON1bits.SSPM3 = 0;
  1951  001662  96C6               	bcf	4038,3,c	;volatile
  1952                           
  1953                           ;spi.c: 13: SSPCON1bits.SSPM2 = 0;
  1954  001664  94C6               	bcf	4038,2,c	;volatile
  1955                           
  1956                           ;spi.c: 14: SSPCON1bits.SSPM1 = 1;
  1957  001666  82C6               	bsf	4038,1,c	;volatile
  1958                           
  1959                           ;spi.c: 15: SSPCON1bits.SSPM0 = 0;
  1960  001668  90C6               	bcf	4038,0,c	;volatile
  1961                           
  1962                           ;spi.c: 17: PIE1bits.SSPIE = 0;
  1963  00166A  969D               	bcf	3997,3,c	;volatile
  1964                           
  1965                           ;spi.c: 19: SSPCON1bits.SSPEN = 1;
  1966  00166C  8AC6               	bsf	4038,5,c	;volatile
  1967  00166E  0012               	return		;funcret
  1968  001670                     __end_of_setup_spi:
  1969                           	opt stack 0
  1970                           tblptru	equ	0xFF8
  1971                           tblptrh	equ	0xFF7
  1972                           tblptrl	equ	0xFF6
  1973                           tablat	equ	0xFF5
  1974                           postinc0	equ	0xFEE
  1975                           wreg	equ	0xFE8
  1976                           postinc2	equ	0xFDE
  1977                           postdec2	equ	0xFDD
  1978                           fsr2h	equ	0xFDA
  1979                           fsr2l	equ	0xFD9
  1980                           status	equ	0xFD8
  1981                           
  1982 ;; *************** function _setup_mcu *****************
  1983 ;; Defined at:
  1984 ;;		line 6 in file "micro_setup.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;		None
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;		None
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  1    wreg      void 
  1991 ;; Registers used:
  1992 ;;		wreg, status,2, cstack
  1993 ;; Tracked objects:
  1994 ;;		On entry : 0/0
  1995 ;;		On exit  : 0/0
  1996 ;;		Unchanged: 0/0
  1997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2002 ;;Total ram usage:        0 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; Hardware stack levels required when called:    4
  2005 ;; This function calls:
  2006 ;;		_init_uart
  2007 ;;		_setup_port
  2008 ;; This function is called by:
  2009 ;;		_main
  2010 ;; This function uses a non-reentrant model
  2011 ;;
  2012                           
  2013                           	psect	text8
  2014  0016B2                     __ptext8:
  2015                           	opt stack 0
  2016  0016B2                     _setup_mcu:
  2017                           	opt stack 26
  2018                           
  2019                           ;micro_setup.c: 8: setup_port();
  2020                           
  2021                           ;incstack = 0
  2022  0016B2  EC53  F00B         	call	_setup_port	;wreg free
  2023                           
  2024                           ;micro_setup.c: 9: init_uart();
  2025  0016B6  EC42  F00B         	call	_init_uart	;wreg free
  2026  0016BA  0012               	return		;funcret
  2027  0016BC                     __end_of_setup_mcu:
  2028                           	opt stack 0
  2029                           tblptru	equ	0xFF8
  2030                           tblptrh	equ	0xFF7
  2031                           tblptrl	equ	0xFF6
  2032                           tablat	equ	0xFF5
  2033                           postinc0	equ	0xFEE
  2034                           wreg	equ	0xFE8
  2035                           postinc2	equ	0xFDE
  2036                           postdec2	equ	0xFDD
  2037                           fsr2h	equ	0xFDA
  2038                           fsr2l	equ	0xFD9
  2039                           status	equ	0xFD8
  2040                           
  2041 ;; *************** function _setup_port *****************
  2042 ;; Defined at:
  2043 ;;		line 12 in file "micro_setup.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;		None
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;		None
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  1    wreg      void 
  2050 ;; Registers used:
  2051 ;;		wreg, status,2
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2061 ;;Total ram usage:        0 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; Hardware stack levels required when called:    3
  2064 ;; This function calls:
  2065 ;;		Nothing
  2066 ;; This function is called by:
  2067 ;;		_setup_mcu
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text9
  2072  0016A6                     __ptext9:
  2073                           	opt stack 0
  2074  0016A6                     _setup_port:
  2075                           	opt stack 26
  2076                           
  2077                           ;micro_setup.c: 16: TRISC = 0b10010000;
  2078                           
  2079                           ;incstack = 0
  2080  0016A6  0E90               	movlw	144
  2081  0016A8  6E94               	movwf	3988,c	;volatile
  2082                           
  2083                           ;micro_setup.c: 17: LATCbits.LATC1=1;
  2084  0016AA  828B               	bsf	3979,1,c	;volatile
  2085                           
  2086                           ;micro_setup.c: 18: LATCbits.LATC0=1;
  2087  0016AC  808B               	bsf	3979,0,c	;volatile
  2088                           
  2089                           ;micro_setup.c: 19: LATCbits.LATC2=1;
  2090  0016AE  848B               	bsf	3979,2,c	;volatile
  2091  0016B0  0012               	return		;funcret
  2092  0016B2                     __end_of_setup_port:
  2093                           	opt stack 0
  2094                           tblptru	equ	0xFF8
  2095                           tblptrh	equ	0xFF7
  2096                           tblptrl	equ	0xFF6
  2097                           tablat	equ	0xFF5
  2098                           postinc0	equ	0xFEE
  2099                           wreg	equ	0xFE8
  2100                           postinc2	equ	0xFDE
  2101                           postdec2	equ	0xFDD
  2102                           fsr2h	equ	0xFDA
  2103                           fsr2l	equ	0xFD9
  2104                           status	equ	0xFD8
  2105                           
  2106 ;; *************** function _init_uart *****************
  2107 ;; Defined at:
  2108 ;;		line 47 in file "micro_setup.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;		None
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;		None
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  1    wreg      void 
  2115 ;; Registers used:
  2116 ;;		wreg, status,2
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2126 ;;Total ram usage:        0 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    3
  2129 ;; This function calls:
  2130 ;;		Nothing
  2131 ;; This function is called by:
  2132 ;;		_setup_mcu
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text10
  2137  001684                     __ptext10:
  2138                           	opt stack 0
  2139  001684                     _init_uart:
  2140                           	opt stack 26
  2141                           
  2142                           ;micro_setup.c: 49: TXSTA1 = 0b00100000;
  2143                           
  2144                           ;incstack = 0
  2145  001684  0E20               	movlw	32
  2146  001686  6EAC               	movwf	4012,c	;volatile
  2147                           
  2148                           ;micro_setup.c: 61: SPBRG1 = 12;
  2149  001688  0E0C               	movlw	12
  2150  00168A  6EAF               	movwf	4015,c	;volatile
  2151                           
  2152                           ;micro_setup.c: 63: BAUDCON1 = 0b00000000;
  2153  00168C  0E00               	movlw	0
  2154  00168E  6EA7               	movwf	4007,c	;volatile
  2155                           
  2156                           ;micro_setup.c: 83: RCSTA1bits.SPEN=1;
  2157  001690  8EAB               	bsf	4011,7,c	;volatile
  2158                           
  2159                           ;micro_setup.c: 84: RCSTA1bits.RX9=0;
  2160  001692  9CAB               	bcf	4011,6,c	;volatile
  2161                           
  2162                           ;micro_setup.c: 85: RCSTA1bits.CREN=1;
  2163  001694  88AB               	bsf	4011,4,c	;volatile
  2164  001696  0012               	return		;funcret
  2165  001698                     __end_of_init_uart:
  2166                           	opt stack 0
  2167                           tblptru	equ	0xFF8
  2168                           tblptrh	equ	0xFF7
  2169                           tblptrl	equ	0xFF6
  2170                           tablat	equ	0xFF5
  2171                           postinc0	equ	0xFEE
  2172                           wreg	equ	0xFE8
  2173                           postinc2	equ	0xFDE
  2174                           postdec2	equ	0xFDD
  2175                           fsr2h	equ	0xFDA
  2176                           fsr2l	equ	0xFD9
  2177                           status	equ	0xFD8
  2178                           
  2179 ;; *************** function _setup_AD7147 *****************
  2180 ;; Defined at:
  2181 ;;		line 6 in file "AD7147.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  DataBuffer      2   40[BANK0 ] PTR unsigned int 
  2184 ;;		 -> interrupt_values_cdc1(6), 
  2185 ;;  cdc             2   42[BANK0 ] unsigned int 
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;  StageBuffer    16   44[BANK0 ] unsigned int [8]
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2197 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2198 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2200 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2201 ;;Total ram usage:       20 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    5
  2204 ;; This function calls:
  2205 ;;		_read_AD7147
  2206 ;;		_write_AD7147
  2207 ;; This function is called by:
  2208 ;;		_main
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           	psect	text11
  2213  0000F2                     __ptext11:
  2214                           	opt stack 0
  2215  0000F2                     _setup_AD7147:
  2216                           	opt stack 25
  2217                           
  2218                           ;AD7147.c: 8: unsigned int StageBuffer[8] = {0};
  2219                           
  2220                           ;incstack = 0
  2221  0000F2  EE20  F060         	lfsr	2,setup_AD7147@F14884
  2222  0000F6  EE10  F0D8         	lfsr	1,setup_AD7147@StageBuffer
  2223  0000FA  0E0F               	movlw	15
  2224  0000FC                     u991:
  2225  0000FC  CFDB FFE3          	movff	plusw2,plusw1
  2226  000100  06E8               	decf	wreg,f,c
  2227  000102  E2FC               	bc	u991
  2228                           
  2229                           ;AD7147.c: 23: StageBuffer[0] = 0xFFFE;
  2230  000104  0EFF               	movlw	255
  2231  000106  0100               	movlb	0	; () banked
  2232  000108  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2233  00010A  0EFE               	movlw	254
  2234  00010C  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;AD7147.c: 24: StageBuffer[1] = 0x1FFF;
  2238  00010E  0E1F               	movlw	31
  2239  000110  0100               	movlb	0	; () banked
  2240  000112  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2241  000114  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;AD7147.c: 25: StageBuffer[2] = 0x0100;
  2245  000116  0E01               	movlw	1
  2246  000118  0100               	movlb	0	; () banked
  2247  00011A  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2248  00011C  0E00               	movlw	0
  2249  00011E  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;AD7147.c: 26: StageBuffer[3] = 0x2121;
  2253  000120  0E21               	movlw	33
  2254  000122  0100               	movlb	0	; () banked
  2255  000124  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2256  000126  0E21               	movlw	33
  2257  000128  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;AD7147.c: 27: StageBuffer[4] = 500;
  2261  00012A  0E01               	movlw	1
  2262  00012C  0100               	movlb	0	; () banked
  2263  00012E  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2264  000130  0EF4               	movlw	244
  2265  000132  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;AD7147.c: 28: StageBuffer[5] = 500;
  2269  000134  0E01               	movlw	1
  2270  000136  0100               	movlb	0	; () banked
  2271  000138  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2272  00013A  0EF4               	movlw	244
  2273  00013C  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;AD7147.c: 29: StageBuffer[6] = 600;
  2277  00013E  0E02               	movlw	2
  2278  000140  0100               	movlb	0	; () banked
  2279  000142  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2280  000144  0E58               	movlw	88
  2281  000146  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;AD7147.c: 30: StageBuffer[7] = 600;
  2285  000148  0E02               	movlw	2
  2286  00014A  0100               	movlb	0	; () banked
  2287  00014C  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2288  00014E  0E58               	movlw	88
  2289  000150  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;AD7147.c: 31: write_AD7147(0x080, 8, StageBuffer, 0, cdc);
  2293  000152  0E00               	movlw	0
  2294  000154  0100               	movlb	0	; () banked
  2295  000156  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2296  000158  0E80               	movlw	128
  2297  00015A  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2298  00015C  0E00               	movlw	0
  2299  00015E  0100               	movlb	0	; () banked
  2300  000160  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2301  000162  0E08               	movlw	8
  2302  000164  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2303  000166  0ED8               	movlw	low setup_AD7147@StageBuffer
  2304  000168  0100               	movlb	0	; () banked
  2305  00016A  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2306  00016C  0E00               	movlw	high setup_AD7147@StageBuffer
  2307  00016E  0100               	movlb	0	; () banked
  2308  000170  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2309  000172  0E00               	movlw	0
  2310  000174  0100               	movlb	0	; () banked
  2311  000176  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2312  000178  0E00               	movlw	0
  2313  00017A  6FC8               	movwf	write_AD7147@index& (0+255),b
  2314  00017C  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2315  000180  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2316  000184  ECFB  F005         	call	_write_AD7147	;wreg free
  2317                           
  2318                           ;AD7147.c: 36: StageBuffer[0]=0xFFFB;
  2319  000188  0EFF               	movlw	255
  2320  00018A  0100               	movlb	0	; () banked
  2321  00018C  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2322  00018E  0EFB               	movlw	251
  2323  000190  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;AD7147.c: 37: StageBuffer[1]=0x1FFF;
  2327  000192  0E1F               	movlw	31
  2328  000194  0100               	movlb	0	; () banked
  2329  000196  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2330  000198  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;AD7147.c: 38: StageBuffer[2]=0x0100;
  2334  00019A  0E01               	movlw	1
  2335  00019C  0100               	movlb	0	; () banked
  2336  00019E  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2337  0001A0  0E00               	movlw	0
  2338  0001A2  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2339                           
  2340                           ; BSR set to: 0
  2341                           ;AD7147.c: 39: StageBuffer[3]=0x2121;
  2342  0001A4  0E21               	movlw	33
  2343  0001A6  0100               	movlb	0	; () banked
  2344  0001A8  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2345  0001AA  0E21               	movlw	33
  2346  0001AC  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;AD7147.c: 40: StageBuffer[4]=500;
  2350  0001AE  0E01               	movlw	1
  2351  0001B0  0100               	movlb	0	; () banked
  2352  0001B2  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2353  0001B4  0EF4               	movlw	244
  2354  0001B6  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;AD7147.c: 41: StageBuffer[5]=500;
  2358  0001B8  0E01               	movlw	1
  2359  0001BA  0100               	movlb	0	; () banked
  2360  0001BC  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2361  0001BE  0EF4               	movlw	244
  2362  0001C0  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;AD7147.c: 42: StageBuffer[6]=600;
  2366  0001C2  0E02               	movlw	2
  2367  0001C4  0100               	movlb	0	; () banked
  2368  0001C6  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2369  0001C8  0E58               	movlw	88
  2370  0001CA  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;AD7147.c: 43: StageBuffer[7]=600;
  2374  0001CC  0E02               	movlw	2
  2375  0001CE  0100               	movlb	0	; () banked
  2376  0001D0  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2377  0001D2  0E58               	movlw	88
  2378  0001D4  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;AD7147.c: 44: write_AD7147(0x088, 8, StageBuffer, 0, cdc);
  2382  0001D6  0E00               	movlw	0
  2383  0001D8  0100               	movlb	0	; () banked
  2384  0001DA  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2385  0001DC  0E88               	movlw	136
  2386  0001DE  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2387  0001E0  0E00               	movlw	0
  2388  0001E2  0100               	movlb	0	; () banked
  2389  0001E4  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2390  0001E6  0E08               	movlw	8
  2391  0001E8  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2392  0001EA  0ED8               	movlw	low setup_AD7147@StageBuffer
  2393  0001EC  0100               	movlb	0	; () banked
  2394  0001EE  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2395  0001F0  0E00               	movlw	high setup_AD7147@StageBuffer
  2396  0001F2  0100               	movlb	0	; () banked
  2397  0001F4  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2398  0001F6  0E00               	movlw	0
  2399  0001F8  0100               	movlb	0	; () banked
  2400  0001FA  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2401  0001FC  0E00               	movlw	0
  2402  0001FE  6FC8               	movwf	write_AD7147@index& (0+255),b
  2403  000200  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2404  000204  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2405  000208  ECFB  F005         	call	_write_AD7147	;wreg free
  2406                           
  2407                           ;AD7147.c: 49: StageBuffer[0]=0xFFEF;
  2408  00020C  0EFF               	movlw	255
  2409  00020E  0100               	movlb	0	; () banked
  2410  000210  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2411  000212  0EEF               	movlw	239
  2412  000214  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2413                           
  2414                           ; BSR set to: 0
  2415                           ;AD7147.c: 50: StageBuffer[1]=0x1FFF;
  2416  000216  0E1F               	movlw	31
  2417  000218  0100               	movlb	0	; () banked
  2418  00021A  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2419  00021C  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;AD7147.c: 51: StageBuffer[2]=0x0100;
  2423  00021E  0E01               	movlw	1
  2424  000220  0100               	movlb	0	; () banked
  2425  000222  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2426  000224  0E00               	movlw	0
  2427  000226  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;AD7147.c: 52: StageBuffer[3]=0x2121;
  2431  000228  0E21               	movlw	33
  2432  00022A  0100               	movlb	0	; () banked
  2433  00022C  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2434  00022E  0E21               	movlw	33
  2435  000230  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;AD7147.c: 53: StageBuffer[4]=500;
  2439  000232  0E01               	movlw	1
  2440  000234  0100               	movlb	0	; () banked
  2441  000236  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2442  000238  0EF4               	movlw	244
  2443  00023A  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;AD7147.c: 54: StageBuffer[5]=500;
  2447  00023C  0E01               	movlw	1
  2448  00023E  0100               	movlb	0	; () banked
  2449  000240  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2450  000242  0EF4               	movlw	244
  2451  000244  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;AD7147.c: 55: StageBuffer[6]=600;
  2455  000246  0E02               	movlw	2
  2456  000248  0100               	movlb	0	; () banked
  2457  00024A  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2458  00024C  0E58               	movlw	88
  2459  00024E  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;AD7147.c: 56: StageBuffer[7]=600;
  2463  000250  0E02               	movlw	2
  2464  000252  0100               	movlb	0	; () banked
  2465  000254  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2466  000256  0E58               	movlw	88
  2467  000258  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;AD7147.c: 57: write_AD7147(0x090, 8, StageBuffer, 0, cdc);
  2471  00025A  0E00               	movlw	0
  2472  00025C  0100               	movlb	0	; () banked
  2473  00025E  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2474  000260  0E90               	movlw	144
  2475  000262  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2476  000264  0E00               	movlw	0
  2477  000266  0100               	movlb	0	; () banked
  2478  000268  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2479  00026A  0E08               	movlw	8
  2480  00026C  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2481  00026E  0ED8               	movlw	low setup_AD7147@StageBuffer
  2482  000270  0100               	movlb	0	; () banked
  2483  000272  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2484  000274  0E00               	movlw	high setup_AD7147@StageBuffer
  2485  000276  0100               	movlb	0	; () banked
  2486  000278  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2487  00027A  0E00               	movlw	0
  2488  00027C  0100               	movlb	0	; () banked
  2489  00027E  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2490  000280  0E00               	movlw	0
  2491  000282  6FC8               	movwf	write_AD7147@index& (0+255),b
  2492  000284  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2493  000288  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2494  00028C  ECFB  F005         	call	_write_AD7147	;wreg free
  2495                           
  2496                           ;AD7147.c: 62: StageBuffer[0]=0xFFBF;
  2497  000290  0EFF               	movlw	255
  2498  000292  0100               	movlb	0	; () banked
  2499  000294  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2500  000296  0EBF               	movlw	191
  2501  000298  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;AD7147.c: 63: StageBuffer[1]=0x1FFF;
  2505  00029A  0E1F               	movlw	31
  2506  00029C  0100               	movlb	0	; () banked
  2507  00029E  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2508  0002A0  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;AD7147.c: 64: StageBuffer[2]=0x0100;
  2512  0002A2  0E01               	movlw	1
  2513  0002A4  0100               	movlb	0	; () banked
  2514  0002A6  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2515  0002A8  0E00               	movlw	0
  2516  0002AA  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;AD7147.c: 65: StageBuffer[3]=0x2121;
  2520  0002AC  0E21               	movlw	33
  2521  0002AE  0100               	movlb	0	; () banked
  2522  0002B0  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2523  0002B2  0E21               	movlw	33
  2524  0002B4  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;AD7147.c: 66: StageBuffer[4]=500;
  2528  0002B6  0E01               	movlw	1
  2529  0002B8  0100               	movlb	0	; () banked
  2530  0002BA  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2531  0002BC  0EF4               	movlw	244
  2532  0002BE  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2533                           
  2534                           ; BSR set to: 0
  2535                           ;AD7147.c: 67: StageBuffer[5]=500;
  2536  0002C0  0E01               	movlw	1
  2537  0002C2  0100               	movlb	0	; () banked
  2538  0002C4  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2539  0002C6  0EF4               	movlw	244
  2540  0002C8  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;AD7147.c: 68: StageBuffer[6]=600;
  2544  0002CA  0E02               	movlw	2
  2545  0002CC  0100               	movlb	0	; () banked
  2546  0002CE  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2547  0002D0  0E58               	movlw	88
  2548  0002D2  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;AD7147.c: 69: StageBuffer[7]=600;
  2552  0002D4  0E02               	movlw	2
  2553  0002D6  0100               	movlb	0	; () banked
  2554  0002D8  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2555  0002DA  0E58               	movlw	88
  2556  0002DC  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;AD7147.c: 70: write_AD7147(0x098, 8, StageBuffer, 0, cdc);
  2560  0002DE  0E00               	movlw	0
  2561  0002E0  0100               	movlb	0	; () banked
  2562  0002E2  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2563  0002E4  0E98               	movlw	152
  2564  0002E6  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2565  0002E8  0E00               	movlw	0
  2566  0002EA  0100               	movlb	0	; () banked
  2567  0002EC  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2568  0002EE  0E08               	movlw	8
  2569  0002F0  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2570  0002F2  0ED8               	movlw	low setup_AD7147@StageBuffer
  2571  0002F4  0100               	movlb	0	; () banked
  2572  0002F6  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2573  0002F8  0E00               	movlw	high setup_AD7147@StageBuffer
  2574  0002FA  0100               	movlb	0	; () banked
  2575  0002FC  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2576  0002FE  0E00               	movlw	0
  2577  000300  0100               	movlb	0	; () banked
  2578  000302  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2579  000304  0E00               	movlw	0
  2580  000306  6FC8               	movwf	write_AD7147@index& (0+255),b
  2581  000308  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2582  00030C  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2583  000310  ECFB  F005         	call	_write_AD7147	;wreg free
  2584                           
  2585                           ;AD7147.c: 75: StageBuffer[0]=0xFFFF;
  2586  000314  0100               	movlb	0	; () banked
  2587  000316  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2588  000318  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;AD7147.c: 76: StageBuffer[1]=0x3FFF;
  2592  00031A  0E3F               	movlw	63
  2593  00031C  0100               	movlb	0	; () banked
  2594  00031E  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2595  000320  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;AD7147.c: 77: StageBuffer[2]=0x0000;
  2599  000322  0E00               	movlw	0
  2600  000324  0100               	movlb	0	; () banked
  2601  000326  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2602  000328  0E00               	movlw	0
  2603  00032A  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;AD7147.c: 78: StageBuffer[3]=0x2626;
  2607  00032C  0E26               	movlw	38
  2608  00032E  0100               	movlb	0	; () banked
  2609  000330  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2610  000332  0E26               	movlw	38
  2611  000334  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2612                           
  2613                           ; BSR set to: 0
  2614                           ;AD7147.c: 79: StageBuffer[4]=4000;
  2615  000336  0E0F               	movlw	15
  2616  000338  0100               	movlb	0	; () banked
  2617  00033A  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2618  00033C  0EA0               	movlw	160
  2619  00033E  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;AD7147.c: 80: StageBuffer[5]=2500;
  2623  000340  0E09               	movlw	9
  2624  000342  0100               	movlb	0	; () banked
  2625  000344  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2626  000346  0EC4               	movlw	196
  2627  000348  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;AD7147.c: 81: StageBuffer[6]=4000;
  2631  00034A  0E0F               	movlw	15
  2632  00034C  0100               	movlb	0	; () banked
  2633  00034E  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2634  000350  0EA0               	movlw	160
  2635  000352  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;AD7147.c: 82: StageBuffer[7]=4000;
  2639  000354  0E0F               	movlw	15
  2640  000356  0100               	movlb	0	; () banked
  2641  000358  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2642  00035A  0EA0               	movlw	160
  2643  00035C  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;AD7147.c: 83: write_AD7147(0x0A0, 8, StageBuffer,0, cdc);
  2647  00035E  0E00               	movlw	0
  2648  000360  0100               	movlb	0	; () banked
  2649  000362  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2650  000364  0EA0               	movlw	160
  2651  000366  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2652  000368  0E00               	movlw	0
  2653  00036A  0100               	movlb	0	; () banked
  2654  00036C  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2655  00036E  0E08               	movlw	8
  2656  000370  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2657  000372  0ED8               	movlw	low setup_AD7147@StageBuffer
  2658  000374  0100               	movlb	0	; () banked
  2659  000376  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2660  000378  0E00               	movlw	high setup_AD7147@StageBuffer
  2661  00037A  0100               	movlb	0	; () banked
  2662  00037C  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2663  00037E  0E00               	movlw	0
  2664  000380  0100               	movlb	0	; () banked
  2665  000382  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2666  000384  0E00               	movlw	0
  2667  000386  6FC8               	movwf	write_AD7147@index& (0+255),b
  2668  000388  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2669  00038C  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2670  000390  ECFB  F005         	call	_write_AD7147	;wreg free
  2671                           
  2672                           ;AD7147.c: 88: StageBuffer[0]=0xFFFF;
  2673  000394  0100               	movlb	0	; () banked
  2674  000396  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2675  000398  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;AD7147.c: 89: StageBuffer[1]=0x3FFF;
  2679  00039A  0E3F               	movlw	63
  2680  00039C  0100               	movlb	0	; () banked
  2681  00039E  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2682  0003A0  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;AD7147.c: 90: StageBuffer[2]=0x0000;
  2686  0003A2  0E00               	movlw	0
  2687  0003A4  0100               	movlb	0	; () banked
  2688  0003A6  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2689  0003A8  0E00               	movlw	0
  2690  0003AA  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2691                           
  2692                           ; BSR set to: 0
  2693                           ;AD7147.c: 91: StageBuffer[3]=0x2626;
  2694  0003AC  0E26               	movlw	38
  2695  0003AE  0100               	movlb	0	; () banked
  2696  0003B0  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2697  0003B2  0E26               	movlw	38
  2698  0003B4  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;AD7147.c: 92: StageBuffer[4]=4000;
  2702  0003B6  0E0F               	movlw	15
  2703  0003B8  0100               	movlb	0	; () banked
  2704  0003BA  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2705  0003BC  0EA0               	movlw	160
  2706  0003BE  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2707                           
  2708                           ; BSR set to: 0
  2709                           ;AD7147.c: 93: StageBuffer[5]=2500;
  2710  0003C0  0E09               	movlw	9
  2711  0003C2  0100               	movlb	0	; () banked
  2712  0003C4  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2713  0003C6  0EC4               	movlw	196
  2714  0003C8  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2715                           
  2716                           ; BSR set to: 0
  2717                           ;AD7147.c: 94: StageBuffer[6]=4000;
  2718  0003CA  0E0F               	movlw	15
  2719  0003CC  0100               	movlb	0	; () banked
  2720  0003CE  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2721  0003D0  0EA0               	movlw	160
  2722  0003D2  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;AD7147.c: 95: StageBuffer[7]=4000;
  2726  0003D4  0E0F               	movlw	15
  2727  0003D6  0100               	movlb	0	; () banked
  2728  0003D8  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2729  0003DA  0EA0               	movlw	160
  2730  0003DC  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;AD7147.c: 96: write_AD7147(0x0A8, 8, StageBuffer,0, cdc);
  2734  0003DE  0E00               	movlw	0
  2735  0003E0  0100               	movlb	0	; () banked
  2736  0003E2  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2737  0003E4  0EA8               	movlw	168
  2738  0003E6  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2739  0003E8  0E00               	movlw	0
  2740  0003EA  0100               	movlb	0	; () banked
  2741  0003EC  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2742  0003EE  0E08               	movlw	8
  2743  0003F0  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2744  0003F2  0ED8               	movlw	low setup_AD7147@StageBuffer
  2745  0003F4  0100               	movlb	0	; () banked
  2746  0003F6  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2747  0003F8  0E00               	movlw	high setup_AD7147@StageBuffer
  2748  0003FA  0100               	movlb	0	; () banked
  2749  0003FC  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2750  0003FE  0E00               	movlw	0
  2751  000400  0100               	movlb	0	; () banked
  2752  000402  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2753  000404  0E00               	movlw	0
  2754  000406  6FC8               	movwf	write_AD7147@index& (0+255),b
  2755  000408  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2756  00040C  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2757  000410  ECFB  F005         	call	_write_AD7147	;wreg free
  2758                           
  2759                           ;AD7147.c: 101: StageBuffer[0]=0xFFFF;
  2760  000414  0100               	movlb	0	; () banked
  2761  000416  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2762  000418  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;AD7147.c: 102: StageBuffer[1]=0x3FFF;
  2766  00041A  0E3F               	movlw	63
  2767  00041C  0100               	movlb	0	; () banked
  2768  00041E  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2769  000420  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;AD7147.c: 103: StageBuffer[2]=0x0000;
  2773  000422  0E00               	movlw	0
  2774  000424  0100               	movlb	0	; () banked
  2775  000426  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2776  000428  0E00               	movlw	0
  2777  00042A  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;AD7147.c: 104: StageBuffer[3]=0x2626;
  2781  00042C  0E26               	movlw	38
  2782  00042E  0100               	movlb	0	; () banked
  2783  000430  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2784  000432  0E26               	movlw	38
  2785  000434  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;AD7147.c: 105: StageBuffer[4]=4000;
  2789  000436  0E0F               	movlw	15
  2790  000438  0100               	movlb	0	; () banked
  2791  00043A  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2792  00043C  0EA0               	movlw	160
  2793  00043E  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;AD7147.c: 106: StageBuffer[5]=2500;
  2797  000440  0E09               	movlw	9
  2798  000442  0100               	movlb	0	; () banked
  2799  000444  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2800  000446  0EC4               	movlw	196
  2801  000448  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;AD7147.c: 107: StageBuffer[6]=4000;
  2805  00044A  0E0F               	movlw	15
  2806  00044C  0100               	movlb	0	; () banked
  2807  00044E  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2808  000450  0EA0               	movlw	160
  2809  000452  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;AD7147.c: 108: StageBuffer[7]=4000;
  2813  000454  0E0F               	movlw	15
  2814  000456  0100               	movlb	0	; () banked
  2815  000458  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2816  00045A  0EA0               	movlw	160
  2817  00045C  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;AD7147.c: 109: write_AD7147(0x0B0, 8, StageBuffer, 0, cdc);
  2821  00045E  0E00               	movlw	0
  2822  000460  0100               	movlb	0	; () banked
  2823  000462  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2824  000464  0EB0               	movlw	176
  2825  000466  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2826  000468  0E00               	movlw	0
  2827  00046A  0100               	movlb	0	; () banked
  2828  00046C  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2829  00046E  0E08               	movlw	8
  2830  000470  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2831  000472  0ED8               	movlw	low setup_AD7147@StageBuffer
  2832  000474  0100               	movlb	0	; () banked
  2833  000476  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2834  000478  0E00               	movlw	high setup_AD7147@StageBuffer
  2835  00047A  0100               	movlb	0	; () banked
  2836  00047C  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2837  00047E  0E00               	movlw	0
  2838  000480  0100               	movlb	0	; () banked
  2839  000482  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2840  000484  0E00               	movlw	0
  2841  000486  6FC8               	movwf	write_AD7147@index& (0+255),b
  2842  000488  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2843  00048C  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2844  000490  ECFB  F005         	call	_write_AD7147	;wreg free
  2845                           
  2846                           ;AD7147.c: 114: StageBuffer[0]=0xFFFF;
  2847  000494  0100               	movlb	0	; () banked
  2848  000496  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2849  000498  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;AD7147.c: 115: StageBuffer[1]=0x3FFF;
  2853  00049A  0E3F               	movlw	63
  2854  00049C  0100               	movlb	0	; () banked
  2855  00049E  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2856  0004A0  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;AD7147.c: 116: StageBuffer[2]=0x0000;
  2860  0004A2  0E00               	movlw	0
  2861  0004A4  0100               	movlb	0	; () banked
  2862  0004A6  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2863  0004A8  0E00               	movlw	0
  2864  0004AA  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;AD7147.c: 117: StageBuffer[3]=0x2626;
  2868  0004AC  0E26               	movlw	38
  2869  0004AE  0100               	movlb	0	; () banked
  2870  0004B0  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2871  0004B2  0E26               	movlw	38
  2872  0004B4  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;AD7147.c: 118: StageBuffer[4]=4000;
  2876  0004B6  0E0F               	movlw	15
  2877  0004B8  0100               	movlb	0	; () banked
  2878  0004BA  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2879  0004BC  0EA0               	movlw	160
  2880  0004BE  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;AD7147.c: 119: StageBuffer[5]=2500;
  2884  0004C0  0E09               	movlw	9
  2885  0004C2  0100               	movlb	0	; () banked
  2886  0004C4  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2887  0004C6  0EC4               	movlw	196
  2888  0004C8  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;AD7147.c: 120: StageBuffer[6]=4000;
  2892  0004CA  0E0F               	movlw	15
  2893  0004CC  0100               	movlb	0	; () banked
  2894  0004CE  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2895  0004D0  0EA0               	movlw	160
  2896  0004D2  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;AD7147.c: 121: StageBuffer[7]=4000;
  2900  0004D4  0E0F               	movlw	15
  2901  0004D6  0100               	movlb	0	; () banked
  2902  0004D8  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2903  0004DA  0EA0               	movlw	160
  2904  0004DC  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2905                           
  2906                           ; BSR set to: 0
  2907                           ;AD7147.c: 122: write_AD7147(0x0B8, 8, StageBuffer, 0, cdc);
  2908  0004DE  0E00               	movlw	0
  2909  0004E0  0100               	movlb	0	; () banked
  2910  0004E2  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2911  0004E4  0EB8               	movlw	184
  2912  0004E6  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  2913  0004E8  0E00               	movlw	0
  2914  0004EA  0100               	movlb	0	; () banked
  2915  0004EC  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  2916  0004EE  0E08               	movlw	8
  2917  0004F0  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  2918  0004F2  0ED8               	movlw	low setup_AD7147@StageBuffer
  2919  0004F4  0100               	movlb	0	; () banked
  2920  0004F6  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  2921  0004F8  0E00               	movlw	high setup_AD7147@StageBuffer
  2922  0004FA  0100               	movlb	0	; () banked
  2923  0004FC  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  2924  0004FE  0E00               	movlw	0
  2925  000500  0100               	movlb	0	; () banked
  2926  000502  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  2927  000504  0E00               	movlw	0
  2928  000506  6FC8               	movwf	write_AD7147@index& (0+255),b
  2929  000508  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  2930  00050C  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  2931  000510  ECFB  F005         	call	_write_AD7147	;wreg free
  2932                           
  2933                           ;AD7147.c: 127: StageBuffer[0]=0xFFFF;
  2934  000514  0100               	movlb	0	; () banked
  2935  000516  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  2936  000518  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;AD7147.c: 128: StageBuffer[1]=0x3FFF;
  2940  00051A  0E3F               	movlw	63
  2941  00051C  0100               	movlb	0	; () banked
  2942  00051E  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  2943  000520  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;AD7147.c: 129: StageBuffer[2]=0x0000;
  2947  000522  0E00               	movlw	0
  2948  000524  0100               	movlb	0	; () banked
  2949  000526  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  2950  000528  0E00               	movlw	0
  2951  00052A  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;AD7147.c: 130: StageBuffer[3]=0x2626;
  2955  00052C  0E26               	movlw	38
  2956  00052E  0100               	movlb	0	; () banked
  2957  000530  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  2958  000532  0E26               	movlw	38
  2959  000534  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;AD7147.c: 131: StageBuffer[4]=4000;
  2963  000536  0E0F               	movlw	15
  2964  000538  0100               	movlb	0	; () banked
  2965  00053A  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  2966  00053C  0EA0               	movlw	160
  2967  00053E  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;AD7147.c: 132: StageBuffer[5]=2500;
  2971  000540  0E09               	movlw	9
  2972  000542  0100               	movlb	0	; () banked
  2973  000544  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  2974  000546  0EC4               	movlw	196
  2975  000548  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;AD7147.c: 133: StageBuffer[6]=4000;
  2979  00054A  0E0F               	movlw	15
  2980  00054C  0100               	movlb	0	; () banked
  2981  00054E  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  2982  000550  0EA0               	movlw	160
  2983  000552  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;AD7147.c: 134: StageBuffer[7]=4000;
  2987  000554  0E0F               	movlw	15
  2988  000556  0100               	movlb	0	; () banked
  2989  000558  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  2990  00055A  0EA0               	movlw	160
  2991  00055C  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;AD7147.c: 135: write_AD7147(0x0C0, 8, StageBuffer, 0, cdc);
  2995  00055E  0E00               	movlw	0
  2996  000560  0100               	movlb	0	; () banked
  2997  000562  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  2998  000564  0EC0               	movlw	192
  2999  000566  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3000  000568  0E00               	movlw	0
  3001  00056A  0100               	movlb	0	; () banked
  3002  00056C  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3003  00056E  0E08               	movlw	8
  3004  000570  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3005  000572  0ED8               	movlw	low setup_AD7147@StageBuffer
  3006  000574  0100               	movlb	0	; () banked
  3007  000576  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3008  000578  0E00               	movlw	high setup_AD7147@StageBuffer
  3009  00057A  0100               	movlb	0	; () banked
  3010  00057C  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3011  00057E  0E00               	movlw	0
  3012  000580  0100               	movlb	0	; () banked
  3013  000582  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3014  000584  0E00               	movlw	0
  3015  000586  6FC8               	movwf	write_AD7147@index& (0+255),b
  3016  000588  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3017  00058C  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3018  000590  ECFB  F005         	call	_write_AD7147	;wreg free
  3019                           
  3020                           ;AD7147.c: 140: StageBuffer[0]=0xFFFF;
  3021  000594  0100               	movlb	0	; () banked
  3022  000596  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  3023  000598  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;AD7147.c: 141: StageBuffer[1]=0x3FFF;
  3027  00059A  0E3F               	movlw	63
  3028  00059C  0100               	movlb	0	; () banked
  3029  00059E  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  3030  0005A0  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;AD7147.c: 142: StageBuffer[2]=0x0000;
  3034  0005A2  0E00               	movlw	0
  3035  0005A4  0100               	movlb	0	; () banked
  3036  0005A6  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3037  0005A8  0E00               	movlw	0
  3038  0005AA  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3039                           
  3040                           ; BSR set to: 0
  3041                           ;AD7147.c: 143: StageBuffer[3]=0x2626;
  3042  0005AC  0E26               	movlw	38
  3043  0005AE  0100               	movlb	0	; () banked
  3044  0005B0  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  3045  0005B2  0E26               	movlw	38
  3046  0005B4  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;AD7147.c: 144: StageBuffer[4]=4000;
  3050  0005B6  0E0F               	movlw	15
  3051  0005B8  0100               	movlb	0	; () banked
  3052  0005BA  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  3053  0005BC  0EA0               	movlw	160
  3054  0005BE  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;AD7147.c: 145: StageBuffer[5]=2500;
  3058  0005C0  0E09               	movlw	9
  3059  0005C2  0100               	movlb	0	; () banked
  3060  0005C4  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  3061  0005C6  0EC4               	movlw	196
  3062  0005C8  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;AD7147.c: 146: StageBuffer[6]=4000;
  3066  0005CA  0E0F               	movlw	15
  3067  0005CC  0100               	movlb	0	; () banked
  3068  0005CE  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3069  0005D0  0EA0               	movlw	160
  3070  0005D2  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;AD7147.c: 147: StageBuffer[7]=4000;
  3074  0005D4  0E0F               	movlw	15
  3075  0005D6  0100               	movlb	0	; () banked
  3076  0005D8  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3077  0005DA  0EA0               	movlw	160
  3078  0005DC  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;AD7147.c: 148: write_AD7147(0x0C8, 8, StageBuffer, 0, cdc);
  3082  0005DE  0E00               	movlw	0
  3083  0005E0  0100               	movlb	0	; () banked
  3084  0005E2  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3085  0005E4  0EC8               	movlw	200
  3086  0005E6  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3087  0005E8  0E00               	movlw	0
  3088  0005EA  0100               	movlb	0	; () banked
  3089  0005EC  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3090  0005EE  0E08               	movlw	8
  3091  0005F0  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3092  0005F2  0ED8               	movlw	low setup_AD7147@StageBuffer
  3093  0005F4  0100               	movlb	0	; () banked
  3094  0005F6  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3095  0005F8  0E00               	movlw	high setup_AD7147@StageBuffer
  3096  0005FA  0100               	movlb	0	; () banked
  3097  0005FC  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3098  0005FE  0E00               	movlw	0
  3099  000600  0100               	movlb	0	; () banked
  3100  000602  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3101  000604  0E00               	movlw	0
  3102  000606  6FC8               	movwf	write_AD7147@index& (0+255),b
  3103  000608  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3104  00060C  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3105  000610  ECFB  F005         	call	_write_AD7147	;wreg free
  3106                           
  3107                           ;AD7147.c: 153: StageBuffer[0]=0xFFFF;
  3108  000614  0100               	movlb	0	; () banked
  3109  000616  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  3110  000618  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;AD7147.c: 154: StageBuffer[1]=0x3FFF;
  3114  00061A  0E3F               	movlw	63
  3115  00061C  0100               	movlb	0	; () banked
  3116  00061E  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  3117  000620  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;AD7147.c: 155: StageBuffer[2]=0x0000;
  3121  000622  0E00               	movlw	0
  3122  000624  0100               	movlb	0	; () banked
  3123  000626  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3124  000628  0E00               	movlw	0
  3125  00062A  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;AD7147.c: 156: StageBuffer[3]=0x2626;
  3129  00062C  0E26               	movlw	38
  3130  00062E  0100               	movlb	0	; () banked
  3131  000630  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  3132  000632  0E26               	movlw	38
  3133  000634  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;AD7147.c: 157: StageBuffer[4]=4000;
  3137  000636  0E0F               	movlw	15
  3138  000638  0100               	movlb	0	; () banked
  3139  00063A  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  3140  00063C  0EA0               	movlw	160
  3141  00063E  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  3142                           
  3143                           ; BSR set to: 0
  3144                           ;AD7147.c: 158: StageBuffer[5]=2500;
  3145  000640  0E09               	movlw	9
  3146  000642  0100               	movlb	0	; () banked
  3147  000644  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  3148  000646  0EC4               	movlw	196
  3149  000648  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;AD7147.c: 159: StageBuffer[6]=4000;
  3153  00064A  0E0F               	movlw	15
  3154  00064C  0100               	movlb	0	; () banked
  3155  00064E  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3156  000650  0EA0               	movlw	160
  3157  000652  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;AD7147.c: 160: StageBuffer[7]=4000;
  3161  000654  0E0F               	movlw	15
  3162  000656  0100               	movlb	0	; () banked
  3163  000658  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3164  00065A  0EA0               	movlw	160
  3165  00065C  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;AD7147.c: 161: write_AD7147(0x0D0, 8, StageBuffer, 0, cdc);
  3169  00065E  0E00               	movlw	0
  3170  000660  0100               	movlb	0	; () banked
  3171  000662  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3172  000664  0ED0               	movlw	208
  3173  000666  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3174  000668  0E00               	movlw	0
  3175  00066A  0100               	movlb	0	; () banked
  3176  00066C  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3177  00066E  0E08               	movlw	8
  3178  000670  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3179  000672  0ED8               	movlw	low setup_AD7147@StageBuffer
  3180  000674  0100               	movlb	0	; () banked
  3181  000676  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3182  000678  0E00               	movlw	high setup_AD7147@StageBuffer
  3183  00067A  0100               	movlb	0	; () banked
  3184  00067C  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3185  00067E  0E00               	movlw	0
  3186  000680  0100               	movlb	0	; () banked
  3187  000682  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3188  000684  0E00               	movlw	0
  3189  000686  6FC8               	movwf	write_AD7147@index& (0+255),b
  3190  000688  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3191  00068C  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3192  000690  ECFB  F005         	call	_write_AD7147	;wreg free
  3193                           
  3194                           ;AD7147.c: 166: StageBuffer[0]=0xFFFF;
  3195  000694  0100               	movlb	0	; () banked
  3196  000696  69D8               	setf	setup_AD7147@StageBuffer& (0+255),b
  3197  000698  69D9               	setf	(setup_AD7147@StageBuffer+1)& (0+255),b
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;AD7147.c: 167: StageBuffer[1]=0x3FFF;
  3201  00069A  0E3F               	movlw	63
  3202  00069C  0100               	movlb	0	; () banked
  3203  00069E  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  3204  0006A0  69DA               	setf	(setup_AD7147@StageBuffer+2)& (0+255),b
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;AD7147.c: 168: StageBuffer[2]=0x0000;
  3208  0006A2  0E00               	movlw	0
  3209  0006A4  0100               	movlb	0	; () banked
  3210  0006A6  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3211  0006A8  0E00               	movlw	0
  3212  0006AA  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;AD7147.c: 169: StageBuffer[3]=0x2626;
  3216  0006AC  0E26               	movlw	38
  3217  0006AE  0100               	movlb	0	; () banked
  3218  0006B0  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  3219  0006B2  0E26               	movlw	38
  3220  0006B4  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;AD7147.c: 170: StageBuffer[4]=4000;
  3224  0006B6  0E0F               	movlw	15
  3225  0006B8  0100               	movlb	0	; () banked
  3226  0006BA  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  3227  0006BC  0EA0               	movlw	160
  3228  0006BE  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;AD7147.c: 171: StageBuffer[5]=2500;
  3232  0006C0  0E09               	movlw	9
  3233  0006C2  0100               	movlb	0	; () banked
  3234  0006C4  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  3235  0006C6  0EC4               	movlw	196
  3236  0006C8  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;AD7147.c: 172: StageBuffer[6]=4000;
  3240  0006CA  0E0F               	movlw	15
  3241  0006CC  0100               	movlb	0	; () banked
  3242  0006CE  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3243  0006D0  0EA0               	movlw	160
  3244  0006D2  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;AD7147.c: 173: StageBuffer[7]=4000;
  3248  0006D4  0E0F               	movlw	15
  3249  0006D6  0100               	movlb	0	; () banked
  3250  0006D8  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3251  0006DA  0EA0               	movlw	160
  3252  0006DC  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;AD7147.c: 174: write_AD7147(0x0D8, 8, StageBuffer, 0, cdc);
  3256  0006DE  0E00               	movlw	0
  3257  0006E0  0100               	movlb	0	; () banked
  3258  0006E2  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3259  0006E4  0ED8               	movlw	216
  3260  0006E6  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3261  0006E8  0E00               	movlw	0
  3262  0006EA  0100               	movlb	0	; () banked
  3263  0006EC  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3264  0006EE  0E08               	movlw	8
  3265  0006F0  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3266  0006F2  0ED8               	movlw	low setup_AD7147@StageBuffer
  3267  0006F4  0100               	movlb	0	; () banked
  3268  0006F6  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3269  0006F8  0E00               	movlw	high setup_AD7147@StageBuffer
  3270  0006FA  0100               	movlb	0	; () banked
  3271  0006FC  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3272  0006FE  0E00               	movlw	0
  3273  000700  0100               	movlb	0	; () banked
  3274  000702  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3275  000704  0E00               	movlw	0
  3276  000706  6FC8               	movwf	write_AD7147@index& (0+255),b
  3277  000708  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3278  00070C  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3279  000710  ECFB  F005         	call	_write_AD7147	;wreg free
  3280                           
  3281                           ;AD7147.c: 181: StageBuffer[0] = 0x00B2;
  3282  000714  0E00               	movlw	0
  3283  000716  0100               	movlb	0	; () banked
  3284  000718  6FD9               	movwf	(setup_AD7147@StageBuffer+1)& (0+255),b
  3285  00071A  0EB2               	movlw	178
  3286  00071C  6FD8               	movwf	setup_AD7147@StageBuffer& (0+255),b
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;AD7147.c: 182: write_AD7147(0x000, 1, StageBuffer, 0, cdc);
  3290  00071E  0E00               	movlw	0
  3291  000720  0100               	movlb	0	; () banked
  3292  000722  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3293  000724  0E00               	movlw	0
  3294  000726  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3295  000728  0E00               	movlw	0
  3296  00072A  0100               	movlb	0	; () banked
  3297  00072C  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3298  00072E  0E01               	movlw	1
  3299  000730  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3300  000732  0ED8               	movlw	low setup_AD7147@StageBuffer
  3301  000734  0100               	movlb	0	; () banked
  3302  000736  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3303  000738  0E00               	movlw	high setup_AD7147@StageBuffer
  3304  00073A  0100               	movlb	0	; () banked
  3305  00073C  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3306  00073E  0E00               	movlw	0
  3307  000740  0100               	movlb	0	; () banked
  3308  000742  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3309  000744  0E00               	movlw	0
  3310  000746  6FC8               	movwf	write_AD7147@index& (0+255),b
  3311  000748  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3312  00074C  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3313  000750  ECFB  F005         	call	_write_AD7147	;wreg free
  3314                           
  3315                           ;AD7147.c: 185: read_AD7147(DataBuffer, 0x008, 3, cdc);
  3316  000754  C0D4  F0C2         	movff	setup_AD7147@DataBuffer,read_AD7147@DataBuffer
  3317  000758  C0D5  F0C3         	movff	setup_AD7147@DataBuffer+1,read_AD7147@DataBuffer+1
  3318  00075C  0E00               	movlw	0
  3319  00075E  0100               	movlb	0	; () banked
  3320  000760  6FC5               	movwf	(read_AD7147@RegisterStartAddress+1)& (0+255),b
  3321  000762  0E08               	movlw	8
  3322  000764  6FC4               	movwf	read_AD7147@RegisterStartAddress& (0+255),b
  3323  000766  0E00               	movlw	0
  3324  000768  0100               	movlb	0	; () banked
  3325  00076A  6FC7               	movwf	(read_AD7147@NumberOfRegisters+1)& (0+255),b
  3326  00076C  0E03               	movlw	3
  3327  00076E  6FC6               	movwf	read_AD7147@NumberOfRegisters& (0+255),b
  3328  000770  C0D6  F0C8         	movff	setup_AD7147@cdc,read_AD7147@cdc
  3329  000774  C0D7  F0C9         	movff	setup_AD7147@cdc+1,read_AD7147@cdc+1
  3330  000778  EC8E  F007         	call	_read_AD7147	;wreg free
  3331                           
  3332                           ;AD7147.c: 187: StageBuffer[2] = 0x3230;
  3333  00077C  0E32               	movlw	50
  3334  00077E  0100               	movlb	0	; () banked
  3335  000780  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3336  000782  0E30               	movlw	48
  3337  000784  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;AD7147.c: 188: StageBuffer[3] = 0x0819;
  3341  000786  0E08               	movlw	8
  3342  000788  0100               	movlb	0	; () banked
  3343  00078A  6FDF               	movwf	(setup_AD7147@StageBuffer+7)& (0+255),b
  3344  00078C  0E19               	movlw	25
  3345  00078E  6FDE               	movwf	(setup_AD7147@StageBuffer+6)& (0+255),b
  3346                           
  3347                           ; BSR set to: 0
  3348                           ;AD7147.c: 189: StageBuffer[4] = 0x0832;
  3349  000790  0E08               	movlw	8
  3350  000792  0100               	movlb	0	; () banked
  3351  000794  6FE1               	movwf	(setup_AD7147@StageBuffer+9)& (0+255),b
  3352  000796  0E32               	movlw	50
  3353  000798  6FE0               	movwf	(setup_AD7147@StageBuffer+8)& (0+255),b
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;AD7147.c: 190: StageBuffer[5] = 0x0000;
  3357  00079A  0E00               	movlw	0
  3358  00079C  0100               	movlb	0	; () banked
  3359  00079E  6FE3               	movwf	(setup_AD7147@StageBuffer+11)& (0+255),b
  3360  0007A0  0E00               	movlw	0
  3361  0007A2  6FE2               	movwf	(setup_AD7147@StageBuffer+10)& (0+255),b
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;AD7147.c: 191: StageBuffer[6] = 0x0000;
  3365  0007A4  0E00               	movlw	0
  3366  0007A6  0100               	movlb	0	; () banked
  3367  0007A8  6FE5               	movwf	(setup_AD7147@StageBuffer+13)& (0+255),b
  3368  0007AA  0E00               	movlw	0
  3369  0007AC  6FE4               	movwf	(setup_AD7147@StageBuffer+12)& (0+255),b
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;AD7147.c: 192: StageBuffer[7] = 0x0008;
  3373  0007AE  0E00               	movlw	0
  3374  0007B0  0100               	movlb	0	; () banked
  3375  0007B2  6FE7               	movwf	(setup_AD7147@StageBuffer+15)& (0+255),b
  3376  0007B4  0E08               	movlw	8
  3377  0007B6  6FE6               	movwf	(setup_AD7147@StageBuffer+14)& (0+255),b
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;AD7147.c: 193: write_AD7147(0x002, 6, StageBuffer, 2, cdc);
  3381  0007B8  0E00               	movlw	0
  3382  0007BA  0100               	movlb	0	; () banked
  3383  0007BC  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3384  0007BE  0E02               	movlw	2
  3385  0007C0  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3386  0007C2  0E00               	movlw	0
  3387  0007C4  0100               	movlb	0	; () banked
  3388  0007C6  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3389  0007C8  0E06               	movlw	6
  3390  0007CA  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3391  0007CC  0ED8               	movlw	low setup_AD7147@StageBuffer
  3392  0007CE  0100               	movlb	0	; () banked
  3393  0007D0  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3394  0007D2  0E00               	movlw	high setup_AD7147@StageBuffer
  3395  0007D4  0100               	movlb	0	; () banked
  3396  0007D6  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3397  0007D8  0E00               	movlw	0
  3398  0007DA  0100               	movlb	0	; () banked
  3399  0007DC  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3400  0007DE  0E02               	movlw	2
  3401  0007E0  6FC8               	movwf	write_AD7147@index& (0+255),b
  3402  0007E2  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3403  0007E6  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3404  0007EA  ECFB  F005         	call	_write_AD7147	;wreg free
  3405                           
  3406                           ;AD7147.c: 196: StageBuffer[1] = 0x000F;
  3407  0007EE  0E00               	movlw	0
  3408  0007F0  0100               	movlb	0	; () banked
  3409  0007F2  6FDB               	movwf	(setup_AD7147@StageBuffer+3)& (0+255),b
  3410  0007F4  0E0F               	movlw	15
  3411  0007F6  6FDA               	movwf	(setup_AD7147@StageBuffer+2)& (0+255),b
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;AD7147.c: 197: write_AD7147(0x001, 1, StageBuffer, 1, cdc);
  3415  0007F8  0E00               	movlw	0
  3416  0007FA  0100               	movlb	0	; () banked
  3417  0007FC  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3418  0007FE  0E01               	movlw	1
  3419  000800  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3420  000802  0E00               	movlw	0
  3421  000804  0100               	movlb	0	; () banked
  3422  000806  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3423  000808  0E01               	movlw	1
  3424  00080A  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3425  00080C  0ED8               	movlw	low setup_AD7147@StageBuffer
  3426  00080E  0100               	movlb	0	; () banked
  3427  000810  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3428  000812  0E00               	movlw	high setup_AD7147@StageBuffer
  3429  000814  0100               	movlb	0	; () banked
  3430  000816  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3431  000818  0E00               	movlw	0
  3432  00081A  0100               	movlb	0	; () banked
  3433  00081C  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3434  00081E  0E01               	movlw	1
  3435  000820  6FC8               	movwf	write_AD7147@index& (0+255),b
  3436  000822  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3437  000826  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3438  00082A  ECFB  F005         	call	_write_AD7147	;wreg free
  3439                           
  3440                           ;AD7147.c: 200: StageBuffer[2] = 0x4000;
  3441  00082E  0E40               	movlw	64
  3442  000830  0100               	movlb	0	; () banked
  3443  000832  6FDD               	movwf	(setup_AD7147@StageBuffer+5)& (0+255),b
  3444  000834  0E00               	movlw	0
  3445  000836  6FDC               	movwf	(setup_AD7147@StageBuffer+4)& (0+255),b
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;AD7147.c: 201: write_AD7147(0x002, 1, StageBuffer, 2, cdc);
  3449  000838  0E00               	movlw	0
  3450  00083A  0100               	movlb	0	; () banked
  3451  00083C  6FC3               	movwf	(write_AD7147@RegisterStartAddress+1)& (0+255),b
  3452  00083E  0E02               	movlw	2
  3453  000840  6FC2               	movwf	write_AD7147@RegisterStartAddress& (0+255),b
  3454  000842  0E00               	movlw	0
  3455  000844  0100               	movlb	0	; () banked
  3456  000846  6FC5               	movwf	(write_AD7147@NumberOfRegisters+1)& (0+255),b
  3457  000848  0E01               	movlw	1
  3458  00084A  6FC4               	movwf	write_AD7147@NumberOfRegisters& (0+255),b
  3459  00084C  0ED8               	movlw	low setup_AD7147@StageBuffer
  3460  00084E  0100               	movlb	0	; () banked
  3461  000850  6FC6               	movwf	write_AD7147@OutputBuffer& (0+255),b
  3462  000852  0E00               	movlw	high setup_AD7147@StageBuffer
  3463  000854  0100               	movlb	0	; () banked
  3464  000856  6FC7               	movwf	(write_AD7147@OutputBuffer+1)& (0+255),b
  3465  000858  0E00               	movlw	0
  3466  00085A  0100               	movlb	0	; () banked
  3467  00085C  6FC9               	movwf	(write_AD7147@index+1)& (0+255),b
  3468  00085E  0E02               	movlw	2
  3469  000860  6FC8               	movwf	write_AD7147@index& (0+255),b
  3470  000862  C0D6  F0CA         	movff	setup_AD7147@cdc,write_AD7147@cdc
  3471  000866  C0D7  F0CB         	movff	setup_AD7147@cdc+1,write_AD7147@cdc+1
  3472  00086A  ECFB  F005         	call	_write_AD7147	;wreg free
  3473                           
  3474                           ;AD7147.c: 204: read_AD7147(DataBuffer, 0x008, 3, cdc);
  3475  00086E  C0D4  F0C2         	movff	setup_AD7147@DataBuffer,read_AD7147@DataBuffer
  3476  000872  C0D5  F0C3         	movff	setup_AD7147@DataBuffer+1,read_AD7147@DataBuffer+1
  3477  000876  0E00               	movlw	0
  3478  000878  0100               	movlb	0	; () banked
  3479  00087A  6FC5               	movwf	(read_AD7147@RegisterStartAddress+1)& (0+255),b
  3480  00087C  0E08               	movlw	8
  3481  00087E  6FC4               	movwf	read_AD7147@RegisterStartAddress& (0+255),b
  3482  000880  0E00               	movlw	0
  3483  000882  0100               	movlb	0	; () banked
  3484  000884  6FC7               	movwf	(read_AD7147@NumberOfRegisters+1)& (0+255),b
  3485  000886  0E03               	movlw	3
  3486  000888  6FC6               	movwf	read_AD7147@NumberOfRegisters& (0+255),b
  3487  00088A  C0D6  F0C8         	movff	setup_AD7147@cdc,read_AD7147@cdc
  3488  00088E  C0D7  F0C9         	movff	setup_AD7147@cdc+1,read_AD7147@cdc+1
  3489  000892  EC8E  F007         	call	_read_AD7147	;wreg free
  3490  000896  0012               	return		;funcret
  3491  000898                     __end_of_setup_AD7147:
  3492                           	opt stack 0
  3493                           tblptru	equ	0xFF8
  3494                           tblptrh	equ	0xFF7
  3495                           tblptrl	equ	0xFF6
  3496                           tablat	equ	0xFF5
  3497                           postinc0	equ	0xFEE
  3498                           wreg	equ	0xFE8
  3499                           plusw1	equ	0xFE3
  3500                           postinc2	equ	0xFDE
  3501                           postdec2	equ	0xFDD
  3502                           plusw2	equ	0xFDB
  3503                           fsr2h	equ	0xFDA
  3504                           fsr2l	equ	0xFD9
  3505                           status	equ	0xFD8
  3506                           
  3507 ;; *************** function _write_AD7147 *****************
  3508 ;; Defined at:
  3509 ;;		line 208 in file "AD7147.c"
  3510 ;; Parameters:    Size  Location     Type
  3511 ;;  RegisterStar    2   22[BANK0 ] unsigned int 
  3512 ;;  NumberOfRegi    2   24[BANK0 ] unsigned int 
  3513 ;;  OutputBuffer    2   26[BANK0 ] PTR unsigned int 
  3514 ;;		 -> setup_AD7147@StageBuffer(16), 
  3515 ;;  index           2   28[BANK0 ] unsigned int 
  3516 ;;  cdc             2   30[BANK0 ] unsigned int 
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;  i               2   38[BANK0 ] unsigned int 
  3519 ;;  Data_Value      2   36[BANK0 ] unsigned int 
  3520 ;;  Register_Val    2   34[BANK0 ] unsigned int 
  3521 ;; Return value:  Size  Location     Type
  3522 ;;                  1    wreg      void 
  3523 ;; Registers used:
  3524 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3525 ;; Tracked objects:
  3526 ;;		On entry : 0/0
  3527 ;;		On exit  : 0/0
  3528 ;;		Unchanged: 0/0
  3529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3530 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3531 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3532 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3533 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3534 ;;Total ram usage:       18 bytes
  3535 ;; Hardware stack levels used:    1
  3536 ;; Hardware stack levels required when called:    4
  3537 ;; This function calls:
  3538 ;;		_get_CDC
  3539 ;;		_w32_spi
  3540 ;; This function is called by:
  3541 ;;		_setup_AD7147
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           	psect	text12
  3546  000BF6                     __ptext12:
  3547                           	opt stack 0
  3548  000BF6                     _write_AD7147:
  3549                           	opt stack 25
  3550                           
  3551                           ;AD7147.c: 210: get_CDC(cdc,0);
  3552                           
  3553                           ;incstack = 0
  3554  000BF6  C0CA  F0AC         	movff	write_AD7147@cdc,get_CDC@cdc
  3555  000BFA  C0CB  F0AD         	movff	write_AD7147@cdc+1,get_CDC@cdc+1
  3556  000BFE  0E00               	movlw	0
  3557  000C00  0100               	movlb	0	; () banked
  3558  000C02  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3559  000C04  0E00               	movlw	0
  3560  000C06  6FAE               	movwf	get_CDC@state& (0+255),b
  3561  000C08  ECE6  F00A         	call	_get_CDC	;wreg free
  3562                           
  3563                           ;AD7147.c: 211: unsigned int Register_Value = 0xE000 + RegisterStartAddress;
  3564  000C0C  0E00               	movlw	0
  3565  000C0E  0100               	movlb	0	; () banked
  3566  000C10  25C2               	addwf	write_AD7147@RegisterStartAddress& (0+255),w,b
  3567  000C12  0100               	movlb	0	; () banked
  3568  000C14  6FCE               	movwf	write_AD7147@Register_Value& (0+255),b
  3569  000C16  0EE0               	movlw	224
  3570  000C18  0100               	movlb	0	; () banked
  3571  000C1A  21C3               	addwfc	(write_AD7147@RegisterStartAddress+1)& (0+255),w,b
  3572  000C1C  0100               	movlb	0	; () banked
  3573  000C1E  6FCF               	movwf	(write_AD7147@Register_Value+1)& (0+255),b
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;AD7147.c: 212: unsigned int Data_Value = 0;
  3577  000C20  0E00               	movlw	0
  3578  000C22  0100               	movlb	0	; () banked
  3579  000C24  6FD1               	movwf	(write_AD7147@Data_Value+1)& (0+255),b
  3580  000C26  0E00               	movlw	0
  3581  000C28  6FD0               	movwf	write_AD7147@Data_Value& (0+255),b
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;AD7147.c: 213: for (unsigned int i=0; i<NumberOfRegisters; i++)
  3585  000C2A  0E00               	movlw	0
  3586  000C2C  0100               	movlb	0	; () banked
  3587  000C2E  6FD3               	movwf	(write_AD7147@i+1)& (0+255),b
  3588  000C30  0E00               	movlw	0
  3589  000C32  6FD2               	movwf	write_AD7147@i& (0+255),b
  3590  000C34  D033               	goto	l1883
  3591  000C36                     l1877:
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;AD7147.c: 214: {
  3595                           ;AD7147.c: 215: Data_Value = OutputBuffer[index+i];
  3596  000C36  0100               	movlb	0	; () banked
  3597  000C38  51D2               	movf	write_AD7147@i& (0+255),w,b
  3598  000C3A  0100               	movlb	0	; () banked
  3599  000C3C  25C8               	addwf	write_AD7147@index& (0+255),w,b
  3600  000C3E  0100               	movlb	0	; () banked
  3601  000C40  6FCC               	movwf	??_write_AD7147& (0+255),b
  3602  000C42  0100               	movlb	0	; () banked
  3603  000C44  51D3               	movf	(write_AD7147@i+1)& (0+255),w,b
  3604  000C46  0100               	movlb	0	; () banked
  3605  000C48  21C9               	addwfc	(write_AD7147@index+1)& (0+255),w,b
  3606  000C4A  0100               	movlb	0	; () banked
  3607  000C4C  6FCD               	movwf	(??_write_AD7147+1)& (0+255),b
  3608  000C4E  90D8               	bcf	status,0,c
  3609  000C50  0100               	movlb	0	; () banked
  3610  000C52  37CC               	rlcf	??_write_AD7147& (0+255),f,b
  3611  000C54  37CD               	rlcf	(??_write_AD7147+1)& (0+255),f,b
  3612  000C56  0100               	movlb	0	; () banked
  3613  000C58  51CC               	movf	??_write_AD7147& (0+255),w,b
  3614  000C5A  0100               	movlb	0	; () banked
  3615  000C5C  25C6               	addwf	write_AD7147@OutputBuffer& (0+255),w,b
  3616  000C5E  6ED9               	movwf	fsr2l,c
  3617  000C60  0100               	movlb	0	; () banked
  3618  000C62  51CD               	movf	(??_write_AD7147+1)& (0+255),w,b
  3619  000C64  0100               	movlb	0	; () banked
  3620  000C66  21C7               	addwfc	(write_AD7147@OutputBuffer+1)& (0+255),w,b
  3621  000C68  6EDA               	movwf	fsr2h,c
  3622  000C6A  CFDE F0D0          	movff	postinc2,write_AD7147@Data_Value
  3623  000C6E  CFDD F0D1          	movff	postdec2,write_AD7147@Data_Value+1
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;AD7147.c: 216: w32_spi(Register_Value+i,Data_Value);
  3627  000C72  0100               	movlb	0	; () banked
  3628  000C74  51D2               	movf	write_AD7147@i& (0+255),w,b
  3629  000C76  0100               	movlb	0	; () banked
  3630  000C78  25CE               	addwf	write_AD7147@Register_Value& (0+255),w,b
  3631  000C7A  0100               	movlb	0	; () banked
  3632  000C7C  6FAC               	movwf	w32_spi@address& (0+255),b
  3633  000C7E  0100               	movlb	0	; () banked
  3634  000C80  51D3               	movf	(write_AD7147@i+1)& (0+255),w,b
  3635  000C82  0100               	movlb	0	; () banked
  3636  000C84  21CF               	addwfc	(write_AD7147@Register_Value+1)& (0+255),w,b
  3637  000C86  0100               	movlb	0	; () banked
  3638  000C88  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  3639  000C8A  C0D0  F0AE         	movff	write_AD7147@Data_Value,w32_spi@data
  3640  000C8E  C0D1  F0AF         	movff	write_AD7147@Data_Value+1,w32_spi@data+1
  3641  000C92  EC7A  F008         	call	_w32_spi	;wreg free
  3642  000C96  0100               	movlb	0	; () banked
  3643  000C98  4BD2               	infsnz	write_AD7147@i& (0+255),f,b
  3644  000C9A  2BD3               	incf	(write_AD7147@i+1)& (0+255),f,b
  3645  000C9C                     l1883:
  3646                           
  3647                           ; BSR set to: 0
  3648  000C9C  0100               	movlb	0	; () banked
  3649  000C9E  51C4               	movf	write_AD7147@NumberOfRegisters& (0+255),w,b
  3650  000CA0  0100               	movlb	0	; () banked
  3651  000CA2  5DD2               	subwf	write_AD7147@i& (0+255),w,b
  3652  000CA4  0100               	movlb	0	; () banked
  3653  000CA6  51C5               	movf	(write_AD7147@NumberOfRegisters+1)& (0+255),w,b
  3654  000CA8  0100               	movlb	0	; () banked
  3655  000CAA  59D3               	subwfb	(write_AD7147@i+1)& (0+255),w,b
  3656  000CAC  A0D8               	btfss	status,0,c
  3657  000CAE  D7C3               	goto	l1877
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;AD7147.c: 217: }
  3661                           ;AD7147.c: 218: get_CDC(cdc,1);
  3662                           
  3663                           ; BSR set to: 0
  3664  000CB0  C0CA  F0AC         	movff	write_AD7147@cdc,get_CDC@cdc
  3665  000CB4  C0CB  F0AD         	movff	write_AD7147@cdc+1,get_CDC@cdc+1
  3666  000CB8  0E00               	movlw	0
  3667  000CBA  0100               	movlb	0	; () banked
  3668  000CBC  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3669  000CBE  0E01               	movlw	1
  3670  000CC0  6FAE               	movwf	get_CDC@state& (0+255),b
  3671  000CC2  ECE6  F00A         	call	_get_CDC	;wreg free
  3672  000CC6  0012               	return		;funcret
  3673  000CC8                     __end_of_write_AD7147:
  3674                           	opt stack 0
  3675                           tblptru	equ	0xFF8
  3676                           tblptrh	equ	0xFF7
  3677                           tblptrl	equ	0xFF6
  3678                           tablat	equ	0xFF5
  3679                           postinc0	equ	0xFEE
  3680                           wreg	equ	0xFE8
  3681                           plusw1	equ	0xFE3
  3682                           postinc2	equ	0xFDE
  3683                           postdec2	equ	0xFDD
  3684                           plusw2	equ	0xFDB
  3685                           fsr2h	equ	0xFDA
  3686                           fsr2l	equ	0xFD9
  3687                           status	equ	0xFD8
  3688                           
  3689 ;; *************** function _read_AD7147 *****************
  3690 ;; Defined at:
  3691 ;;		line 221 in file "AD7147.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;  DataBuffer      2   22[BANK0 ] PTR unsigned int 
  3694 ;;		 -> interrupt_values_cdc2(6), interrupt_values_cdc1(6), 
  3695 ;;  RegisterStar    2   24[BANK0 ] unsigned int 
  3696 ;;  NumberOfRegi    2   26[BANK0 ] unsigned int 
  3697 ;;  cdc             2   28[BANK0 ] unsigned int 
  3698 ;; Auto vars:     Size  Location     Type
  3699 ;;  i               2   32[BANK0 ] unsigned int 
  3700 ;;  Register_Val    2   30[BANK0 ] unsigned int 
  3701 ;; Return value:  Size  Location     Type
  3702 ;;                  1    wreg      void 
  3703 ;; Registers used:
  3704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3705 ;; Tracked objects:
  3706 ;;		On entry : 0/0
  3707 ;;		On exit  : 0/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3710 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3711 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3713 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3714 ;;Total ram usage:       12 bytes
  3715 ;; Hardware stack levels used:    1
  3716 ;; Hardware stack levels required when called:    4
  3717 ;; This function calls:
  3718 ;;		_get_CDC
  3719 ;;		_w16_r16_spi
  3720 ;; This function is called by:
  3721 ;;		_setup_AD7147
  3722 ;;		_main
  3723 ;; This function uses a non-reentrant model
  3724 ;;
  3725                           
  3726                           	psect	text13
  3727  000F1C                     __ptext13:
  3728                           	opt stack 0
  3729  000F1C                     _read_AD7147:
  3730                           	opt stack 25
  3731                           
  3732                           ;AD7147.c: 223: get_CDC(cdc,0);
  3733                           
  3734                           ;incstack = 0
  3735  000F1C  C0C8  F0AC         	movff	read_AD7147@cdc,get_CDC@cdc
  3736  000F20  C0C9  F0AD         	movff	read_AD7147@cdc+1,get_CDC@cdc+1
  3737  000F24  0E00               	movlw	0
  3738  000F26  0100               	movlb	0	; () banked
  3739  000F28  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3740  000F2A  0E00               	movlw	0
  3741  000F2C  6FAE               	movwf	get_CDC@state& (0+255),b
  3742  000F2E  ECE6  F00A         	call	_get_CDC	;wreg free
  3743                           
  3744                           ;AD7147.c: 224: unsigned int Register_Values = 0xE400 + RegisterStartAddress;
  3745  000F32  0E00               	movlw	0
  3746  000F34  0100               	movlb	0	; () banked
  3747  000F36  25C4               	addwf	read_AD7147@RegisterStartAddress& (0+255),w,b
  3748  000F38  0100               	movlb	0	; () banked
  3749  000F3A  6FCA               	movwf	read_AD7147@Register_Values& (0+255),b
  3750  000F3C  0EE4               	movlw	228
  3751  000F3E  0100               	movlb	0	; () banked
  3752  000F40  21C5               	addwfc	(read_AD7147@RegisterStartAddress+1)& (0+255),w,b
  3753  000F42  0100               	movlb	0	; () banked
  3754  000F44  6FCB               	movwf	(read_AD7147@Register_Values+1)& (0+255),b
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;AD7147.c: 225: for (unsigned int i=0; i<NumberOfRegisters; i++)
  3758  000F46  0E00               	movlw	0
  3759  000F48  0100               	movlb	0	; () banked
  3760  000F4A  6FCD               	movwf	(read_AD7147@i+1)& (0+255),b
  3761  000F4C  0E00               	movlw	0
  3762  000F4E  6FCC               	movwf	read_AD7147@i& (0+255),b
  3763  000F50  D024               	goto	l1897
  3764  000F52                     l1893:
  3765                           
  3766                           ; BSR set to: 0
  3767                           ;AD7147.c: 226: {
  3768                           ;AD7147.c: 227: DataBuffer[i]=w16_r16_spi(Register_Values+i);
  3769  000F52  0100               	movlb	0	; () banked
  3770  000F54  51CC               	movf	read_AD7147@i& (0+255),w,b
  3771  000F56  0100               	movlb	0	; () banked
  3772  000F58  25CA               	addwf	read_AD7147@Register_Values& (0+255),w,b
  3773  000F5A  0100               	movlb	0	; () banked
  3774  000F5C  6FAC               	movwf	w16_r16_spi@address& (0+255),b
  3775  000F5E  0100               	movlb	0	; () banked
  3776  000F60  51CD               	movf	(read_AD7147@i+1)& (0+255),w,b
  3777  000F62  0100               	movlb	0	; () banked
  3778  000F64  21CB               	addwfc	(read_AD7147@Register_Values+1)& (0+255),w,b
  3779  000F66  0100               	movlb	0	; () banked
  3780  000F68  6FAD               	movwf	(w16_r16_spi@address+1)& (0+255),b
  3781  000F6A  ECE3  F007         	call	_w16_r16_spi	;wreg free
  3782  000F6E  90D8               	bcf	status,0,c
  3783  000F70  0100               	movlb	0	; () banked
  3784  000F72  35CC               	rlcf	read_AD7147@i& (0+255),w,b
  3785  000F74  6ED9               	movwf	fsr2l,c
  3786  000F76  0100               	movlb	0	; () banked
  3787  000F78  35CD               	rlcf	(read_AD7147@i+1)& (0+255),w,b
  3788  000F7A  6EDA               	movwf	fsr2h,c
  3789  000F7C  0100               	movlb	0	; () banked
  3790  000F7E  51C2               	movf	read_AD7147@DataBuffer& (0+255),w,b
  3791  000F80  26D9               	addwf	fsr2l,f,c
  3792  000F82  0100               	movlb	0	; () banked
  3793  000F84  51C3               	movf	(read_AD7147@DataBuffer+1)& (0+255),w,b
  3794  000F86  22DA               	addwfc	fsr2h,f,c
  3795  000F88  0100               	movlb	0	; () banked
  3796  000F8A  C0AC  FFDE         	movff	?_w16_r16_spi,postinc2
  3797  000F8E  0100               	movlb	0	; () banked
  3798  000F90  C0AD  FFDD         	movff	?_w16_r16_spi+1,postdec2
  3799                           
  3800                           ; BSR set to: 0
  3801  000F94  0100               	movlb	0	; () banked
  3802  000F96  4BCC               	infsnz	read_AD7147@i& (0+255),f,b
  3803  000F98  2BCD               	incf	(read_AD7147@i+1)& (0+255),f,b
  3804  000F9A                     l1897:
  3805                           
  3806                           ; BSR set to: 0
  3807  000F9A  0100               	movlb	0	; () banked
  3808  000F9C  51C6               	movf	read_AD7147@NumberOfRegisters& (0+255),w,b
  3809  000F9E  0100               	movlb	0	; () banked
  3810  000FA0  5DCC               	subwf	read_AD7147@i& (0+255),w,b
  3811  000FA2  0100               	movlb	0	; () banked
  3812  000FA4  51C7               	movf	(read_AD7147@NumberOfRegisters+1)& (0+255),w,b
  3813  000FA6  0100               	movlb	0	; () banked
  3814  000FA8  59CD               	subwfb	(read_AD7147@i+1)& (0+255),w,b
  3815  000FAA  A0D8               	btfss	status,0,c
  3816  000FAC  D7D2               	goto	l1893
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;AD7147.c: 228: }
  3820                           ;AD7147.c: 229: get_CDC(cdc,1);
  3821                           
  3822                           ; BSR set to: 0
  3823  000FAE  C0C8  F0AC         	movff	read_AD7147@cdc,get_CDC@cdc
  3824  000FB2  C0C9  F0AD         	movff	read_AD7147@cdc+1,get_CDC@cdc+1
  3825  000FB6  0E00               	movlw	0
  3826  000FB8  0100               	movlb	0	; () banked
  3827  000FBA  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  3828  000FBC  0E01               	movlw	1
  3829  000FBE  6FAE               	movwf	get_CDC@state& (0+255),b
  3830  000FC0  ECE6  F00A         	call	_get_CDC	;wreg free
  3831  000FC4  0012               	return		;funcret
  3832  000FC6                     __end_of_read_AD7147:
  3833                           	opt stack 0
  3834                           tblptru	equ	0xFF8
  3835                           tblptrh	equ	0xFF7
  3836                           tblptrl	equ	0xFF6
  3837                           tablat	equ	0xFF5
  3838                           postinc0	equ	0xFEE
  3839                           wreg	equ	0xFE8
  3840                           plusw1	equ	0xFE3
  3841                           postinc2	equ	0xFDE
  3842                           postdec2	equ	0xFDD
  3843                           plusw2	equ	0xFDB
  3844                           fsr2h	equ	0xFDA
  3845                           fsr2l	equ	0xFD9
  3846                           status	equ	0xFD8
  3847                           
  3848 ;; *************** function _read_sensor *****************
  3849 ;; Defined at:
  3850 ;;		line 232 in file "AD7147.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;  sensor_value    2   22[BANK0 ] PTR unsigned int 
  3853 ;;		 -> sensor_values(48), 
  3854 ;;  sensor          2   24[BANK0 ] unsigned int 
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;  cdc_sensor      2   32[BANK0 ] unsigned int 
  3857 ;;  register1       2   30[BANK0 ] unsigned int 
  3858 ;; Return value:  Size  Location     Type
  3859 ;;                  1    wreg      void 
  3860 ;; Registers used:
  3861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3862 ;; Tracked objects:
  3863 ;;		On entry : 0/0
  3864 ;;		On exit  : 0/0
  3865 ;;		Unchanged: 0/0
  3866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3867 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3868 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3869 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3870 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3871 ;;Total ram usage:       12 bytes
  3872 ;; Hardware stack levels used:    1
  3873 ;; Hardware stack levels required when called:    5
  3874 ;; This function calls:
  3875 ;;		_sensor_CDC
  3876 ;;		_w16_r16_spi
  3877 ;; This function is called by:
  3878 ;;		_main
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           	psect	text14
  3883  000CC8                     __ptext14:
  3884                           	opt stack 0
  3885  000CC8                     _read_sensor:
  3886                           	opt stack 25
  3887                           
  3888                           ;AD7147.c: 234: unsigned int cdc_sensor = 0;
  3889                           
  3890                           ;incstack = 0
  3891  000CC8  0E00               	movlw	0
  3892  000CCA  0100               	movlb	0	; () banked
  3893  000CCC  6FCD               	movwf	(read_sensor@cdc_sensor+1)& (0+255),b
  3894  000CCE  0E00               	movlw	0
  3895  000CD0  6FCC               	movwf	read_sensor@cdc_sensor& (0+255),b
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;AD7147.c: 235: if (sensor > 12)
  3899  000CD2  0100               	movlb	0	; () banked
  3900  000CD4  51C5               	movf	(read_sensor@sensor+1)& (0+255),w,b
  3901  000CD6  E105               	bnz	u1000
  3902  000CD8  0E0D               	movlw	13
  3903  000CDA  0100               	movlb	0	; () banked
  3904  000CDC  5DC4               	subwf	read_sensor@sensor& (0+255),w,b
  3905  000CDE  A0D8               	btfss	status,0,c
  3906  000CE0  D00B               	goto	l38
  3907  000CE2                     u1000:
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;AD7147.c: 236: {
  3911                           ;AD7147.c: 237: cdc_sensor = sensor - 12;
  3912  000CE2  0EF4               	movlw	244
  3913  000CE4  0100               	movlb	0	; () banked
  3914  000CE6  25C4               	addwf	read_sensor@sensor& (0+255),w,b
  3915  000CE8  0100               	movlb	0	; () banked
  3916  000CEA  6FCC               	movwf	read_sensor@cdc_sensor& (0+255),b
  3917  000CEC  0EFF               	movlw	255
  3918  000CEE  0100               	movlb	0	; () banked
  3919  000CF0  21C5               	addwfc	(read_sensor@sensor+1)& (0+255),w,b
  3920  000CF2  0100               	movlb	0	; () banked
  3921  000CF4  6FCD               	movwf	(read_sensor@cdc_sensor+1)& (0+255),b
  3922                           
  3923                           ;AD7147.c: 238: }
  3924  000CF6  D004               	goto	l2219
  3925  000CF8                     l38:
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;AD7147.c: 239: else
  3929                           ;AD7147.c: 240: {
  3930                           ;AD7147.c: 241: cdc_sensor = sensor;
  3931  000CF8  C0C4  F0CC         	movff	read_sensor@sensor,read_sensor@cdc_sensor
  3932  000CFC  C0C5  F0CD         	movff	read_sensor@sensor+1,read_sensor@cdc_sensor+1
  3933  000D00                     l2219:
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;AD7147.c: 242: }
  3937                           ;AD7147.c: 243: unsigned int register1 = 0xE400 + 0x00A + cdc_sensor;
  3938  000D00  0E0A               	movlw	10
  3939  000D02  0100               	movlb	0	; () banked
  3940  000D04  25CC               	addwf	read_sensor@cdc_sensor& (0+255),w,b
  3941  000D06  0100               	movlb	0	; () banked
  3942  000D08  6FCA               	movwf	read_sensor@register1& (0+255),b
  3943  000D0A  0EE4               	movlw	228
  3944  000D0C  0100               	movlb	0	; () banked
  3945  000D0E  21CD               	addwfc	(read_sensor@cdc_sensor+1)& (0+255),w,b
  3946  000D10  0100               	movlb	0	; () banked
  3947  000D12  6FCB               	movwf	(read_sensor@register1+1)& (0+255),b
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;AD7147.c: 244: sensor_CDC(sensor, 0);
  3951  000D14  C0C4  F0B0         	movff	read_sensor@sensor,sensor_CDC@sensor
  3952  000D18  C0C5  F0B1         	movff	read_sensor@sensor+1,sensor_CDC@sensor+1
  3953  000D1C  0E00               	movlw	0
  3954  000D1E  0100               	movlb	0	; () banked
  3955  000D20  6FB3               	movwf	(sensor_CDC@state+1)& (0+255),b
  3956  000D22  0E00               	movlw	0
  3957  000D24  6FB2               	movwf	sensor_CDC@state& (0+255),b
  3958  000D26  EC8D  F00A         	call	_sensor_CDC	;wreg free
  3959                           
  3960                           ;AD7147.c: 245: sensor_values[sensor-1] = w16_r16_spi(register1);
  3961  000D2A  C0CA  F0AC         	movff	read_sensor@register1,w16_r16_spi@address
  3962  000D2E  C0CB  F0AD         	movff	read_sensor@register1+1,w16_r16_spi@address+1
  3963  000D32  ECE3  F007         	call	_w16_r16_spi	;wreg free
  3964  000D36  0EFE               	movlw	254
  3965  000D38  0100               	movlb	0	; () banked
  3966  000D3A  6FC6               	movwf	??_read_sensor& (0+255),b
  3967  000D3C  0EFF               	movlw	255
  3968  000D3E  0100               	movlb	0	; () banked
  3969  000D40  6FC7               	movwf	(??_read_sensor+1)& (0+255),b
  3970  000D42  C0C4  F0C8         	movff	read_sensor@sensor,??_read_sensor+2
  3971  000D46  C0C5  F0C9         	movff	read_sensor@sensor+1,??_read_sensor+3
  3972  000D4A  90D8               	bcf	status,0,c
  3973  000D4C  0100               	movlb	0	; () banked
  3974  000D4E  37C8               	rlcf	(??_read_sensor+2)& (0+255),f,b
  3975  000D50  37C9               	rlcf	(??_read_sensor+3)& (0+255),f,b
  3976  000D52  0100               	movlb	0	; () banked
  3977  000D54  51C6               	movf	??_read_sensor& (0+255),w,b
  3978  000D56  0100               	movlb	0	; () banked
  3979  000D58  27C8               	addwf	(??_read_sensor+2)& (0+255),f,b
  3980  000D5A  0100               	movlb	0	; () banked
  3981  000D5C  51C7               	movf	(??_read_sensor+1)& (0+255),w,b
  3982  000D5E  0100               	movlb	0	; () banked
  3983  000D60  23C9               	addwfc	(??_read_sensor+3)& (0+255),f,b
  3984  000D62  0100               	movlb	0	; () banked
  3985  000D64  51C8               	movf	(??_read_sensor+2)& (0+255),w,b
  3986  000D66  0100               	movlb	0	; () banked
  3987  000D68  25C2               	addwf	read_sensor@sensor_values& (0+255),w,b
  3988  000D6A  6ED9               	movwf	fsr2l,c
  3989  000D6C  0100               	movlb	0	; () banked
  3990  000D6E  51C9               	movf	(??_read_sensor+3)& (0+255),w,b
  3991  000D70  0100               	movlb	0	; () banked
  3992  000D72  21C3               	addwfc	(read_sensor@sensor_values+1)& (0+255),w,b
  3993  000D74  6EDA               	movwf	fsr2h,c
  3994  000D76  0100               	movlb	0	; () banked
  3995  000D78  C0AC  FFDE         	movff	?_w16_r16_spi,postinc2
  3996  000D7C  0100               	movlb	0	; () banked
  3997  000D7E  C0AD  FFDD         	movff	?_w16_r16_spi+1,postdec2
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;AD7147.c: 246: sensor_CDC(sensor, 1);
  4001  000D82  C0C4  F0B0         	movff	read_sensor@sensor,sensor_CDC@sensor
  4002  000D86  C0C5  F0B1         	movff	read_sensor@sensor+1,sensor_CDC@sensor+1
  4003  000D8A  0E00               	movlw	0
  4004  000D8C  0100               	movlb	0	; () banked
  4005  000D8E  6FB3               	movwf	(sensor_CDC@state+1)& (0+255),b
  4006  000D90  0E01               	movlw	1
  4007  000D92  6FB2               	movwf	sensor_CDC@state& (0+255),b
  4008  000D94  EC8D  F00A         	call	_sensor_CDC	;wreg free
  4009  000D98  0012               	return		;funcret
  4010  000D9A                     __end_of_read_sensor:
  4011                           	opt stack 0
  4012                           tblptru	equ	0xFF8
  4013                           tblptrh	equ	0xFF7
  4014                           tblptrl	equ	0xFF6
  4015                           tablat	equ	0xFF5
  4016                           postinc0	equ	0xFEE
  4017                           wreg	equ	0xFE8
  4018                           plusw1	equ	0xFE3
  4019                           postinc2	equ	0xFDE
  4020                           postdec2	equ	0xFDD
  4021                           plusw2	equ	0xFDB
  4022                           fsr2h	equ	0xFDA
  4023                           fsr2l	equ	0xFD9
  4024                           status	equ	0xFD8
  4025                           
  4026 ;; *************** function _sensor_CDC *****************
  4027 ;; Defined at:
  4028 ;;		line 291 in file "AD7147.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;  sensor          2    4[BANK0 ] unsigned int 
  4031 ;;  state           2    6[BANK0 ] unsigned int 
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;		None
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      void 
  4036 ;; Registers used:
  4037 ;;		wreg, status,2, status,0, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4043 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4046 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4047 ;;Total ram usage:        4 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    4
  4050 ;; This function calls:
  4051 ;;		_get_CDC
  4052 ;; This function is called by:
  4053 ;;		_read_sensor
  4054 ;;		_read_sensors
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           	psect	text15
  4059  00151A                     __ptext15:
  4060                           	opt stack 0
  4061  00151A                     _sensor_CDC:
  4062                           	opt stack 25
  4063                           
  4064                           ;AD7147.c: 295: if (sensor > 12)
  4065                           
  4066                           ;incstack = 0
  4067  00151A  0100               	movlb	0	; () banked
  4068  00151C  51B1               	movf	(sensor_CDC@sensor+1)& (0+255),w,b
  4069  00151E  E105               	bnz	u870
  4070  001520  0E0D               	movlw	13
  4071  001522  0100               	movlb	0	; () banked
  4072  001524  5DB0               	subwf	sensor_CDC@sensor& (0+255),w,b
  4073  001526  A0D8               	btfss	status,0,c
  4074  001528  D00C               	goto	l1905
  4075  00152A                     u870:
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;AD7147.c: 296: {
  4079                           ;AD7147.c: 297: get_CDC(2,state);
  4080  00152A  0E00               	movlw	0
  4081  00152C  0100               	movlb	0	; () banked
  4082  00152E  6FAD               	movwf	(get_CDC@cdc+1)& (0+255),b
  4083  001530  0E02               	movlw	2
  4084  001532  6FAC               	movwf	get_CDC@cdc& (0+255),b
  4085  001534  C0B2  F0AE         	movff	sensor_CDC@state,get_CDC@state
  4086  001538  C0B3  F0AF         	movff	sensor_CDC@state+1,get_CDC@state+1
  4087  00153C  ECE6  F00A         	call	_get_CDC	;wreg free
  4088                           
  4089                           ;AD7147.c: 298: }
  4090  001540  0012               	return	
  4091  001542                     l1905:
  4092                           
  4093                           ;AD7147.c: 299: else
  4094                           ;AD7147.c: 300: {
  4095                           ;AD7147.c: 301: get_CDC(1,state);
  4096  001542  0E00               	movlw	0
  4097  001544  0100               	movlb	0	; () banked
  4098  001546  6FAD               	movwf	(get_CDC@cdc+1)& (0+255),b
  4099  001548  0E01               	movlw	1
  4100  00154A  6FAC               	movwf	get_CDC@cdc& (0+255),b
  4101  00154C  C0B2  F0AE         	movff	sensor_CDC@state,get_CDC@state
  4102  001550  C0B3  F0AF         	movff	sensor_CDC@state+1,get_CDC@state+1
  4103  001554  ECE6  F00A         	call	_get_CDC	;wreg free
  4104  001558  0012               	return	
  4105  00155A                     __end_of_sensor_CDC:
  4106                           	opt stack 0
  4107                           tblptru	equ	0xFF8
  4108                           tblptrh	equ	0xFF7
  4109                           tblptrl	equ	0xFF6
  4110                           tablat	equ	0xFF5
  4111                           postinc0	equ	0xFEE
  4112                           wreg	equ	0xFE8
  4113                           plusw1	equ	0xFE3
  4114                           postinc2	equ	0xFDE
  4115                           postdec2	equ	0xFDD
  4116                           plusw2	equ	0xFDB
  4117                           fsr2h	equ	0xFDA
  4118                           fsr2l	equ	0xFD9
  4119                           status	equ	0xFD8
  4120                           
  4121 ;; *************** function _memset *****************
  4122 ;; Defined at:
  4123 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\memset.c"
  4124 ;; Parameters:    Size  Location     Type
  4125 ;;  p1              2    0[BANK0 ] PTR void 
  4126 ;;		 -> avail_sensors(48), 
  4127 ;;  c               2    2[BANK0 ] int 
  4128 ;;  n               2    4[BANK0 ] unsigned int 
  4129 ;; Auto vars:     Size  Location     Type
  4130 ;;  p               2    6[BANK0 ] PTR unsigned char 
  4131 ;;		 -> avail_sensors(48), 
  4132 ;; Return value:  Size  Location     Type
  4133 ;;                  2    0[BANK0 ] PTR void 
  4134 ;; Registers used:
  4135 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4141 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4142 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4144 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4145 ;;Total ram usage:        8 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; Hardware stack levels required when called:    3
  4148 ;; This function calls:
  4149 ;;		Nothing
  4150 ;; This function is called by:
  4151 ;;		_main
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           	psect	text16
  4156  001598                     __ptext16:
  4157                           	opt stack 0
  4158  001598                     _memset:
  4159                           	opt stack 27
  4160                           
  4161                           ;incstack = 0
  4162  001598  C0AC  F0B2         	movff	memset@p1,memset@p
  4163  00159C  C0AD  F0B3         	movff	memset@p1+1,memset@p+1
  4164  0015A0  D009               	goto	l2353
  4165  0015A2                     l2349:
  4166  0015A2  C0B2  FFD9         	movff	memset@p,fsr2l
  4167  0015A6  C0B3  FFDA         	movff	memset@p+1,fsr2h
  4168  0015AA  C0AE  FFDF         	movff	memset@c,indf2
  4169  0015AE  0100               	movlb	0	; () banked
  4170  0015B0  4BB2               	infsnz	memset@p& (0+255),f,b
  4171  0015B2  2BB3               	incf	(memset@p+1)& (0+255),f,b
  4172  0015B4                     l2353:
  4173  0015B4  0100               	movlb	0	; () banked
  4174  0015B6  07B0               	decf	memset@n& (0+255),f,b
  4175  0015B8  A0D8               	btfss	status,0,c
  4176  0015BA  07B1               	decf	(memset@n+1)& (0+255),f,b
  4177  0015BC  0100               	movlb	0	; () banked
  4178  0015BE  29B0               	incf	memset@n& (0+255),w,b
  4179  0015C0  E1F0               	bnz	l2349
  4180  0015C2  0100               	movlb	0	; () banked
  4181  0015C4  29B1               	incf	(memset@n+1)& (0+255),w,b
  4182  0015C6  B4D8               	btfsc	status,2,c
  4183  0015C8  0012               	return	
  4184  0015CA  D7EB               	goto	l2349
  4185  0015CC                     __end_of_memset:
  4186                           	opt stack 0
  4187                           tblptru	equ	0xFF8
  4188                           tblptrh	equ	0xFF7
  4189                           tblptrl	equ	0xFF6
  4190                           tablat	equ	0xFF5
  4191                           postinc0	equ	0xFEE
  4192                           wreg	equ	0xFE8
  4193                           plusw1	equ	0xFE3
  4194                           indf2	equ	0xFDF
  4195                           postinc2	equ	0xFDE
  4196                           postdec2	equ	0xFDD
  4197                           plusw2	equ	0xFDB
  4198                           fsr2h	equ	0xFDA
  4199                           fsr2l	equ	0xFD9
  4200                           status	equ	0xFD8
  4201                           
  4202 ;; *************** function _init_interrupts *****************
  4203 ;; Defined at:
  4204 ;;		line 21 in file "micro_setup.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;		None
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;		None
  4209 ;; Return value:  Size  Location     Type
  4210 ;;                  1    wreg      void 
  4211 ;; Registers used:
  4212 ;;		None
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4222 ;;Total ram usage:        0 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    3
  4225 ;; This function calls:
  4226 ;;		Nothing
  4227 ;; This function is called by:
  4228 ;;		_main
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           	psect	text17
  4233  0015F6                     __ptext17:
  4234                           	opt stack 0
  4235  0015F6                     _init_interrupts:
  4236                           	opt stack 27
  4237                           
  4238                           ;micro_setup.c: 23: ANCON1bits.ANSEL10 = 0;
  4239                           
  4240                           ; BSR set to: 0
  4241                           ;incstack = 0
  4242  0015F6  010F               	movlb	15	; () banked
  4243  0015F8  955C               	bcf	92,2,b	;volatile
  4244                           
  4245                           ;micro_setup.c: 24: ANCON1bits.ANSEL8 = 0;
  4246  0015FA  010F               	movlb	15	; () banked
  4247  0015FC  915C               	bcf	92,0,b	;volatile
  4248                           
  4249                           ;micro_setup.c: 25: TRISBbits.TRISB0 = 1;
  4250  0015FE  8093               	bsf	3987,0,c	;volatile
  4251                           
  4252                           ;micro_setup.c: 26: TRISBbits.TRISB1 = 1;
  4253  001600  8293               	bsf	3987,1,c	;volatile
  4254                           
  4255                           ;micro_setup.c: 28: RCONbits.IPEN = 1;
  4256  001602  8ED0               	bsf	4048,7,c	;volatile
  4257                           
  4258                           ;micro_setup.c: 32: INTCONbits.INT0IE = 1;
  4259  001604  88F2               	bsf	intcon,4,c	;volatile
  4260                           
  4261                           ;micro_setup.c: 33: INTCON2bits.INTEDG0 = 0;
  4262  001606  9CF1               	bcf	intcon2,6,c	;volatile
  4263                           
  4264                           ;micro_setup.c: 34: INTCONbits.INT0IF = 0;
  4265  001608  92F2               	bcf	intcon,1,c	;volatile
  4266                           
  4267                           ;micro_setup.c: 37: INTCON3bits.INT1P = 1;
  4268  00160A  8CF0               	bsf	intcon3,6,c	;volatile
  4269                           
  4270                           ;micro_setup.c: 38: INTCON3bits.INT1IE = 1;
  4271  00160C  86F0               	bsf	intcon3,3,c	;volatile
  4272                           
  4273                           ;micro_setup.c: 39: INTCON2bits.INTEDG1 = 0;
  4274  00160E  9AF1               	bcf	intcon2,5,c	;volatile
  4275                           
  4276                           ;micro_setup.c: 40: INTCON3bits.INT1IF = 0;
  4277  001610  90F0               	bcf	intcon3,0,c	;volatile
  4278                           
  4279                           ;micro_setup.c: 42: INTCONbits.PEIE = 1;
  4280  001612  8CF2               	bsf	intcon,6,c	;volatile
  4281                           
  4282                           ;micro_setup.c: 43: INTCONbits.GIE = 1;
  4283  001614  8EF2               	bsf	intcon,7,c	;volatile
  4284                           
  4285                           ;micro_setup.c: 45: (INTCONbits.GIE = 1);
  4286  001616  8EF2               	bsf	intcon,7,c	;volatile
  4287                           
  4288                           ; BSR set to: 15
  4289  001618  0012               	return		;funcret
  4290  00161A                     __end_of_init_interrupts:
  4291                           	opt stack 0
  4292                           tblptru	equ	0xFF8
  4293                           tblptrh	equ	0xFF7
  4294                           tblptrl	equ	0xFF6
  4295                           tablat	equ	0xFF5
  4296                           intcon	equ	0xFF2
  4297                           intcon2	equ	0xFF1
  4298                           intcon3	equ	0xFF0
  4299                           postinc0	equ	0xFEE
  4300                           wreg	equ	0xFE8
  4301                           plusw1	equ	0xFE3
  4302                           indf2	equ	0xFDF
  4303                           postinc2	equ	0xFDE
  4304                           postdec2	equ	0xFDD
  4305                           plusw2	equ	0xFDB
  4306                           fsr2h	equ	0xFDA
  4307                           fsr2l	equ	0xFD9
  4308                           status	equ	0xFD8
  4309                           
  4310 ;; *************** function _get_ID *****************
  4311 ;; Defined at:
  4312 ;;		line 305 in file "AD7147.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;  cdc             2   22[BANK0 ] unsigned int 
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;  result          2   25[BANK0 ] unsigned int 
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  2   22[BANK0 ] unsigned int 
  4319 ;; Registers used:
  4320 ;;		wreg, status,2, status,0, cstack
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4326 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4327 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4328 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4329 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4330 ;;Total ram usage:        5 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; Hardware stack levels required when called:    4
  4333 ;; This function calls:
  4334 ;;		_get_CDC
  4335 ;;		_w16_r16_spi
  4336 ;; This function is called by:
  4337 ;;		_main
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           	psect	text18
  4342  001376                     __ptext18:
  4343                           	opt stack 0
  4344  001376                     _get_ID:
  4345                           	opt stack 26
  4346                           
  4347                           ;AD7147.c: 307: get_CDC(cdc,0);
  4348                           
  4349                           ; BSR set to: 15
  4350                           ;incstack = 0
  4351  001376  C0C2  F0AC         	movff	get_ID@cdc,get_CDC@cdc
  4352  00137A  C0C3  F0AD         	movff	get_ID@cdc+1,get_CDC@cdc+1
  4353  00137E  0E00               	movlw	0
  4354  001380  0100               	movlb	0	; () banked
  4355  001382  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4356  001384  0E00               	movlw	0
  4357  001386  6FAE               	movwf	get_CDC@state& (0+255),b
  4358  001388  ECE6  F00A         	call	_get_CDC	;wreg free
  4359                           
  4360                           ;AD7147.c: 308: unsigned int result = (w16_r16_spi(0xE400 + 0x017) & 0b1111111111110000)
      +                           >> 4;
  4361  00138C  0EE4               	movlw	228
  4362  00138E  0100               	movlb	0	; () banked
  4363  001390  6FAD               	movwf	(w16_r16_spi@address+1)& (0+255),b
  4364  001392  0E17               	movlw	23
  4365  001394  6FAC               	movwf	w16_r16_spi@address& (0+255),b
  4366  001396  ECE3  F007         	call	_w16_r16_spi	;wreg free
  4367  00139A  0E04               	movlw	4
  4368  00139C  0100               	movlb	0	; () banked
  4369  00139E  6FC4               	movwf	??_get_ID& (0+255),b
  4370  0013A0                     u1055:
  4371  0013A0  0100               	movlb	0	; () banked
  4372  0013A2  90D8               	bcf	status,0,c
  4373  0013A4  33AD               	rrcf	(?_w16_r16_spi+1)& (0+255),f,b
  4374  0013A6  33AC               	rrcf	?_w16_r16_spi& (0+255),f,b
  4375  0013A8  0100               	movlb	0	; () banked
  4376  0013AA  2FC4               	decfsz	??_get_ID& (0+255),f,b
  4377  0013AC  D7F9               	goto	u1055
  4378  0013AE  0EFF               	movlw	255
  4379  0013B0  0100               	movlb	0	; () banked
  4380  0013B2  15AC               	andwf	?_w16_r16_spi& (0+255),w,b
  4381  0013B4  0100               	movlb	0	; () banked
  4382  0013B6  6FC5               	movwf	get_ID@result& (0+255),b
  4383  0013B8  0E0F               	movlw	15
  4384  0013BA  0100               	movlb	0	; () banked
  4385  0013BC  15AD               	andwf	(?_w16_r16_spi+1)& (0+255),w,b
  4386  0013BE  0100               	movlb	0	; () banked
  4387  0013C0  6FC6               	movwf	(get_ID@result+1)& (0+255),b
  4388                           
  4389                           ;AD7147.c: 309: get_CDC(cdc,1);
  4390  0013C2  C0C2  F0AC         	movff	get_ID@cdc,get_CDC@cdc
  4391  0013C6  C0C3  F0AD         	movff	get_ID@cdc+1,get_CDC@cdc+1
  4392  0013CA  0E00               	movlw	0
  4393  0013CC  0100               	movlb	0	; () banked
  4394  0013CE  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4395  0013D0  0E01               	movlw	1
  4396  0013D2  6FAE               	movwf	get_CDC@state& (0+255),b
  4397  0013D4  ECE6  F00A         	call	_get_CDC	;wreg free
  4398                           
  4399                           ;AD7147.c: 310: return result;
  4400  0013D8  C0C5  F0C2         	movff	get_ID@result,?_get_ID
  4401  0013DC  C0C6  F0C3         	movff	get_ID@result+1,?_get_ID+1
  4402  0013E0  0012               	return	
  4403  0013E2                     __end_of_get_ID:
  4404                           	opt stack 0
  4405                           tblptru	equ	0xFF8
  4406                           tblptrh	equ	0xFF7
  4407                           tblptrl	equ	0xFF6
  4408                           tablat	equ	0xFF5
  4409                           intcon	equ	0xFF2
  4410                           intcon2	equ	0xFF1
  4411                           intcon3	equ	0xFF0
  4412                           postinc0	equ	0xFEE
  4413                           wreg	equ	0xFE8
  4414                           plusw1	equ	0xFE3
  4415                           indf2	equ	0xFDF
  4416                           postinc2	equ	0xFDE
  4417                           postdec2	equ	0xFDD
  4418                           plusw2	equ	0xFDB
  4419                           fsr2h	equ	0xFDA
  4420                           fsr2l	equ	0xFD9
  4421                           status	equ	0xFD8
  4422                           
  4423 ;; *************** function _w16_r16_spi *****************
  4424 ;; Defined at:
  4425 ;;		line 89 in file "spi.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;  address         2    0[BANK0 ] unsigned int 
  4428 ;; Auto vars:     Size  Location     Type
  4429 ;;  p4              2   20[BANK0 ] unsigned int 
  4430 ;;  p3              2   18[BANK0 ] unsigned int 
  4431 ;;  blank_high      2   16[BANK0 ] unsigned int 
  4432 ;;  blank_low       2   14[BANK0 ] unsigned int 
  4433 ;;  result          2   12[BANK0 ] unsigned int 
  4434 ;;  address_high    2   10[BANK0 ] unsigned int 
  4435 ;;  address_low     2    8[BANK0 ] unsigned int 
  4436 ;;  p2              2    6[BANK0 ] unsigned int 
  4437 ;;  p1              2    4[BANK0 ] unsigned int 
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  2    0[BANK0 ] unsigned int 
  4440 ;; Registers used:
  4441 ;;		wreg, status,2, status,0
  4442 ;; Tracked objects:
  4443 ;;		On entry : 0/0
  4444 ;;		On exit  : 0/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4447 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4448 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4449 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4450 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4451 ;;Total ram usage:       22 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; Hardware stack levels required when called:    3
  4454 ;; This function calls:
  4455 ;;		Nothing
  4456 ;; This function is called by:
  4457 ;;		_read_AD7147
  4458 ;;		_read_sensor
  4459 ;;		_get_ID
  4460 ;;		_read_sensors
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           	psect	text19
  4465  000FC6                     __ptext19:
  4466                           	opt stack 0
  4467  000FC6                     _w16_r16_spi:
  4468                           	opt stack 25
  4469                           
  4470                           ;spi.c: 91: unsigned int address_low, address_high, result;
  4471                           ;spi.c: 92: unsigned int blank_low = 0x000;
  4472                           
  4473                           ;incstack = 0
  4474  000FC6  0E00               	movlw	0
  4475  000FC8  0100               	movlb	0	; () banked
  4476  000FCA  6FBB               	movwf	(w16_r16_spi@blank_low+1)& (0+255),b
  4477  000FCC  0E00               	movlw	0
  4478  000FCE  6FBA               	movwf	w16_r16_spi@blank_low& (0+255),b
  4479                           
  4480                           ;spi.c: 93: unsigned int blank_high = 0x000;
  4481  000FD0  0E00               	movlw	0
  4482  000FD2  0100               	movlb	0	; () banked
  4483  000FD4  6FBD               	movwf	(w16_r16_spi@blank_high+1)& (0+255),b
  4484  000FD6  0E00               	movlw	0
  4485  000FD8  6FBC               	movwf	w16_r16_spi@blank_high& (0+255),b
  4486                           
  4487                           ;spi.c: 94: unsigned int p1, p2, p3, p4;
  4488                           ;spi.c: 96: address_low = address & 0xFF;
  4489  000FDA  0100               	movlb	0	; () banked
  4490  000FDC  51AC               	movf	w16_r16_spi@address& (0+255),w,b
  4491  000FDE  0100               	movlb	0	; () banked
  4492  000FE0  6FB4               	movwf	w16_r16_spi@address_low& (0+255),b
  4493  000FE2  6BB5               	clrf	(w16_r16_spi@address_low+1)& (0+255),b
  4494                           
  4495                           ;spi.c: 97: address_high = (address >> 8) & 0xFF;
  4496  000FE4  C0AC  F0AE         	movff	w16_r16_spi@address,??_w16_r16_spi
  4497  000FE8  C0AD  F0AF         	movff	w16_r16_spi@address+1,??_w16_r16_spi+1
  4498  000FEC  C0AF  F0AE         	movff	??_w16_r16_spi+1,??_w16_r16_spi
  4499  000FF0  0100               	movlb	0	; () banked
  4500  000FF2  6BAF               	clrf	(??_w16_r16_spi+1)& (0+255),b
  4501  000FF4  0100               	movlb	0	; () banked
  4502  000FF6  51AE               	movf	??_w16_r16_spi& (0+255),w,b
  4503  000FF8  0100               	movlb	0	; () banked
  4504  000FFA  6FB6               	movwf	w16_r16_spi@address_high& (0+255),b
  4505  000FFC  6BB7               	clrf	(w16_r16_spi@address_high+1)& (0+255),b
  4506                           
  4507                           ; BSR set to: 0
  4508                           ;spi.c: 99: SSPBUF = address_high;
  4509  000FFE  C0B6  FFC9         	movff	w16_r16_spi@address_high,4041	;volatile
  4510  001002                     l300:
  4511  001002  A0C7               	btfss	4039,0,c	;volatile
  4512  001004  D7FE               	goto	l300
  4513                           
  4514                           ;spi.c: 101: p1 = SSPBUF;
  4515  001006  CFC9 F0B0          	movff	4041,w16_r16_spi@p1	;volatile
  4516  00100A  0100               	movlb	0	; () banked
  4517  00100C  6BB1               	clrf	(w16_r16_spi@p1+1)& (0+255),b
  4518                           
  4519                           ;spi.c: 103: SSPBUF = address_low;
  4520  00100E  C0B4  FFC9         	movff	w16_r16_spi@address_low,4041	;volatile
  4521  001012                     l303:
  4522  001012  A0C7               	btfss	4039,0,c	;volatile
  4523  001014  D7FE               	goto	l303
  4524                           
  4525                           ;spi.c: 105: p2 = SSPBUF;
  4526  001016  CFC9 F0B2          	movff	4041,w16_r16_spi@p2	;volatile
  4527  00101A  0100               	movlb	0	; () banked
  4528  00101C  6BB3               	clrf	(w16_r16_spi@p2+1)& (0+255),b
  4529                           
  4530                           ;spi.c: 107: SSPBUF = blank_high;
  4531  00101E  C0BC  FFC9         	movff	w16_r16_spi@blank_high,4041	;volatile
  4532  001022                     l306:
  4533  001022  A0C7               	btfss	4039,0,c	;volatile
  4534  001024  D7FE               	goto	l306
  4535                           
  4536                           ;spi.c: 109: p3 = SSPBUF;
  4537  001026  CFC9 F0BE          	movff	4041,w16_r16_spi@p3	;volatile
  4538  00102A  0100               	movlb	0	; () banked
  4539  00102C  6BBF               	clrf	(w16_r16_spi@p3+1)& (0+255),b
  4540                           
  4541                           ;spi.c: 111: SSPBUF = blank_low;
  4542  00102E  C0BA  FFC9         	movff	w16_r16_spi@blank_low,4041	;volatile
  4543  001032                     l309:
  4544  001032  A0C7               	btfss	4039,0,c	;volatile
  4545  001034  D7FE               	goto	l309
  4546                           
  4547                           ;spi.c: 113: p4 = SSPBUF;
  4548  001036  CFC9 F0C0          	movff	4041,w16_r16_spi@p4	;volatile
  4549  00103A  0100               	movlb	0	; () banked
  4550  00103C  6BC1               	clrf	(w16_r16_spi@p4+1)& (0+255),b
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;spi.c: 115: result = (p3 << 8) + p4;
  4554  00103E  0100               	movlb	0	; () banked
  4555  001040  51BE               	movf	w16_r16_spi@p3& (0+255),w,b
  4556  001042  0100               	movlb	0	; () banked
  4557  001044  6FAF               	movwf	(??_w16_r16_spi+1)& (0+255),b
  4558  001046  6BAE               	clrf	??_w16_r16_spi& (0+255),b
  4559  001048  0100               	movlb	0	; () banked
  4560  00104A  51C0               	movf	w16_r16_spi@p4& (0+255),w,b
  4561  00104C  0100               	movlb	0	; () banked
  4562  00104E  25AE               	addwf	??_w16_r16_spi& (0+255),w,b
  4563  001050  0100               	movlb	0	; () banked
  4564  001052  6FB8               	movwf	w16_r16_spi@result& (0+255),b
  4565  001054  0100               	movlb	0	; () banked
  4566  001056  51C1               	movf	(w16_r16_spi@p4+1)& (0+255),w,b
  4567  001058  0100               	movlb	0	; () banked
  4568  00105A  21AF               	addwfc	(??_w16_r16_spi+1)& (0+255),w,b
  4569  00105C  0100               	movlb	0	; () banked
  4570  00105E  6FB9               	movwf	(w16_r16_spi@result+1)& (0+255),b
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;spi.c: 116: return result;
  4574  001060  C0B8  F0AC         	movff	w16_r16_spi@result,?_w16_r16_spi
  4575  001064  C0B9  F0AD         	movff	w16_r16_spi@result+1,?_w16_r16_spi+1
  4576  001068  0012               	return	
  4577  00106A                     __end_of_w16_r16_spi:
  4578                           	opt stack 0
  4579                           tblptru	equ	0xFF8
  4580                           tblptrh	equ	0xFF7
  4581                           tblptrl	equ	0xFF6
  4582                           tablat	equ	0xFF5
  4583                           intcon	equ	0xFF2
  4584                           intcon2	equ	0xFF1
  4585                           intcon3	equ	0xFF0
  4586                           postinc0	equ	0xFEE
  4587                           wreg	equ	0xFE8
  4588                           plusw1	equ	0xFE3
  4589                           indf2	equ	0xFDF
  4590                           postinc2	equ	0xFDE
  4591                           postdec2	equ	0xFDD
  4592                           plusw2	equ	0xFDB
  4593                           fsr2h	equ	0xFDA
  4594                           fsr2l	equ	0xFD9
  4595                           status	equ	0xFD8
  4596                           
  4597 ;; *************** function _blink_LED *****************
  4598 ;; Defined at:
  4599 ;;		line 329 in file "AD7147.c"
  4600 ;; Parameters:    Size  Location     Type
  4601 ;;  cdc             2   22[BANK0 ] unsigned int 
  4602 ;; Auto vars:     Size  Location     Type
  4603 ;;  message         2   24[BANK0 ] unsigned int 
  4604 ;; Return value:  Size  Location     Type
  4605 ;;                  1    wreg      void 
  4606 ;; Registers used:
  4607 ;;		wreg, status,2, status,0, cstack
  4608 ;; Tracked objects:
  4609 ;;		On entry : 0/0
  4610 ;;		On exit  : 0/0
  4611 ;;		Unchanged: 0/0
  4612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4613 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4614 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4616 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4617 ;;Total ram usage:        4 bytes
  4618 ;; Hardware stack levels used:    1
  4619 ;; Hardware stack levels required when called:    5
  4620 ;; This function calls:
  4621 ;;		_delay_ms
  4622 ;;		_get_CDC
  4623 ;;		_w32_spi
  4624 ;; This function is called by:
  4625 ;;		_main
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text20
  4630  000D9A                     __ptext20:
  4631                           	opt stack 0
  4632  000D9A                     _blink_LED:
  4633                           	opt stack 25
  4634                           
  4635                           ;AD7147.c: 331: get_CDC(cdc,0);
  4636                           
  4637                           ; BSR set to: 0
  4638                           ;incstack = 0
  4639  000D9A  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4640  000D9E  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4641  000DA2  0E00               	movlw	0
  4642  000DA4  0100               	movlb	0	; () banked
  4643  000DA6  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4644  000DA8  0E00               	movlw	0
  4645  000DAA  6FAE               	movwf	get_CDC@state& (0+255),b
  4646  000DAC  ECE6  F00A         	call	_get_CDC	;wreg free
  4647                           
  4648                           ;AD7147.c: 332: unsigned int message = 0b0010000000000000;
  4649  000DB0  0E20               	movlw	32
  4650  000DB2  0100               	movlb	0	; () banked
  4651  000DB4  6FC5               	movwf	(blink_LED@message+1)& (0+255),b
  4652  000DB6  0E00               	movlw	0
  4653  000DB8  6FC4               	movwf	blink_LED@message& (0+255),b
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;AD7147.c: 333: w32_spi((0xE000 + 0x005),message);
  4657  000DBA  0EE0               	movlw	224
  4658  000DBC  0100               	movlb	0	; () banked
  4659  000DBE  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  4660  000DC0  0E05               	movlw	5
  4661  000DC2  6FAC               	movwf	w32_spi@address& (0+255),b
  4662  000DC4  C0C4  F0AE         	movff	blink_LED@message,w32_spi@data
  4663  000DC8  C0C5  F0AF         	movff	blink_LED@message+1,w32_spi@data+1
  4664  000DCC  EC7A  F008         	call	_w32_spi	;wreg free
  4665                           
  4666                           ;AD7147.c: 334: delay_ms(10);
  4667  000DD0  0E00               	movlw	0
  4668  000DD2  0100               	movlb	0	; () banked
  4669  000DD4  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  4670  000DD6  0E0A               	movlw	10
  4671  000DD8  6FB4               	movwf	delay_ms@n& (0+255),b
  4672  000DDA  EC44  F00A         	call	_delay_ms	;wreg free
  4673                           
  4674                           ;AD7147.c: 335: get_CDC(cdc,1);
  4675  000DDE  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4676  000DE2  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4677  000DE6  0E00               	movlw	0
  4678  000DE8  0100               	movlb	0	; () banked
  4679  000DEA  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4680  000DEC  0E01               	movlw	1
  4681  000DEE  6FAE               	movwf	get_CDC@state& (0+255),b
  4682  000DF0  ECE6  F00A         	call	_get_CDC	;wreg free
  4683                           
  4684                           ;AD7147.c: 336: delay_ms(1000);
  4685  000DF4  0E03               	movlw	3
  4686  000DF6  0100               	movlb	0	; () banked
  4687  000DF8  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  4688  000DFA  0EE8               	movlw	232
  4689  000DFC  6FB4               	movwf	delay_ms@n& (0+255),b
  4690  000DFE  EC44  F00A         	call	_delay_ms	;wreg free
  4691                           
  4692                           ;AD7147.c: 337: get_CDC(cdc,0);
  4693  000E02  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4694  000E06  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4695  000E0A  0E00               	movlw	0
  4696  000E0C  0100               	movlb	0	; () banked
  4697  000E0E  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4698  000E10  0E00               	movlw	0
  4699  000E12  6FAE               	movwf	get_CDC@state& (0+255),b
  4700  000E14  ECE6  F00A         	call	_get_CDC	;wreg free
  4701                           
  4702                           ;AD7147.c: 338: unsigned int message = 0b0011000000000000;
  4703  000E18  0E30               	movlw	48
  4704  000E1A  0100               	movlb	0	; () banked
  4705  000E1C  6FC5               	movwf	(blink_LED@message+1)& (0+255),b
  4706  000E1E  0E00               	movlw	0
  4707  000E20  6FC4               	movwf	blink_LED@message& (0+255),b
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;AD7147.c: 339: w32_spi((0xE000 + 0x005),message);
  4711  000E22  0EE0               	movlw	224
  4712  000E24  0100               	movlb	0	; () banked
  4713  000E26  6FAD               	movwf	(w32_spi@address+1)& (0+255),b
  4714  000E28  0E05               	movlw	5
  4715  000E2A  6FAC               	movwf	w32_spi@address& (0+255),b
  4716  000E2C  C0C4  F0AE         	movff	blink_LED@message,w32_spi@data
  4717  000E30  C0C5  F0AF         	movff	blink_LED@message+1,w32_spi@data+1
  4718  000E34  EC7A  F008         	call	_w32_spi	;wreg free
  4719                           
  4720                           ;AD7147.c: 340: delay_ms(10);
  4721  000E38  0E00               	movlw	0
  4722  000E3A  0100               	movlb	0	; () banked
  4723  000E3C  6FB5               	movwf	(delay_ms@n+1)& (0+255),b
  4724  000E3E  0E0A               	movlw	10
  4725  000E40  6FB4               	movwf	delay_ms@n& (0+255),b
  4726  000E42  EC44  F00A         	call	_delay_ms	;wreg free
  4727                           
  4728                           ;AD7147.c: 341: get_CDC(cdc,1);
  4729  000E46  C0C2  F0AC         	movff	blink_LED@cdc,get_CDC@cdc
  4730  000E4A  C0C3  F0AD         	movff	blink_LED@cdc+1,get_CDC@cdc+1
  4731  000E4E  0E00               	movlw	0
  4732  000E50  0100               	movlb	0	; () banked
  4733  000E52  6FAF               	movwf	(get_CDC@state+1)& (0+255),b
  4734  000E54  0E01               	movlw	1
  4735  000E56  6FAE               	movwf	get_CDC@state& (0+255),b
  4736  000E58  ECE6  F00A         	call	_get_CDC	;wreg free
  4737  000E5C  0012               	return		;funcret
  4738  000E5E                     __end_of_blink_LED:
  4739                           	opt stack 0
  4740                           tblptru	equ	0xFF8
  4741                           tblptrh	equ	0xFF7
  4742                           tblptrl	equ	0xFF6
  4743                           tablat	equ	0xFF5
  4744                           intcon	equ	0xFF2
  4745                           intcon2	equ	0xFF1
  4746                           intcon3	equ	0xFF0
  4747                           postinc0	equ	0xFEE
  4748                           wreg	equ	0xFE8
  4749                           plusw1	equ	0xFE3
  4750                           indf2	equ	0xFDF
  4751                           postinc2	equ	0xFDE
  4752                           postdec2	equ	0xFDD
  4753                           plusw2	equ	0xFDB
  4754                           fsr2h	equ	0xFDA
  4755                           fsr2l	equ	0xFD9
  4756                           status	equ	0xFD8
  4757                           
  4758 ;; *************** function _w32_spi *****************
  4759 ;; Defined at:
  4760 ;;		line 26 in file "spi.c"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;  address         2    0[BANK0 ] unsigned int 
  4763 ;;  data            2    2[BANK0 ] unsigned int 
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;  data_high       2   20[BANK0 ] unsigned int 
  4766 ;;  data_low        2   18[BANK0 ] unsigned int 
  4767 ;;  address_high    2   16[BANK0 ] unsigned int 
  4768 ;;  address_low     2   14[BANK0 ] unsigned int 
  4769 ;;  p4              2   12[BANK0 ] unsigned int 
  4770 ;;  p3              2   10[BANK0 ] unsigned int 
  4771 ;;  p2              2    8[BANK0 ] unsigned int 
  4772 ;;  p1              2    6[BANK0 ] unsigned int 
  4773 ;; Return value:  Size  Location     Type
  4774 ;;                  1    wreg      void 
  4775 ;; Registers used:
  4776 ;;		wreg, status,2
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4782 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4783 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4784 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4785 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4786 ;;Total ram usage:       22 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; Hardware stack levels required when called:    3
  4789 ;; This function calls:
  4790 ;;		Nothing
  4791 ;; This function is called by:
  4792 ;;		_write_AD7147
  4793 ;;		_switch_LED
  4794 ;;		_blink_LED
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           	psect	text21
  4799  0010F4                     __ptext21:
  4800                           	opt stack 0
  4801  0010F4                     _w32_spi:
  4802                           	opt stack 26
  4803                           
  4804                           ;spi.c: 28: unsigned int address_low, address_high, data_low, data_high;
  4805                           ;spi.c: 30: address_low = address & 0xFF;
  4806                           
  4807                           ;incstack = 0
  4808  0010F4  0100               	movlb	0	; () banked
  4809  0010F6  51AC               	movf	w32_spi@address& (0+255),w,b
  4810  0010F8  0100               	movlb	0	; () banked
  4811  0010FA  6FBA               	movwf	w32_spi@address_low& (0+255),b
  4812  0010FC  6BBB               	clrf	(w32_spi@address_low+1)& (0+255),b
  4813                           
  4814                           ;spi.c: 31: address_high = (address >> 8) & 0xFF;
  4815  0010FE  C0AC  F0B0         	movff	w32_spi@address,??_w32_spi
  4816  001102  C0AD  F0B1         	movff	w32_spi@address+1,??_w32_spi+1
  4817  001106  C0B1  F0B0         	movff	??_w32_spi+1,??_w32_spi
  4818  00110A  0100               	movlb	0	; () banked
  4819  00110C  6BB1               	clrf	(??_w32_spi+1)& (0+255),b
  4820  00110E  0100               	movlb	0	; () banked
  4821  001110  51B0               	movf	??_w32_spi& (0+255),w,b
  4822  001112  0100               	movlb	0	; () banked
  4823  001114  6FBC               	movwf	w32_spi@address_high& (0+255),b
  4824  001116  6BBD               	clrf	(w32_spi@address_high+1)& (0+255),b
  4825                           
  4826                           ;spi.c: 33: data_low = data & 0xFF;
  4827  001118  0100               	movlb	0	; () banked
  4828  00111A  51AE               	movf	w32_spi@data& (0+255),w,b
  4829  00111C  0100               	movlb	0	; () banked
  4830  00111E  6FBE               	movwf	w32_spi@data_low& (0+255),b
  4831  001120  6BBF               	clrf	(w32_spi@data_low+1)& (0+255),b
  4832                           
  4833                           ;spi.c: 34: data_high = (data >> 8) & 0xFF;
  4834  001122  C0AE  F0B0         	movff	w32_spi@data,??_w32_spi
  4835  001126  C0AF  F0B1         	movff	w32_spi@data+1,??_w32_spi+1
  4836  00112A  C0B1  F0B0         	movff	??_w32_spi+1,??_w32_spi
  4837  00112E  0100               	movlb	0	; () banked
  4838  001130  6BB1               	clrf	(??_w32_spi+1)& (0+255),b
  4839  001132  0100               	movlb	0	; () banked
  4840  001134  51B0               	movf	??_w32_spi& (0+255),w,b
  4841  001136  0100               	movlb	0	; () banked
  4842  001138  6FC0               	movwf	w32_spi@data_high& (0+255),b
  4843  00113A  6BC1               	clrf	(w32_spi@data_high+1)& (0+255),b
  4844                           
  4845                           ; BSR set to: 0
  4846                           ;spi.c: 36: SSPBUF = address_high;
  4847  00113C  C0BC  FFC9         	movff	w32_spi@address_high,4041	;volatile
  4848  001140                     l267:
  4849  001140  A0C7               	btfss	4039,0,c	;volatile
  4850  001142  D7FE               	goto	l267
  4851                           
  4852                           ;spi.c: 38: unsigned int p1 = SSPBUF;
  4853  001144  CFC9 F0B2          	movff	4041,w32_spi@p1	;volatile
  4854  001148  0100               	movlb	0	; () banked
  4855  00114A  6BB3               	clrf	(w32_spi@p1+1)& (0+255),b
  4856                           
  4857                           ;spi.c: 40: SSPBUF = address_low;
  4858  00114C  C0BA  FFC9         	movff	w32_spi@address_low,4041	;volatile
  4859  001150                     l270:
  4860  001150  A0C7               	btfss	4039,0,c	;volatile
  4861  001152  D7FE               	goto	l270
  4862                           
  4863                           ;spi.c: 42: unsigned int p2 = SSPBUF;
  4864  001154  CFC9 F0B4          	movff	4041,w32_spi@p2	;volatile
  4865  001158  0100               	movlb	0	; () banked
  4866  00115A  6BB5               	clrf	(w32_spi@p2+1)& (0+255),b
  4867                           
  4868                           ;spi.c: 44: SSPBUF = data_high;
  4869  00115C  C0C0  FFC9         	movff	w32_spi@data_high,4041	;volatile
  4870  001160                     l273:
  4871  001160  A0C7               	btfss	4039,0,c	;volatile
  4872  001162  D7FE               	goto	l273
  4873                           
  4874                           ;spi.c: 46: unsigned int p3 = SSPBUF;
  4875  001164  CFC9 F0B6          	movff	4041,w32_spi@p3	;volatile
  4876  001168  0100               	movlb	0	; () banked
  4877  00116A  6BB7               	clrf	(w32_spi@p3+1)& (0+255),b
  4878                           
  4879                           ;spi.c: 48: SSPBUF = data_low;
  4880  00116C  C0BE  FFC9         	movff	w32_spi@data_low,4041	;volatile
  4881  001170                     l276:
  4882  001170  A0C7               	btfss	4039,0,c	;volatile
  4883  001172  D7FE               	goto	l276
  4884                           
  4885                           ;spi.c: 50: unsigned int p4 = SSPBUF;
  4886  001174  CFC9 F0B8          	movff	4041,w32_spi@p4	;volatile
  4887  001178  0100               	movlb	0	; () banked
  4888  00117A  6BB9               	clrf	(w32_spi@p4+1)& (0+255),b
  4889                           
  4890                           ; BSR set to: 0
  4891  00117C  0012               	return		;funcret
  4892  00117E                     __end_of_w32_spi:
  4893                           	opt stack 0
  4894                           tblptru	equ	0xFF8
  4895                           tblptrh	equ	0xFF7
  4896                           tblptrl	equ	0xFF6
  4897                           tablat	equ	0xFF5
  4898                           intcon	equ	0xFF2
  4899                           intcon2	equ	0xFF1
  4900                           intcon3	equ	0xFF0
  4901                           postinc0	equ	0xFEE
  4902                           wreg	equ	0xFE8
  4903                           plusw1	equ	0xFE3
  4904                           indf2	equ	0xFDF
  4905                           postinc2	equ	0xFDE
  4906                           postdec2	equ	0xFDD
  4907                           plusw2	equ	0xFDB
  4908                           fsr2h	equ	0xFDA
  4909                           fsr2l	equ	0xFD9
  4910                           status	equ	0xFD8
  4911                           
  4912 ;; *************** function _get_CDC *****************
  4913 ;; Defined at:
  4914 ;;		line 343 in file "AD7147.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;  cdc             2    0[BANK0 ] unsigned int 
  4917 ;;  state           2    2[BANK0 ] unsigned int 
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;		None
  4920 ;; Return value:  Size  Location     Type
  4921 ;;                  1    wreg      void 
  4922 ;; Registers used:
  4923 ;;		wreg, status,2, status,0
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4929 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4932 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4933 ;;Total ram usage:        4 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    3
  4936 ;; This function calls:
  4937 ;;		Nothing
  4938 ;; This function is called by:
  4939 ;;		_write_AD7147
  4940 ;;		_read_AD7147
  4941 ;;		_sensor_CDC
  4942 ;;		_get_ID
  4943 ;;		_switch_LED
  4944 ;;		_blink_LED
  4945 ;; This function uses a non-reentrant model
  4946 ;;
  4947                           
  4948                           	psect	text22
  4949  0015CC                     __ptext22:
  4950                           	opt stack 0
  4951  0015CC                     _get_CDC:
  4952                           	opt stack 26
  4953                           
  4954                           ;AD7147.c: 345: if (state == 1)
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;incstack = 0
  4958  0015CC  0100               	movlb	0	; () banked
  4959  0015CE  05AE               	decf	get_CDC@state& (0+255),w,b
  4960  0015D0  0100               	movlb	0	; () banked
  4961  0015D2  11AF               	iorwf	(get_CDC@state+1)& (0+255),w,b
  4962  0015D4  A4D8               	btfss	status,2,c
  4963  0015D6  D003               	goto	l1807
  4964                           
  4965                           ; BSR set to: 0
  4966                           ;AD7147.c: 346: {
  4967                           ;AD7147.c: 347: LATCbits.LATC1 = 1;
  4968  0015D8  828B               	bsf	3979,1,c	;volatile
  4969                           
  4970                           ;AD7147.c: 348: LATCbits.LATC0 = 1;
  4971  0015DA  808B               	bsf	3979,0,c	;volatile
  4972                           
  4973                           ;AD7147.c: 349: }
  4974  0015DC  0012               	return	
  4975  0015DE                     l1807:
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;AD7147.c: 350: else
  4979                           ;AD7147.c: 351: {
  4980                           ;AD7147.c: 352: if (cdc == 1)
  4981  0015DE  0100               	movlb	0	; () banked
  4982  0015E0  05AC               	decf	get_CDC@cdc& (0+255),w,b
  4983  0015E2  0100               	movlb	0	; () banked
  4984  0015E4  11AD               	iorwf	(get_CDC@cdc+1)& (0+255),w,b
  4985  0015E6  A4D8               	btfss	status,2,c
  4986  0015E8  D003               	goto	l79
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;AD7147.c: 353: {
  4990                           ;AD7147.c: 354: LATCbits.LATC1 = 0;
  4991  0015EA  928B               	bcf	3979,1,c	;volatile
  4992                           
  4993                           ;AD7147.c: 355: LATCbits.LATC0 = 1;
  4994  0015EC  808B               	bsf	3979,0,c	;volatile
  4995                           
  4996                           ;AD7147.c: 356: }
  4997  0015EE  0012               	return	
  4998  0015F0                     l79:
  4999                           
  5000                           ; BSR set to: 0
  5001                           ;AD7147.c: 357: else
  5002                           ;AD7147.c: 358: {
  5003                           ;AD7147.c: 359: LATCbits.LATC0 = 0;
  5004  0015F0  908B               	bcf	3979,0,c	;volatile
  5005                           
  5006                           ;AD7147.c: 360: LATCbits.LATC1 = 1;
  5007  0015F2  828B               	bsf	3979,1,c	;volatile
  5008                           
  5009                           ; BSR set to: 0
  5010  0015F4  0012               	return	
  5011  0015F6                     __end_of_get_CDC:
  5012                           	opt stack 0
  5013                           tblptru	equ	0xFF8
  5014                           tblptrh	equ	0xFF7
  5015                           tblptrl	equ	0xFF6
  5016                           tablat	equ	0xFF5
  5017                           intcon	equ	0xFF2
  5018                           intcon2	equ	0xFF1
  5019                           intcon3	equ	0xFF0
  5020                           postinc0	equ	0xFEE
  5021                           wreg	equ	0xFE8
  5022                           plusw1	equ	0xFE3
  5023                           indf2	equ	0xFDF
  5024                           postinc2	equ	0xFDE
  5025                           postdec2	equ	0xFDD
  5026                           plusw2	equ	0xFDB
  5027                           fsr2h	equ	0xFDA
  5028                           fsr2l	equ	0xFD9
  5029                           status	equ	0xFD8
  5030                           
  5031 ;; *************** function _delay_ms *****************
  5032 ;; Defined at:
  5033 ;;		line 92 in file "micro_setup.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;  n               2    8[BANK0 ] int 
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;  j               2   11[BANK0 ] int 
  5038 ;; Return value:  Size  Location     Type
  5039 ;;                  1    wreg      void 
  5040 ;; Registers used:
  5041 ;;		wreg, status,2, status,0, cstack
  5042 ;; Tracked objects:
  5043 ;;		On entry : 0/0
  5044 ;;		On exit  : 0/0
  5045 ;;		Unchanged: 0/0
  5046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5047 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5048 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5049 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5050 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5051 ;;Total ram usage:        5 bytes
  5052 ;; Hardware stack levels used:    1
  5053 ;; Hardware stack levels required when called:    4
  5054 ;; This function calls:
  5055 ;;		___awdiv
  5056 ;; This function is called by:
  5057 ;;		_switch_LED
  5058 ;;		_blink_LED
  5059 ;;		_main
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063                           	psect	text23
  5064  001488                     __ptext23:
  5065                           	opt stack 0
  5066  001488                     _delay_ms:
  5067                           	opt stack 25
  5068                           
  5069                           ;micro_setup.c: 94: int j = n/10;
  5070                           
  5071                           ; BSR set to: 0
  5072                           ;incstack = 0
  5073  001488  C0B4  F0AC         	movff	delay_ms@n,___awdiv@dividend
  5074  00148C  C0B5  F0AD         	movff	delay_ms@n+1,___awdiv@dividend+1
  5075  001490  0E00               	movlw	0
  5076  001492  0100               	movlb	0	; () banked
  5077  001494  6FAF               	movwf	(___awdiv@divisor+1)& (0+255),b
  5078  001496  0E0A               	movlw	10
  5079  001498  6FAE               	movwf	___awdiv@divisor& (0+255),b
  5080  00149A  EC2F  F007         	call	___awdiv	;wreg free
  5081  00149E  C0AC  F0B7         	movff	?___awdiv,delay_ms@j
  5082  0014A2  C0AD  F0B8         	movff	?___awdiv+1,delay_ms@j+1
  5083                           
  5084                           ;micro_setup.c: 95: while(j--)
  5085  0014A6  D009               	goto	l1921
  5086  0014A8                     l1919:
  5087                           
  5088                           ;micro_setup.c: 96: {
  5089                           ;micro_setup.c: 97: _delay((unsigned long)((10)*(8000000/4000.0)));
  5090  0014A8  0E1A               	movlw	26
  5091  0014AA  0100               	movlb	0	; () banked
  5092  0014AC  6FB6               	movwf	??_delay_ms& (0+255),b
  5093  0014AE  0EF8               	movlw	248
  5094  0014B0                     u1307:
  5095  0014B0  2EE8               	decfsz	wreg,f,c
  5096  0014B2  D7FE               	bra	u1307
  5097  0014B4  2FB6               	decfsz	??_delay_ms& (0+255),f,b
  5098  0014B6  D7FC               	bra	u1307
  5099  0014B8  F000               	nop	
  5100  0014BA                     l1921:
  5101  0014BA  0100               	movlb	0	; () banked
  5102  0014BC  07B7               	decf	delay_ms@j& (0+255),f,b
  5103  0014BE  A0D8               	btfss	status,0,c
  5104  0014C0  07B8               	decf	(delay_ms@j+1)& (0+255),f,b
  5105  0014C2  0100               	movlb	0	; () banked
  5106  0014C4  29B7               	incf	delay_ms@j& (0+255),w,b
  5107  0014C6  E1F0               	bnz	l1919
  5108  0014C8  0100               	movlb	0	; () banked
  5109  0014CA  29B8               	incf	(delay_ms@j+1)& (0+255),w,b
  5110  0014CC  B4D8               	btfsc	status,2,c
  5111  0014CE  0012               	return	
  5112  0014D0  D7EB               	goto	l1919
  5113  0014D2                     __end_of_delay_ms:
  5114                           	opt stack 0
  5115                           tblptru	equ	0xFF8
  5116                           tblptrh	equ	0xFF7
  5117                           tblptrl	equ	0xFF6
  5118                           tablat	equ	0xFF5
  5119                           intcon	equ	0xFF2
  5120                           intcon2	equ	0xFF1
  5121                           intcon3	equ	0xFF0
  5122                           postinc0	equ	0xFEE
  5123                           wreg	equ	0xFE8
  5124                           plusw1	equ	0xFE3
  5125                           indf2	equ	0xFDF
  5126                           postinc2	equ	0xFDE
  5127                           postdec2	equ	0xFDD
  5128                           plusw2	equ	0xFDB
  5129                           fsr2h	equ	0xFDA
  5130                           fsr2l	equ	0xFD9
  5131                           status	equ	0xFD8
  5132                           
  5133 ;; *************** function ___awdiv *****************
  5134 ;; Defined at:
  5135 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;  dividend        2    0[BANK0 ] int 
  5138 ;;  divisor         2    2[BANK0 ] int 
  5139 ;; Auto vars:     Size  Location     Type
  5140 ;;  quotient        2    6[BANK0 ] int 
  5141 ;;  sign            1    5[BANK0 ] unsigned char 
  5142 ;;  counter         1    4[BANK0 ] unsigned char 
  5143 ;; Return value:  Size  Location     Type
  5144 ;;                  2    0[BANK0 ] int 
  5145 ;; Registers used:
  5146 ;;		wreg, status,2, status,0
  5147 ;; Tracked objects:
  5148 ;;		On entry : 0/0
  5149 ;;		On exit  : 0/0
  5150 ;;		Unchanged: 0/0
  5151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5152 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5153 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5155 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5156 ;;Total ram usage:        8 bytes
  5157 ;; Hardware stack levels used:    1
  5158 ;; Hardware stack levels required when called:    3
  5159 ;; This function calls:
  5160 ;;		Nothing
  5161 ;; This function is called by:
  5162 ;;		_delay_ms
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           	psect	text24
  5167  000E5E                     __ptext24:
  5168                           	opt stack 0
  5169  000E5E                     ___awdiv:
  5170                           	opt stack 25
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;incstack = 0
  5174  000E5E  0E00               	movlw	0
  5175  000E60  0100               	movlb	0	; () banked
  5176  000E62  6FB1               	movwf	___awdiv@sign& (0+255),b
  5177                           
  5178                           ; BSR set to: 0
  5179  000E64  0100               	movlb	0	; () banked
  5180  000E66  AFAF               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5181  000E68  D008               	goto	l1833
  5182                           
  5183                           ; BSR set to: 0
  5184  000E6A  0100               	movlb	0	; () banked
  5185  000E6C  6DAE               	negf	___awdiv@divisor& (0+255),b
  5186  000E6E  1FAF               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5187  000E70  B0D8               	btfsc	status,0,c
  5188  000E72  2BAF               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5189                           
  5190                           ; BSR set to: 0
  5191  000E74  0E01               	movlw	1
  5192  000E76  0100               	movlb	0	; () banked
  5193  000E78  6FB1               	movwf	___awdiv@sign& (0+255),b
  5194  000E7A                     l1833:
  5195                           
  5196                           ; BSR set to: 0
  5197  000E7A  0100               	movlb	0	; () banked
  5198  000E7C  AFAD               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5199  000E7E  D008               	goto	l1839
  5200                           
  5201                           ; BSR set to: 0
  5202  000E80  0100               	movlb	0	; () banked
  5203  000E82  6DAC               	negf	___awdiv@dividend& (0+255),b
  5204  000E84  1FAD               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5205  000E86  B0D8               	btfsc	status,0,c
  5206  000E88  2BAD               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5207                           
  5208                           ; BSR set to: 0
  5209  000E8A  0E01               	movlw	1
  5210  000E8C  0100               	movlb	0	; () banked
  5211  000E8E  1BB1               	xorwf	___awdiv@sign& (0+255),f,b
  5212  000E90                     l1839:
  5213                           
  5214                           ; BSR set to: 0
  5215  000E90  0E00               	movlw	0
  5216  000E92  0100               	movlb	0	; () banked
  5217  000E94  6FB3               	movwf	(___awdiv@quotient+1)& (0+255),b
  5218  000E96  0E00               	movlw	0
  5219  000E98  6FB2               	movwf	___awdiv@quotient& (0+255),b
  5220                           
  5221                           ; BSR set to: 0
  5222  000E9A  0100               	movlb	0	; () banked
  5223  000E9C  51AE               	movf	___awdiv@divisor& (0+255),w,b
  5224  000E9E  0100               	movlb	0	; () banked
  5225  000EA0  11AF               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5226  000EA2  B4D8               	btfsc	status,2,c
  5227  000EA4  D02C               	goto	l1861
  5228                           
  5229                           ; BSR set to: 0
  5230  000EA6  0E01               	movlw	1
  5231  000EA8  0100               	movlb	0	; () banked
  5232  000EAA  6FB0               	movwf	___awdiv@counter& (0+255),b
  5233  000EAC  D006               	goto	l1847
  5234  000EAE                     l1845:
  5235                           
  5236                           ; BSR set to: 0
  5237  000EAE  0100               	movlb	0	; () banked
  5238  000EB0  90D8               	bcf	status,0,c
  5239  000EB2  37AE               	rlcf	___awdiv@divisor& (0+255),f,b
  5240  000EB4  37AF               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5241  000EB6  0100               	movlb	0	; () banked
  5242  000EB8  2BB0               	incf	___awdiv@counter& (0+255),f,b
  5243  000EBA                     l1847:
  5244                           
  5245                           ; BSR set to: 0
  5246  000EBA  0100               	movlb	0	; () banked
  5247  000EBC  AFAF               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5248  000EBE  D7F7               	goto	l1845
  5249  000EC0                     l1849:
  5250                           
  5251                           ; BSR set to: 0
  5252  000EC0  0100               	movlb	0	; () banked
  5253  000EC2  90D8               	bcf	status,0,c
  5254  000EC4  37B2               	rlcf	___awdiv@quotient& (0+255),f,b
  5255  000EC6  37B3               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5256                           
  5257                           ; BSR set to: 0
  5258  000EC8  0100               	movlb	0	; () banked
  5259  000ECA  51AE               	movf	___awdiv@divisor& (0+255),w,b
  5260  000ECC  0100               	movlb	0	; () banked
  5261  000ECE  5DAC               	subwf	___awdiv@dividend& (0+255),w,b
  5262  000ED0  0100               	movlb	0	; () banked
  5263  000ED2  51AF               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5264  000ED4  0100               	movlb	0	; () banked
  5265  000ED6  59AD               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5266  000ED8  A0D8               	btfss	status,0,c
  5267  000EDA  D00A               	goto	l1857
  5268                           
  5269                           ; BSR set to: 0
  5270  000EDC  0100               	movlb	0	; () banked
  5271  000EDE  51AE               	movf	___awdiv@divisor& (0+255),w,b
  5272  000EE0  0100               	movlb	0	; () banked
  5273  000EE2  5FAC               	subwf	___awdiv@dividend& (0+255),f,b
  5274  000EE4  0100               	movlb	0	; () banked
  5275  000EE6  51AF               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5276  000EE8  0100               	movlb	0	; () banked
  5277  000EEA  5BAD               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5278                           
  5279                           ; BSR set to: 0
  5280  000EEC  0100               	movlb	0	; () banked
  5281  000EEE  81B2               	bsf	___awdiv@quotient& (0+255),0,b
  5282  000EF0                     l1857:
  5283                           
  5284                           ; BSR set to: 0
  5285  000EF0  0100               	movlb	0	; () banked
  5286  000EF2  90D8               	bcf	status,0,c
  5287  000EF4  33AF               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5288  000EF6  33AE               	rrcf	___awdiv@divisor& (0+255),f,b
  5289                           
  5290                           ; BSR set to: 0
  5291  000EF8  0100               	movlb	0	; () banked
  5292  000EFA  2FB0               	decfsz	___awdiv@counter& (0+255),f,b
  5293  000EFC  D7E1               	goto	l1849
  5294  000EFE                     l1861:
  5295                           
  5296                           ; BSR set to: 0
  5297  000EFE  0100               	movlb	0	; () banked
  5298  000F00  51B1               	movf	___awdiv@sign& (0+255),w,b
  5299  000F02  0100               	movlb	0	; () banked
  5300  000F04  B4D8               	btfsc	status,2,c
  5301  000F06  D005               	goto	l1865
  5302                           
  5303                           ; BSR set to: 0
  5304  000F08  0100               	movlb	0	; () banked
  5305  000F0A  6DB2               	negf	___awdiv@quotient& (0+255),b
  5306  000F0C  1FB3               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5307  000F0E  B0D8               	btfsc	status,0,c
  5308  000F10  2BB3               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5309  000F12                     l1865:
  5310                           
  5311                           ; BSR set to: 0
  5312  000F12  C0B2  F0AC         	movff	___awdiv@quotient,?___awdiv
  5313  000F16  C0B3  F0AD         	movff	___awdiv@quotient+1,?___awdiv+1
  5314  000F1A  0012               	return	
  5315  000F1C                     __end_of___awdiv:
  5316                           	opt stack 0
  5317                           tblptru	equ	0xFF8
  5318                           tblptrh	equ	0xFF7
  5319                           tblptrl	equ	0xFF6
  5320                           tablat	equ	0xFF5
  5321                           intcon	equ	0xFF2
  5322                           intcon2	equ	0xFF1
  5323                           intcon3	equ	0xFF0
  5324                           postinc0	equ	0xFEE
  5325                           wreg	equ	0xFE8
  5326                           plusw1	equ	0xFE3
  5327                           indf2	equ	0xFDF
  5328                           postinc2	equ	0xFDE
  5329                           postdec2	equ	0xFDD
  5330                           plusw2	equ	0xFDB
  5331                           fsr2h	equ	0xFDA
  5332                           fsr2l	equ	0xFD9
  5333                           status	equ	0xFD8
  5334                           
  5335 ;; *************** function _ISR *****************
  5336 ;; Defined at:
  5337 ;;		line 21 in file "main.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;		None
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;		None
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  1    wreg      void 
  5344 ;; Registers used:
  5345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5353 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5354 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5355 ;;Total ram usage:       14 bytes
  5356 ;; Hardware stack levels used:    1
  5357 ;; Hardware stack levels required when called:    2
  5358 ;; This function calls:
  5359 ;;		_read_cdc1
  5360 ;;		_read_cdc2
  5361 ;;		i2_read_AD7147
  5362 ;; This function is called by:
  5363 ;;		Interrupt level 2
  5364 ;; This function uses a non-reentrant model
  5365 ;;
  5366                           
  5367                           	psect	intcode
  5368  000008                     __pintcode:
  5369                           	opt stack 0
  5370  000008                     _ISR:
  5371                           	opt stack 25
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;incstack = 0
  5375  000008  8257               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5376  00000A  CFFA F023          	movff	pclath,??_ISR
  5377  00000E  CFFB F024          	movff	pclatu,??_ISR+1
  5378  000012  CFE9 F025          	movff	fsr0l,??_ISR+2
  5379  000016  CFEA F026          	movff	fsr0h,??_ISR+3
  5380  00001A  CFE1 F027          	movff	fsr1l,??_ISR+4
  5381  00001E  CFE2 F028          	movff	fsr1h,??_ISR+5
  5382  000022  CFD9 F029          	movff	fsr2l,??_ISR+6
  5383  000026  CFDA F02A          	movff	fsr2h,??_ISR+7
  5384  00002A  CFF3 F02B          	movff	prodl,??_ISR+8
  5385  00002E  CFF4 F02C          	movff	prodh,??_ISR+9
  5386  000032  CFF6 F02D          	movff	tblptrl,??_ISR+10
  5387  000036  CFF7 F02E          	movff	tblptrh,??_ISR+11
  5388  00003A  CFF8 F02F          	movff	tblptru,??_ISR+12
  5389  00003E  CFF5 F030          	movff	tablat,??_ISR+13
  5390                           
  5391                           ;main.c: 24: if(INTCONbits.INT0IF && INTCONbits.INT0IE)
  5392  000042  B2F2               	btfsc	intcon,1,c	;volatile
  5393  000044  A8F2               	btfss	intcon,4,c	;volatile
  5394  000046  D019               	goto	i2l2395
  5395                           
  5396                           ;main.c: 25: {
  5397                           ;main.c: 26: read_cdc1(sensor_values);
  5398  000048  0E7C               	movlw	low _sensor_values
  5399  00004A  6E17               	movwf	read_cdc1@sensor_values,c
  5400  00004C  0E00               	movlw	high _sensor_values
  5401  00004E  6E18               	movwf	read_cdc1@sensor_values+1,c
  5402  000050  EC00  F009         	call	_read_cdc1	;wreg free
  5403                           
  5404                           ;main.c: 27: read_AD7147(interrupt_values_cdc1, 0x008, 3, 1);
  5405  000054  0E51               	movlw	low _interrupt_values_cdc1
  5406  000056  6E17               	movwf	i2read_AD7147@DataBuffer,c
  5407  000058  0E00               	movlw	high _interrupt_values_cdc1
  5408  00005A  6E18               	movwf	i2read_AD7147@DataBuffer+1,c
  5409  00005C  0E00               	movlw	0
  5410  00005E  6E1A               	movwf	i2read_AD7147@RegisterStartAddress+1,c
  5411  000060  0E08               	movlw	8
  5412  000062  6E19               	movwf	i2read_AD7147@RegisterStartAddress,c
  5413  000064  0E00               	movlw	0
  5414  000066  6E1C               	movwf	i2read_AD7147@NumberOfRegisters+1,c
  5415  000068  0E03               	movlw	3
  5416  00006A  6E1B               	movwf	i2read_AD7147@NumberOfRegisters,c
  5417  00006C  0E00               	movlw	0
  5418  00006E  6E1E               	movwf	i2read_AD7147@cdc+1,c
  5419  000070  0E01               	movlw	1
  5420  000072  6E1D               	movwf	i2read_AD7147@cdc,c
  5421  000074  EC7E  F009         	call	i2_read_AD7147	;wreg free
  5422                           
  5423                           ;main.c: 28: INTCONbits.INT0IF = 0;
  5424  000078  92F2               	bcf	intcon,1,c	;volatile
  5425  00007A                     i2l2395:
  5426                           
  5427                           ;main.c: 29: }
  5428                           ;main.c: 30: if(INTCON3bits.INT1IF && INTCON3bits.INT1E)
  5429  00007A  B0F0               	btfsc	intcon3,0,c	;volatile
  5430  00007C  A6F0               	btfss	intcon3,3,c	;volatile
  5431  00007E  D019               	goto	i2l156
  5432                           
  5433                           ;main.c: 31: {
  5434                           ;main.c: 32: read_cdc2(sensor_values);
  5435  000080  0E7C               	movlw	low _sensor_values
  5436  000082  6E17               	movwf	read_cdc2@sensor_values,c
  5437  000084  0E00               	movlw	high _sensor_values
  5438  000086  6E18               	movwf	read_cdc2@sensor_values+1,c
  5439  000088  ECBF  F008         	call	_read_cdc2	;wreg free
  5440                           
  5441                           ;main.c: 33: read_AD7147(interrupt_values_cdc2, 0x008, 3, 2);
  5442  00008C  0E4B               	movlw	low _interrupt_values_cdc2
  5443  00008E  6E17               	movwf	i2read_AD7147@DataBuffer,c
  5444  000090  0E00               	movlw	high _interrupt_values_cdc2
  5445  000092  6E18               	movwf	i2read_AD7147@DataBuffer+1,c
  5446  000094  0E00               	movlw	0
  5447  000096  6E1A               	movwf	i2read_AD7147@RegisterStartAddress+1,c
  5448  000098  0E08               	movlw	8
  5449  00009A  6E19               	movwf	i2read_AD7147@RegisterStartAddress,c
  5450  00009C  0E00               	movlw	0
  5451  00009E  6E1C               	movwf	i2read_AD7147@NumberOfRegisters+1,c
  5452  0000A0  0E03               	movlw	3
  5453  0000A2  6E1B               	movwf	i2read_AD7147@NumberOfRegisters,c
  5454  0000A4  0E00               	movlw	0
  5455  0000A6  6E1E               	movwf	i2read_AD7147@cdc+1,c
  5456  0000A8  0E02               	movlw	2
  5457  0000AA  6E1D               	movwf	i2read_AD7147@cdc,c
  5458  0000AC  EC7E  F009         	call	i2_read_AD7147	;wreg free
  5459                           
  5460                           ;main.c: 34: INTCON3bits.INT1IF = 0;
  5461  0000B0  90F0               	bcf	intcon3,0,c	;volatile
  5462  0000B2                     i2l156:
  5463  0000B2  C030  FFF5         	movff	??_ISR+13,tablat
  5464  0000B6  C02F  FFF8         	movff	??_ISR+12,tblptru
  5465  0000BA  C02E  FFF7         	movff	??_ISR+11,tblptrh
  5466  0000BE  C02D  FFF6         	movff	??_ISR+10,tblptrl
  5467  0000C2  C02C  FFF4         	movff	??_ISR+9,prodh
  5468  0000C6  C02B  FFF3         	movff	??_ISR+8,prodl
  5469  0000CA  C02A  FFDA         	movff	??_ISR+7,fsr2h
  5470  0000CE  C029  FFD9         	movff	??_ISR+6,fsr2l
  5471  0000D2  C028  FFE2         	movff	??_ISR+5,fsr1h
  5472  0000D6  C027  FFE1         	movff	??_ISR+4,fsr1l
  5473  0000DA  C026  FFEA         	movff	??_ISR+3,fsr0h
  5474  0000DE  C025  FFE9         	movff	??_ISR+2,fsr0l
  5475  0000E2  C024  FFFB         	movff	??_ISR+1,pclatu
  5476  0000E6  C023  FFFA         	movff	??_ISR,pclath
  5477  0000EA  9257               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5478  0000EC  0011               	retfie		f
  5479  0000EE                     __end_of_ISR:
  5480                           	opt stack 0
  5481                           pclatu	equ	0xFFB
  5482                           pclath	equ	0xFFA
  5483                           tblptru	equ	0xFF8
  5484                           tblptrh	equ	0xFF7
  5485                           tblptrl	equ	0xFF6
  5486                           tablat	equ	0xFF5
  5487                           prodh	equ	0xFF4
  5488                           prodl	equ	0xFF3
  5489                           intcon	equ	0xFF2
  5490                           intcon2	equ	0xFF1
  5491                           intcon3	equ	0xFF0
  5492                           postinc0	equ	0xFEE
  5493                           fsr0h	equ	0xFEA
  5494                           fsr0l	equ	0xFE9
  5495                           wreg	equ	0xFE8
  5496                           plusw1	equ	0xFE3
  5497                           fsr1h	equ	0xFE2
  5498                           fsr1l	equ	0xFE1
  5499                           indf2	equ	0xFDF
  5500                           postinc2	equ	0xFDE
  5501                           postdec2	equ	0xFDD
  5502                           plusw2	equ	0xFDB
  5503                           fsr2h	equ	0xFDA
  5504                           fsr2l	equ	0xFD9
  5505                           status	equ	0xFD8
  5506                           
  5507 ;; *************** function i2_read_AD7147 *****************
  5508 ;; Defined at:
  5509 ;;		line 221 in file "AD7147.c"
  5510 ;; Parameters:    Size  Location     Type
  5511 ;;  DataBuffer      2   22[COMRAM] PTR unsigned int 
  5512 ;;		 -> interrupt_values_cdc2(6), interrupt_values_cdc1(6), 
  5513 ;;  RegisterStar    2   24[COMRAM] unsigned int 
  5514 ;;  NumberOfRegi    2   26[COMRAM] unsigned int 
  5515 ;;  cdc             2   28[COMRAM] unsigned int 
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;  read_AD7147     2   32[COMRAM] unsigned int 
  5518 ;;  read_AD7147     2   30[COMRAM] unsigned int 
  5519 ;; Return value:  Size  Location     Type
  5520 ;;                  1    wreg      void 
  5521 ;; Registers used:
  5522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5523 ;; Tracked objects:
  5524 ;;		On entry : 0/0
  5525 ;;		On exit  : 0/0
  5526 ;;		Unchanged: 0/0
  5527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5528 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5529 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5531 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5532 ;;Total ram usage:       12 bytes
  5533 ;; Hardware stack levels used:    1
  5534 ;; Hardware stack levels required when called:    1
  5535 ;; This function calls:
  5536 ;;		i2_get_CDC
  5537 ;;		i2_w16_r16_spi
  5538 ;; This function is called by:
  5539 ;;		_ISR
  5540 ;; This function uses a non-reentrant model
  5541 ;;
  5542                           
  5543                           	psect	text26
  5544  0012FC                     __ptext26:
  5545                           	opt stack 0
  5546  0012FC                     i2_read_AD7147:
  5547                           	opt stack 25
  5548                           
  5549                           ;AD7147.c: 223: get_CDC(cdc,0);
  5550                           
  5551                           ;incstack = 0
  5552  0012FC  C01D  F001         	movff	i2read_AD7147@cdc,i2get_CDC@cdc
  5553  001300  C01E  F002         	movff	i2read_AD7147@cdc+1,i2get_CDC@cdc+1
  5554  001304  0E00               	movlw	0
  5555  001306  6E04               	movwf	i2get_CDC@state+1,c
  5556  001308  0E00               	movlw	0
  5557  00130A  6E03               	movwf	i2get_CDC@state,c
  5558  00130C  EC0D  F00B         	call	i2_get_CDC	;wreg free
  5559                           
  5560                           ;AD7147.c: 224: unsigned int Register_Values = 0xE400 + RegisterStartAddress;
  5561  001310  0E00               	movlw	0
  5562  001312  2419               	addwf	i2read_AD7147@RegisterStartAddress,w,c
  5563  001314  6E1F               	movwf	i2read_AD7147@Register_Values,c
  5564  001316  0EE4               	movlw	228
  5565  001318  201A               	addwfc	i2read_AD7147@RegisterStartAddress+1,w,c
  5566  00131A  6E20               	movwf	i2read_AD7147@Register_Values+1,c
  5567                           
  5568                           ;AD7147.c: 225: for (unsigned int i=0; i<NumberOfRegisters; i++)
  5569  00131C  0E00               	movlw	0
  5570  00131E  6E22               	movwf	i2read_AD7147@i+1,c
  5571  001320  0E00               	movlw	0
  5572  001322  6E21               	movwf	i2read_AD7147@i,c
  5573  001324  D017               	goto	i2l2365
  5574  001326                     i2l2361:
  5575                           
  5576                           ;AD7147.c: 226: {
  5577                           ;AD7147.c: 227: DataBuffer[i]=w16_r16_spi(Register_Values+i);
  5578  001326  5021               	movf	i2read_AD7147@i,w,c
  5579  001328  241F               	addwf	i2read_AD7147@Register_Values,w,c
  5580  00132A  6E01               	movwf	i2w16_r16_spi@address,c
  5581  00132C  5022               	movf	i2read_AD7147@i+1,w,c
  5582  00132E  2020               	addwfc	i2read_AD7147@Register_Values+1,w,c
  5583  001330  6E02               	movwf	i2w16_r16_spi@address+1,c
  5584  001332  EC3F  F009         	call	i2_w16_r16_spi	;wreg free
  5585  001336  90D8               	bcf	status,0,c
  5586  001338  3421               	rlcf	i2read_AD7147@i,w,c
  5587  00133A  6ED9               	movwf	fsr2l,c
  5588  00133C  3422               	rlcf	i2read_AD7147@i+1,w,c
  5589  00133E  6EDA               	movwf	fsr2h,c
  5590  001340  5017               	movf	i2read_AD7147@DataBuffer,w,c
  5591  001342  26D9               	addwf	fsr2l,f,c
  5592  001344  5018               	movf	i2read_AD7147@DataBuffer+1,w,c
  5593  001346  22DA               	addwfc	fsr2h,f,c
  5594  001348  C001  FFDE         	movff	?i2_w16_r16_spi,postinc2
  5595  00134C  C002  FFDD         	movff	?i2_w16_r16_spi+1,postdec2
  5596  001350  4A21               	infsnz	i2read_AD7147@i,f,c
  5597  001352  2A22               	incf	i2read_AD7147@i+1,f,c
  5598  001354                     i2l2365:
  5599  001354  501B               	movf	i2read_AD7147@NumberOfRegisters,w,c
  5600  001356  5C21               	subwf	i2read_AD7147@i,w,c
  5601  001358  501C               	movf	i2read_AD7147@NumberOfRegisters+1,w,c
  5602  00135A  5822               	subwfb	i2read_AD7147@i+1,w,c
  5603  00135C  A0D8               	btfss	status,0,c
  5604  00135E  D7E3               	goto	i2l2361
  5605                           
  5606                           ;AD7147.c: 228: }
  5607                           ;AD7147.c: 229: get_CDC(cdc,1);
  5608  001360  C01D  F001         	movff	i2read_AD7147@cdc,i2get_CDC@cdc
  5609  001364  C01E  F002         	movff	i2read_AD7147@cdc+1,i2get_CDC@cdc+1
  5610  001368  0E00               	movlw	0
  5611  00136A  6E04               	movwf	i2get_CDC@state+1,c
  5612  00136C  0E01               	movlw	1
  5613  00136E  6E03               	movwf	i2get_CDC@state,c
  5614  001370  EC0D  F00B         	call	i2_get_CDC	;wreg free
  5615  001374  0012               	return		;funcret
  5616  001376                     __end_ofi2_read_AD7147:
  5617                           	opt stack 0
  5618                           pclatu	equ	0xFFB
  5619                           pclath	equ	0xFFA
  5620                           tblptru	equ	0xFF8
  5621                           tblptrh	equ	0xFF7
  5622                           tblptrl	equ	0xFF6
  5623                           tablat	equ	0xFF5
  5624                           prodh	equ	0xFF4
  5625                           prodl	equ	0xFF3
  5626                           intcon	equ	0xFF2
  5627                           intcon2	equ	0xFF1
  5628                           intcon3	equ	0xFF0
  5629                           postinc0	equ	0xFEE
  5630                           fsr0h	equ	0xFEA
  5631                           fsr0l	equ	0xFE9
  5632                           wreg	equ	0xFE8
  5633                           plusw1	equ	0xFE3
  5634                           fsr1h	equ	0xFE2
  5635                           fsr1l	equ	0xFE1
  5636                           indf2	equ	0xFDF
  5637                           postinc2	equ	0xFDE
  5638                           postdec2	equ	0xFDD
  5639                           plusw2	equ	0xFDB
  5640                           fsr2h	equ	0xFDA
  5641                           fsr2l	equ	0xFD9
  5642                           status	equ	0xFD8
  5643                           
  5644 ;; *************** function _read_cdc2 *****************
  5645 ;; Defined at:
  5646 ;;		line 281 in file "AD7147.c"
  5647 ;; Parameters:    Size  Location     Type
  5648 ;;  sensor_value    2   22[COMRAM] PTR unsigned int 
  5649 ;;		 -> sensor_values(48), 
  5650 ;; Auto vars:     Size  Location     Type
  5651 ;;  i               2   24[COMRAM] unsigned int 
  5652 ;; Return value:  Size  Location     Type
  5653 ;;                  1    wreg      void 
  5654 ;; Registers used:
  5655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5656 ;; Tracked objects:
  5657 ;;		On entry : 0/0
  5658 ;;		On exit  : 0/0
  5659 ;;		Unchanged: 0/0
  5660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5661 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5662 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5664 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5665 ;;Total ram usage:        4 bytes
  5666 ;; Hardware stack levels used:    1
  5667 ;; Hardware stack levels required when called:    1
  5668 ;; This function calls:
  5669 ;;		_r16_spi
  5670 ;;		i2_get_CDC
  5671 ;;		i2_w16_r16_spi
  5672 ;; This function is called by:
  5673 ;;		_ISR
  5674 ;; This function uses a non-reentrant model
  5675 ;;
  5676                           
  5677                           	psect	text27
  5678  00117E                     __ptext27:
  5679                           	opt stack 0
  5680  00117E                     _read_cdc2:
  5681                           	opt stack 25
  5682                           
  5683                           ;AD7147.c: 283: get_CDC(2,0);
  5684                           
  5685                           ;incstack = 0
  5686  00117E  0E00               	movlw	0
  5687  001180  6E02               	movwf	i2get_CDC@cdc+1,c
  5688  001182  0E02               	movlw	2
  5689  001184  6E01               	movwf	i2get_CDC@cdc,c
  5690  001186  0E00               	movlw	0
  5691  001188  6E04               	movwf	i2get_CDC@state+1,c
  5692  00118A  0E00               	movlw	0
  5693  00118C  6E03               	movwf	i2get_CDC@state,c
  5694  00118E  EC0D  F00B         	call	i2_get_CDC	;wreg free
  5695                           
  5696                           ;AD7147.c: 284: sensor_values[12] = w16_r16_spi(0xE400 + 0x00B);
  5697  001192  0EE4               	movlw	228
  5698  001194  6E02               	movwf	i2w16_r16_spi@address+1,c
  5699  001196  0E0B               	movlw	11
  5700  001198  6E01               	movwf	i2w16_r16_spi@address,c
  5701  00119A  EC3F  F009         	call	i2_w16_r16_spi	;wreg free
  5702  00119E  EE20 F018          	lfsr	2,24
  5703  0011A2  5017               	movf	read_cdc2@sensor_values,w,c
  5704  0011A4  26D9               	addwf	fsr2l,f,c
  5705  0011A6  5018               	movf	read_cdc2@sensor_values+1,w,c
  5706  0011A8  22DA               	addwfc	fsr2h,f,c
  5707  0011AA  C001  FFDE         	movff	?i2_w16_r16_spi,postinc2
  5708  0011AE  C002  FFDD         	movff	?i2_w16_r16_spi+1,postdec2
  5709                           
  5710                           ;AD7147.c: 285: for(unsigned int i = 13; i<17; i++)
  5711  0011B2  0E00               	movlw	0
  5712  0011B4  6E1A               	movwf	read_cdc2@i+1,c
  5713  0011B6  0E0D               	movlw	13
  5714  0011B8  6E19               	movwf	read_cdc2@i,c
  5715  0011BA                     i2l2251:
  5716  0011BA  501A               	movf	read_cdc2@i+1,w,c
  5717  0011BC  E116               	bnz	i2l2261
  5718  0011BE  0E11               	movlw	17
  5719  0011C0  5C19               	subwf	read_cdc2@i,w,c
  5720  0011C2  B0D8               	btfsc	status,0,c
  5721  0011C4  D012               	goto	i2l2261
  5722                           
  5723                           ;AD7147.c: 286: {
  5724                           ;AD7147.c: 287: sensor_values[i] = r16_spi();
  5725  0011C6  EC69  F00A         	call	_r16_spi	;wreg free
  5726  0011CA  90D8               	bcf	status,0,c
  5727  0011CC  3419               	rlcf	read_cdc2@i,w,c
  5728  0011CE  6ED9               	movwf	fsr2l,c
  5729  0011D0  341A               	rlcf	read_cdc2@i+1,w,c
  5730  0011D2  6EDA               	movwf	fsr2h,c
  5731  0011D4  5017               	movf	read_cdc2@sensor_values,w,c
  5732  0011D6  26D9               	addwf	fsr2l,f,c
  5733  0011D8  5018               	movf	read_cdc2@sensor_values+1,w,c
  5734  0011DA  22DA               	addwfc	fsr2h,f,c
  5735  0011DC  C001  FFDE         	movff	?_r16_spi,postinc2
  5736  0011E0  C002  FFDD         	movff	?_r16_spi+1,postdec2
  5737  0011E4  4A19               	infsnz	read_cdc2@i,f,c
  5738  0011E6  2A1A               	incf	read_cdc2@i+1,f,c
  5739  0011E8  D7E8               	goto	i2l2251
  5740  0011EA                     i2l2261:
  5741                           
  5742                           ;AD7147.c: 288: }
  5743                           ;AD7147.c: 289: get_CDC(2,1);
  5744  0011EA  0E00               	movlw	0
  5745  0011EC  6E02               	movwf	i2get_CDC@cdc+1,c
  5746  0011EE  0E02               	movlw	2
  5747  0011F0  6E01               	movwf	i2get_CDC@cdc,c
  5748  0011F2  0E00               	movlw	0
  5749  0011F4  6E04               	movwf	i2get_CDC@state+1,c
  5750  0011F6  0E01               	movlw	1
  5751  0011F8  6E03               	movwf	i2get_CDC@state,c
  5752  0011FA  EC0D  F00B         	call	i2_get_CDC	;wreg free
  5753  0011FE  0012               	return		;funcret
  5754  001200                     __end_of_read_cdc2:
  5755                           	opt stack 0
  5756                           pclatu	equ	0xFFB
  5757                           pclath	equ	0xFFA
  5758                           tblptru	equ	0xFF8
  5759                           tblptrh	equ	0xFF7
  5760                           tblptrl	equ	0xFF6
  5761                           tablat	equ	0xFF5
  5762                           prodh	equ	0xFF4
  5763                           prodl	equ	0xFF3
  5764                           intcon	equ	0xFF2
  5765                           intcon2	equ	0xFF1
  5766                           intcon3	equ	0xFF0
  5767                           postinc0	equ	0xFEE
  5768                           fsr0h	equ	0xFEA
  5769                           fsr0l	equ	0xFE9
  5770                           wreg	equ	0xFE8
  5771                           plusw1	equ	0xFE3
  5772                           fsr1h	equ	0xFE2
  5773                           fsr1l	equ	0xFE1
  5774                           indf2	equ	0xFDF
  5775                           postinc2	equ	0xFDE
  5776                           postdec2	equ	0xFDD
  5777                           plusw2	equ	0xFDB
  5778                           fsr2h	equ	0xFDA
  5779                           fsr2l	equ	0xFD9
  5780                           status	equ	0xFD8
  5781                           
  5782 ;; *************** function _read_cdc1 *****************
  5783 ;; Defined at:
  5784 ;;		line 271 in file "AD7147.c"
  5785 ;; Parameters:    Size  Location     Type
  5786 ;;  sensor_value    2   22[COMRAM] PTR unsigned int 
  5787 ;;		 -> sensor_values(48), 
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;  i               2   24[COMRAM] unsigned int 
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  1    wreg      void 
  5792 ;; Registers used:
  5793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5799 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5800 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5802 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5803 ;;Total ram usage:        4 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; Hardware stack levels required when called:    1
  5806 ;; This function calls:
  5807 ;;		_r16_spi
  5808 ;;		i2_get_CDC
  5809 ;;		i2_w16_r16_spi
  5810 ;; This function is called by:
  5811 ;;		_ISR
  5812 ;; This function uses a non-reentrant model
  5813 ;;
  5814                           
  5815                           	psect	text28
  5816  001200                     __ptext28:
  5817                           	opt stack 0
  5818  001200                     _read_cdc1:
  5819                           	opt stack 25
  5820                           
  5821                           ;AD7147.c: 273: get_CDC(1,0);
  5822                           
  5823                           ;incstack = 0
  5824  001200  0E00               	movlw	0
  5825  001202  6E02               	movwf	i2get_CDC@cdc+1,c
  5826  001204  0E01               	movlw	1
  5827  001206  6E01               	movwf	i2get_CDC@cdc,c
  5828  001208  0E00               	movlw	0
  5829  00120A  6E04               	movwf	i2get_CDC@state+1,c
  5830  00120C  0E00               	movlw	0
  5831  00120E  6E03               	movwf	i2get_CDC@state,c
  5832  001210  EC0D  F00B         	call	i2_get_CDC	;wreg free
  5833                           
  5834                           ;AD7147.c: 274: sensor_values[0] = w16_r16_spi(0xE400 + 0x00B);
  5835  001214  0EE4               	movlw	228
  5836  001216  6E02               	movwf	i2w16_r16_spi@address+1,c
  5837  001218  0E0B               	movlw	11
  5838  00121A  6E01               	movwf	i2w16_r16_spi@address,c
  5839  00121C  EC3F  F009         	call	i2_w16_r16_spi	;wreg free
  5840  001220  C017  FFD9         	movff	read_cdc1@sensor_values,fsr2l
  5841  001224  C018  FFDA         	movff	read_cdc1@sensor_values+1,fsr2h
  5842  001228  C001  FFDE         	movff	?i2_w16_r16_spi,postinc2
  5843  00122C  C002  FFDD         	movff	?i2_w16_r16_spi+1,postdec2
  5844                           
  5845                           ;AD7147.c: 275: for(unsigned int i = 1; i<3; i++)
  5846  001230  0E00               	movlw	0
  5847  001232  6E1A               	movwf	read_cdc1@i+1,c
  5848  001234  0E01               	movlw	1
  5849  001236  6E19               	movwf	read_cdc1@i,c
  5850  001238                     i2l2233:
  5851  001238  501A               	movf	read_cdc1@i+1,w,c
  5852  00123A  E116               	bnz	i2l2243
  5853  00123C  0E03               	movlw	3
  5854  00123E  5C19               	subwf	read_cdc1@i,w,c
  5855  001240  B0D8               	btfsc	status,0,c
  5856  001242  D012               	goto	i2l2243
  5857                           
  5858                           ;AD7147.c: 276: {
  5859                           ;AD7147.c: 277: sensor_values[i] = r16_spi();
  5860  001244  EC69  F00A         	call	_r16_spi	;wreg free
  5861  001248  90D8               	bcf	status,0,c
  5862  00124A  3419               	rlcf	read_cdc1@i,w,c
  5863  00124C  6ED9               	movwf	fsr2l,c
  5864  00124E  341A               	rlcf	read_cdc1@i+1,w,c
  5865  001250  6EDA               	movwf	fsr2h,c
  5866  001252  5017               	movf	read_cdc1@sensor_values,w,c
  5867  001254  26D9               	addwf	fsr2l,f,c
  5868  001256  5018               	movf	read_cdc1@sensor_values+1,w,c
  5869  001258  22DA               	addwfc	fsr2h,f,c
  5870  00125A  C001  FFDE         	movff	?_r16_spi,postinc2
  5871  00125E  C002  FFDD         	movff	?_r16_spi+1,postdec2
  5872  001262  4A19               	infsnz	read_cdc1@i,f,c
  5873  001264  2A1A               	incf	read_cdc1@i+1,f,c
  5874  001266  D7E8               	goto	i2l2233
  5875  001268                     i2l2243:
  5876                           
  5877                           ;AD7147.c: 278: }
  5878                           ;AD7147.c: 279: get_CDC(1,1);
  5879  001268  0E00               	movlw	0
  5880  00126A  6E02               	movwf	i2get_CDC@cdc+1,c
  5881  00126C  0E01               	movlw	1
  5882  00126E  6E01               	movwf	i2get_CDC@cdc,c
  5883  001270  0E00               	movlw	0
  5884  001272  6E04               	movwf	i2get_CDC@state+1,c
  5885  001274  0E01               	movlw	1
  5886  001276  6E03               	movwf	i2get_CDC@state,c
  5887  001278  EC0D  F00B         	call	i2_get_CDC	;wreg free
  5888  00127C  0012               	return		;funcret
  5889  00127E                     __end_of_read_cdc1:
  5890                           	opt stack 0
  5891                           pclatu	equ	0xFFB
  5892                           pclath	equ	0xFFA
  5893                           tblptru	equ	0xFF8
  5894                           tblptrh	equ	0xFF7
  5895                           tblptrl	equ	0xFF6
  5896                           tablat	equ	0xFF5
  5897                           prodh	equ	0xFF4
  5898                           prodl	equ	0xFF3
  5899                           intcon	equ	0xFF2
  5900                           intcon2	equ	0xFF1
  5901                           intcon3	equ	0xFF0
  5902                           postinc0	equ	0xFEE
  5903                           fsr0h	equ	0xFEA
  5904                           fsr0l	equ	0xFE9
  5905                           wreg	equ	0xFE8
  5906                           plusw1	equ	0xFE3
  5907                           fsr1h	equ	0xFE2
  5908                           fsr1l	equ	0xFE1
  5909                           indf2	equ	0xFDF
  5910                           postinc2	equ	0xFDE
  5911                           postdec2	equ	0xFDD
  5912                           plusw2	equ	0xFDB
  5913                           fsr2h	equ	0xFDA
  5914                           fsr2l	equ	0xFD9
  5915                           status	equ	0xFD8
  5916                           
  5917 ;; *************** function i2_w16_r16_spi *****************
  5918 ;; Defined at:
  5919 ;;		line 89 in file "spi.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;  address         2    0[COMRAM] unsigned int 
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;  w16_r16_spi     2   20[COMRAM] unsigned int 
  5924 ;;  w16_r16_spi     2   18[COMRAM] unsigned int 
  5925 ;;  w16_r16_spi     2   16[COMRAM] unsigned int 
  5926 ;;  w16_r16_spi     2   14[COMRAM] unsigned int 
  5927 ;;  w16_r16_spi     2   12[COMRAM] unsigned int 
  5928 ;;  w16_r16_spi     2   10[COMRAM] unsigned int 
  5929 ;;  w16_r16_spi     2    8[COMRAM] unsigned int 
  5930 ;;  w16_r16_spi     2    6[COMRAM] unsigned int 
  5931 ;;  w16_r16_spi     2    4[COMRAM] unsigned int 
  5932 ;; Return value:  Size  Location     Type
  5933 ;;                  2    0[COMRAM] unsigned int 
  5934 ;; Registers used:
  5935 ;;		wreg, status,2, status,0
  5936 ;; Tracked objects:
  5937 ;;		On entry : 0/0
  5938 ;;		On exit  : 0/0
  5939 ;;		Unchanged: 0/0
  5940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5941 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5942 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5943 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5944 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5945 ;;Total ram usage:       22 bytes
  5946 ;; Hardware stack levels used:    1
  5947 ;; This function calls:
  5948 ;;		Nothing
  5949 ;; This function is called by:
  5950 ;;		_read_cdc1
  5951 ;;		_read_cdc2
  5952 ;;		i2_read_AD7147
  5953 ;; This function uses a non-reentrant model
  5954 ;;
  5955                           
  5956                           	psect	text29
  5957  00127E                     __ptext29:
  5958                           	opt stack 0
  5959  00127E                     i2_w16_r16_spi:
  5960                           	opt stack 25
  5961                           
  5962                           ;spi.c: 91: unsigned int address_low, address_high, result;
  5963                           ;spi.c: 92: unsigned int blank_low = 0x000;
  5964                           
  5965                           ;incstack = 0
  5966  00127E  0E00               	movlw	0
  5967  001280  6E10               	movwf	i2w16_r16_spi@blank_low+1,c
  5968  001282  0E00               	movlw	0
  5969  001284  6E0F               	movwf	i2w16_r16_spi@blank_low,c
  5970                           
  5971                           ;spi.c: 93: unsigned int blank_high = 0x000;
  5972  001286  0E00               	movlw	0
  5973  001288  6E12               	movwf	i2w16_r16_spi@blank_high+1,c
  5974  00128A  0E00               	movlw	0
  5975  00128C  6E11               	movwf	i2w16_r16_spi@blank_high,c
  5976                           
  5977                           ;spi.c: 94: unsigned int p1, p2, p3, p4;
  5978                           ;spi.c: 96: address_low = address & 0xFF;
  5979  00128E  5001               	movf	i2w16_r16_spi@address,w,c
  5980  001290  6E09               	movwf	i2w16_r16_spi@address_low,c
  5981  001292  6A0A               	clrf	i2w16_r16_spi@address_low+1,c
  5982                           
  5983                           ;spi.c: 97: address_high = (address >> 8) & 0xFF;
  5984  001294  C001  F003         	movff	i2w16_r16_spi@address,??i2_w16_r16_spi
  5985  001298  C002  F004         	movff	i2w16_r16_spi@address+1,??i2_w16_r16_spi+1
  5986  00129C  C004  F003         	movff	??i2_w16_r16_spi+1,??i2_w16_r16_spi
  5987  0012A0  6A04               	clrf	??i2_w16_r16_spi+1,c
  5988  0012A2  5003               	movf	??i2_w16_r16_spi,w,c
  5989  0012A4  6E0B               	movwf	i2w16_r16_spi@address_high,c
  5990  0012A6  6A0C               	clrf	i2w16_r16_spi@address_high+1,c
  5991                           
  5992                           ;spi.c: 99: SSPBUF = address_high;
  5993  0012A8  C00B  FFC9         	movff	i2w16_r16_spi@address_high,4041	;volatile
  5994  0012AC                     i2l300:
  5995  0012AC  A0C7               	btfss	4039,0,c	;volatile
  5996  0012AE  D7FE               	goto	i2l300
  5997                           
  5998                           ;spi.c: 101: p1 = SSPBUF;
  5999  0012B0  CFC9 F005          	movff	4041,i2w16_r16_spi@p1	;volatile
  6000  0012B4  6A06               	clrf	i2w16_r16_spi@p1+1,c
  6001                           
  6002                           ;spi.c: 103: SSPBUF = address_low;
  6003  0012B6  C009  FFC9         	movff	i2w16_r16_spi@address_low,4041	;volatile
  6004  0012BA                     i2l303:
  6005  0012BA  A0C7               	btfss	4039,0,c	;volatile
  6006  0012BC  D7FE               	goto	i2l303
  6007                           
  6008                           ;spi.c: 105: p2 = SSPBUF;
  6009  0012BE  CFC9 F007          	movff	4041,i2w16_r16_spi@p2	;volatile
  6010  0012C2  6A08               	clrf	i2w16_r16_spi@p2+1,c
  6011                           
  6012                           ;spi.c: 107: SSPBUF = blank_high;
  6013  0012C4  C011  FFC9         	movff	i2w16_r16_spi@blank_high,4041	;volatile
  6014  0012C8                     i2l306:
  6015  0012C8  A0C7               	btfss	4039,0,c	;volatile
  6016  0012CA  D7FE               	goto	i2l306
  6017                           
  6018                           ;spi.c: 109: p3 = SSPBUF;
  6019  0012CC  CFC9 F013          	movff	4041,i2w16_r16_spi@p3	;volatile
  6020  0012D0  6A14               	clrf	i2w16_r16_spi@p3+1,c
  6021                           
  6022                           ;spi.c: 111: SSPBUF = blank_low;
  6023  0012D2  C00F  FFC9         	movff	i2w16_r16_spi@blank_low,4041	;volatile
  6024  0012D6                     i2l309:
  6025  0012D6  A0C7               	btfss	4039,0,c	;volatile
  6026  0012D8  D7FE               	goto	i2l309
  6027                           
  6028                           ;spi.c: 113: p4 = SSPBUF;
  6029  0012DA  CFC9 F015          	movff	4041,i2w16_r16_spi@p4	;volatile
  6030  0012DE  6A16               	clrf	i2w16_r16_spi@p4+1,c
  6031                           
  6032                           ;spi.c: 115: result = (p3 << 8) + p4;
  6033  0012E0  5013               	movf	i2w16_r16_spi@p3,w,c
  6034  0012E2  6E04               	movwf	(??i2_w16_r16_spi+1)& (0+255),c
  6035  0012E4  6A03               	clrf	??i2_w16_r16_spi& (0+255),c
  6036  0012E6  5015               	movf	i2w16_r16_spi@p4,w,c
  6037  0012E8  2403               	addwf	??i2_w16_r16_spi,w,c
  6038  0012EA  6E0D               	movwf	i2w16_r16_spi@result,c
  6039  0012EC  5016               	movf	i2w16_r16_spi@p4+1,w,c
  6040  0012EE  2004               	addwfc	??i2_w16_r16_spi+1,w,c
  6041  0012F0  6E0E               	movwf	i2w16_r16_spi@result+1,c
  6042                           
  6043                           ;spi.c: 116: return result;
  6044  0012F2  C00D  F001         	movff	i2w16_r16_spi@result,?i2_w16_r16_spi
  6045  0012F6  C00E  F002         	movff	i2w16_r16_spi@result+1,?i2_w16_r16_spi+1
  6046  0012FA  0012               	return	
  6047  0012FC                     __end_ofi2_w16_r16_spi:
  6048                           	opt stack 0
  6049                           pclatu	equ	0xFFB
  6050                           pclath	equ	0xFFA
  6051                           tblptru	equ	0xFF8
  6052                           tblptrh	equ	0xFF7
  6053                           tblptrl	equ	0xFF6
  6054                           tablat	equ	0xFF5
  6055                           prodh	equ	0xFF4
  6056                           prodl	equ	0xFF3
  6057                           intcon	equ	0xFF2
  6058                           intcon2	equ	0xFF1
  6059                           intcon3	equ	0xFF0
  6060                           postinc0	equ	0xFEE
  6061                           fsr0h	equ	0xFEA
  6062                           fsr0l	equ	0xFE9
  6063                           wreg	equ	0xFE8
  6064                           plusw1	equ	0xFE3
  6065                           fsr1h	equ	0xFE2
  6066                           fsr1l	equ	0xFE1
  6067                           indf2	equ	0xFDF
  6068                           postinc2	equ	0xFDE
  6069                           postdec2	equ	0xFDD
  6070                           plusw2	equ	0xFDB
  6071                           fsr2h	equ	0xFDA
  6072                           fsr2l	equ	0xFD9
  6073                           status	equ	0xFD8
  6074                           
  6075 ;; *************** function i2_get_CDC *****************
  6076 ;; Defined at:
  6077 ;;		line 343 in file "AD7147.c"
  6078 ;; Parameters:    Size  Location     Type
  6079 ;;  cdc             2    0[COMRAM] unsigned int 
  6080 ;;  state           2    2[COMRAM] unsigned int 
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;		None
  6083 ;; Return value:  Size  Location     Type
  6084 ;;                  1    wreg      void 
  6085 ;; Registers used:
  6086 ;;		wreg, status,2, status,0
  6087 ;; Tracked objects:
  6088 ;;		On entry : 0/0
  6089 ;;		On exit  : 0/0
  6090 ;;		Unchanged: 0/0
  6091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6092 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6095 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6096 ;;Total ram usage:        4 bytes
  6097 ;; Hardware stack levels used:    1
  6098 ;; This function calls:
  6099 ;;		Nothing
  6100 ;; This function is called by:
  6101 ;;		_read_cdc1
  6102 ;;		_read_cdc2
  6103 ;;		i2_read_AD7147
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           	psect	text30
  6108  00161A                     __ptext30:
  6109                           	opt stack 0
  6110  00161A                     i2_get_CDC:
  6111                           	opt stack 25
  6112                           
  6113                           ;AD7147.c: 345: if (state == 1)
  6114                           
  6115                           ;incstack = 0
  6116  00161A  0403               	decf	i2get_CDC@state,w,c
  6117  00161C  1004               	iorwf	i2get_CDC@state+1,w,c
  6118  00161E  A4D8               	btfss	status,2,c
  6119  001620  D003               	goto	i2l1951
  6120                           
  6121                           ;AD7147.c: 346: {
  6122                           ;AD7147.c: 347: LATCbits.LATC1 = 1;
  6123  001622  828B               	bsf	3979,1,c	;volatile
  6124                           
  6125                           ;AD7147.c: 348: LATCbits.LATC0 = 1;
  6126  001624  808B               	bsf	3979,0,c	;volatile
  6127                           
  6128                           ;AD7147.c: 349: }
  6129  001626  0012               	return	
  6130  001628                     i2l1951:
  6131                           
  6132                           ;AD7147.c: 350: else
  6133                           ;AD7147.c: 351: {
  6134                           ;AD7147.c: 352: if (cdc == 1)
  6135  001628  0401               	decf	i2get_CDC@cdc,w,c
  6136  00162A  1002               	iorwf	i2get_CDC@cdc+1,w,c
  6137  00162C  A4D8               	btfss	status,2,c
  6138  00162E  D003               	goto	i2l79
  6139                           
  6140                           ;AD7147.c: 353: {
  6141                           ;AD7147.c: 354: LATCbits.LATC1 = 0;
  6142  001630  928B               	bcf	3979,1,c	;volatile
  6143                           
  6144                           ;AD7147.c: 355: LATCbits.LATC0 = 1;
  6145  001632  808B               	bsf	3979,0,c	;volatile
  6146                           
  6147                           ;AD7147.c: 356: }
  6148  001634  0012               	return	
  6149  001636                     i2l79:
  6150                           
  6151                           ;AD7147.c: 357: else
  6152                           ;AD7147.c: 358: {
  6153                           ;AD7147.c: 359: LATCbits.LATC0 = 0;
  6154  001636  908B               	bcf	3979,0,c	;volatile
  6155                           
  6156                           ;AD7147.c: 360: LATCbits.LATC1 = 1;
  6157  001638  828B               	bsf	3979,1,c	;volatile
  6158  00163A  0012               	return	
  6159  00163C                     __end_ofi2_get_CDC:
  6160                           	opt stack 0
  6161                           pclatu	equ	0xFFB
  6162                           pclath	equ	0xFFA
  6163                           tblptru	equ	0xFF8
  6164                           tblptrh	equ	0xFF7
  6165                           tblptrl	equ	0xFF6
  6166                           tablat	equ	0xFF5
  6167                           prodh	equ	0xFF4
  6168                           prodl	equ	0xFF3
  6169                           intcon	equ	0xFF2
  6170                           intcon2	equ	0xFF1
  6171                           intcon3	equ	0xFF0
  6172                           postinc0	equ	0xFEE
  6173                           fsr0h	equ	0xFEA
  6174                           fsr0l	equ	0xFE9
  6175                           wreg	equ	0xFE8
  6176                           plusw1	equ	0xFE3
  6177                           fsr1h	equ	0xFE2
  6178                           fsr1l	equ	0xFE1
  6179                           indf2	equ	0xFDF
  6180                           postinc2	equ	0xFDE
  6181                           postdec2	equ	0xFDD
  6182                           plusw2	equ	0xFDB
  6183                           fsr2h	equ	0xFDA
  6184                           fsr2l	equ	0xFD9
  6185                           status	equ	0xFD8
  6186                           
  6187 ;; *************** function _r16_spi *****************
  6188 ;; Defined at:
  6189 ;;		line 70 in file "spi.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;		None
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;  result          2   12[COMRAM] unsigned int 
  6194 ;;  p2              2   10[COMRAM] unsigned int 
  6195 ;;  p1              2    8[COMRAM] unsigned int 
  6196 ;;  blank_high      2    6[COMRAM] unsigned int 
  6197 ;;  blank_low       2    4[COMRAM] unsigned int 
  6198 ;; Return value:  Size  Location     Type
  6199 ;;                  2    0[COMRAM] unsigned int 
  6200 ;; Registers used:
  6201 ;;		wreg, status,2, status,0
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6207 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6208 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6209 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6210 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6211 ;;Total ram usage:       14 bytes
  6212 ;; Hardware stack levels used:    1
  6213 ;; This function calls:
  6214 ;;		Nothing
  6215 ;; This function is called by:
  6216 ;;		_read_cdc1
  6217 ;;		_read_cdc2
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           	psect	text31
  6222  0014D2                     __ptext31:
  6223                           	opt stack 0
  6224  0014D2                     _r16_spi:
  6225                           	opt stack 25
  6226                           
  6227                           ;spi.c: 72: unsigned int blank_low = 0x000;
  6228                           
  6229                           ;incstack = 0
  6230  0014D2  0E00               	movlw	0
  6231  0014D4  6E06               	movwf	r16_spi@blank_low+1,c
  6232  0014D6  0E00               	movlw	0
  6233  0014D8  6E05               	movwf	r16_spi@blank_low,c
  6234                           
  6235                           ;spi.c: 73: unsigned int blank_high = 0x000;
  6236  0014DA  0E00               	movlw	0
  6237  0014DC  6E08               	movwf	r16_spi@blank_high+1,c
  6238  0014DE  0E00               	movlw	0
  6239  0014E0  6E07               	movwf	r16_spi@blank_high,c
  6240                           
  6241                           ;spi.c: 74: unsigned int p1, p2, result;
  6242                           ;spi.c: 77: SSPBUF = blank_high;
  6243  0014E2  C007  FFC9         	movff	r16_spi@blank_high,4041	;volatile
  6244  0014E6                     i2l291:
  6245  0014E6  A0C7               	btfss	4039,0,c	;volatile
  6246  0014E8  D7FE               	goto	i2l291
  6247                           
  6248                           ;spi.c: 79: p1 = SSPBUF;
  6249  0014EA  CFC9 F009          	movff	4041,r16_spi@p1	;volatile
  6250  0014EE  6A0A               	clrf	r16_spi@p1+1,c
  6251                           
  6252                           ;spi.c: 81: SSPBUF = blank_low;
  6253  0014F0  C005  FFC9         	movff	r16_spi@blank_low,4041	;volatile
  6254  0014F4                     i2l294:
  6255  0014F4  A0C7               	btfss	4039,0,c	;volatile
  6256  0014F6  D7FE               	goto	i2l294
  6257                           
  6258                           ;spi.c: 83: p2 = SSPBUF;
  6259  0014F8  CFC9 F00B          	movff	4041,r16_spi@p2	;volatile
  6260  0014FC  6A0C               	clrf	r16_spi@p2+1,c
  6261                           
  6262                           ;spi.c: 85: result = (p1 << 8) + p2;
  6263  0014FE  5009               	movf	r16_spi@p1,w,c
  6264  001500  6E04               	movwf	(??_r16_spi+1)& (0+255),c
  6265  001502  6A03               	clrf	??_r16_spi& (0+255),c
  6266  001504  500B               	movf	r16_spi@p2,w,c
  6267  001506  2403               	addwf	??_r16_spi,w,c
  6268  001508  6E0D               	movwf	r16_spi@result,c
  6269  00150A  500C               	movf	r16_spi@p2+1,w,c
  6270  00150C  2004               	addwfc	??_r16_spi+1,w,c
  6271  00150E  6E0E               	movwf	r16_spi@result+1,c
  6272                           
  6273                           ;spi.c: 86: return result;
  6274  001510  C00D  F001         	movff	r16_spi@result,?_r16_spi
  6275  001514  C00E  F002         	movff	r16_spi@result+1,?_r16_spi+1
  6276  001518  0012               	return	
  6277  00151A                     __end_of_r16_spi:
  6278                           	opt stack 0
  6279  0000                     pclatu	equ	0xFFB
  6280                           pclath	equ	0xFFA
  6281                           tblptru	equ	0xFF8
  6282                           tblptrh	equ	0xFF7
  6283                           tblptrl	equ	0xFF6
  6284                           tablat	equ	0xFF5
  6285                           prodh	equ	0xFF4
  6286                           prodl	equ	0xFF3
  6287                           intcon	equ	0xFF2
  6288                           intcon2	equ	0xFF1
  6289                           intcon3	equ	0xFF0
  6290                           postinc0	equ	0xFEE
  6291                           fsr0h	equ	0xFEA
  6292                           fsr0l	equ	0xFE9
  6293                           wreg	equ	0xFE8
  6294                           plusw1	equ	0xFE3
  6295                           fsr1h	equ	0xFE2
  6296                           fsr1l	equ	0xFE1
  6297                           indf2	equ	0xFDF
  6298                           postinc2	equ	0xFDE
  6299                           postdec2	equ	0xFDD
  6300                           plusw2	equ	0xFDB
  6301                           fsr2h	equ	0xFDA
  6302                           fsr2l	equ	0xFD9
  6303                           status	equ	0xFD8
  6304                           pclatu	equ	0xFFB
  6305                           pclath	equ	0xFFA
  6306                           tblptru	equ	0xFF8
  6307                           tblptrh	equ	0xFF7
  6308                           tblptrl	equ	0xFF6
  6309                           tablat	equ	0xFF5
  6310                           prodh	equ	0xFF4
  6311                           prodl	equ	0xFF3
  6312                           intcon	equ	0xFF2
  6313                           intcon2	equ	0xFF1
  6314                           intcon3	equ	0xFF0
  6315                           postinc0	equ	0xFEE
  6316                           fsr0h	equ	0xFEA
  6317                           fsr0l	equ	0xFE9
  6318                           wreg	equ	0xFE8
  6319                           plusw1	equ	0xFE3
  6320                           fsr1h	equ	0xFE2
  6321                           fsr1l	equ	0xFE1
  6322                           indf2	equ	0xFDF
  6323                           postinc2	equ	0xFDE
  6324                           postdec2	equ	0xFDD
  6325                           plusw2	equ	0xFDB
  6326                           fsr2h	equ	0xFDA
  6327                           fsr2l	equ	0xFD9
  6328                           status	equ	0xFD8
  6329                           
  6330                           	psect	rparam
  6331  0000                     pclatu	equ	0xFFB
  6332                           pclath	equ	0xFFA
  6333                           tblptru	equ	0xFF8
  6334                           tblptrh	equ	0xFF7
  6335                           tblptrl	equ	0xFF6
  6336                           tablat	equ	0xFF5
  6337                           prodh	equ	0xFF4
  6338                           prodl	equ	0xFF3
  6339                           intcon	equ	0xFF2
  6340                           intcon2	equ	0xFF1
  6341                           intcon3	equ	0xFF0
  6342                           postinc0	equ	0xFEE
  6343                           fsr0h	equ	0xFEA
  6344                           fsr0l	equ	0xFE9
  6345                           wreg	equ	0xFE8
  6346                           plusw1	equ	0xFE3
  6347                           fsr1h	equ	0xFE2
  6348                           fsr1l	equ	0xFE1
  6349                           indf2	equ	0xFDF
  6350                           postinc2	equ	0xFDE
  6351                           postdec2	equ	0xFDD
  6352                           plusw2	equ	0xFDB
  6353                           fsr2h	equ	0xFDA
  6354                           fsr2l	equ	0xFD9
  6355                           status	equ	0xFD8
  6356                           
  6357                           	psect	temp
  6358  000057                     btemp:
  6359                           	opt stack 0
  6360  000057                     	ds	1
  6361  0000                     int$flags	set	btemp
  6362                           pclatu	equ	0xFFB
  6363                           pclath	equ	0xFFA
  6364                           tblptru	equ	0xFF8
  6365                           tblptrh	equ	0xFF7
  6366                           tblptrl	equ	0xFF6
  6367                           tablat	equ	0xFF5
  6368                           prodh	equ	0xFF4
  6369                           prodl	equ	0xFF3
  6370                           intcon	equ	0xFF2
  6371                           intcon2	equ	0xFF1
  6372                           intcon3	equ	0xFF0
  6373                           postinc0	equ	0xFEE
  6374                           fsr0h	equ	0xFEA
  6375                           fsr0l	equ	0xFE9
  6376                           wreg	equ	0xFE8
  6377                           plusw1	equ	0xFE3
  6378                           fsr1h	equ	0xFE2
  6379                           fsr1l	equ	0xFE1
  6380                           indf2	equ	0xFDF
  6381                           postinc2	equ	0xFDE
  6382                           postdec2	equ	0xFDD
  6383                           plusw2	equ	0xFDB
  6384                           fsr2h	equ	0xFDA
  6385                           fsr2l	equ	0xFD9
  6386                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        3
    BSS         162
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      86
    BANK0           160     70     149
    BANK1           256      0      48
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 48
		 -> avail_sensors(BANK1[48]), 

    memset@p	PTR unsigned char  size(2) Largest target is 48
		 -> avail_sensors(BANK1[48]), 

    CDC_RESULT	PTR unsigned int [12] size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    sp__memset	PTR void  size(2) Largest target is 48
		 -> avail_sensors(BANK1[48]), 

    read_cdc2@sensor_values	PTR unsigned int  size(2) Largest target is 48
		 -> sensor_values(BANK0[48]), 

    read_cdc1@sensor_values	PTR unsigned int  size(2) Largest target is 48
		 -> sensor_values(BANK0[48]), 

    read_sensor@sensor_values	PTR unsigned int  size(2) Largest target is 48
		 -> sensor_values(BANK0[48]), 

    read_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 6
		 -> interrupt_values_cdc2(COMRAM[6]), interrupt_values_cdc1(COMRAM[6]), 

    write_AD7147@OutputBuffer	PTR unsigned int  size(2) Largest target is 16
		 -> setup_AD7147@StageBuffer(BANK0[16]), 

    setup_AD7147@DataBuffer	PTR unsigned int  size(2) Largest target is 6
		 -> interrupt_values_cdc1(COMRAM[6]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->i2_read_AD7147
    i2_read_AD7147->i2_w16_r16_spi
    _read_cdc2->i2_w16_r16_spi
    _read_cdc1->i2_w16_r16_spi

Critical Paths under _main in BANK0

    _main->_setup_AD7147
    _switch_LED->_w32_spi
    _setup_AD7147->_write_AD7147
    _write_AD7147->_w32_spi
    _read_AD7147->_w16_r16_spi
    _read_sensor->_w16_r16_spi
    _sensor_CDC->_get_CDC
    _get_ID->_w16_r16_spi
    _blink_LED->_w32_spi
    _delay_ms->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   41394
                                             60 BANK0     10    10      0
                          _blink_LED
                           _delay_ms
                             _get_ID
                    _init_interrupts
                             _memset
                        _read_AD7147
                        _read_sensor
                       _setup_AD7147
                          _setup_mcu
                          _setup_spi
                         _switch_LED
                     _uart_read_char
                _uart_read_indicator
             _uart_read_unsigned_int
                    _uart_write_char
            _uart_write_unsigned_int
 ---------------------------------------------------------------------------------
 (1) _uart_write_unsigned_int                              4     2      2     470
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _uart_write_char                                      1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _uart_read_unsigned_int                               8     6      2      69
                                              0 BANK0      8     6      2
                     _uart_read_char
 ---------------------------------------------------------------------------------
 (2) _uart_read_char                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _uart_read_indicator                                  2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _switch_LED                                           8     4      4    4657
                                             22 BANK0      8     4      4
                           _delay_ms
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (1) _setup_spi                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_mcu                                            0     0      0       0
                          _init_uart
                         _setup_port
 ---------------------------------------------------------------------------------
 (2) _setup_port                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup_AD7147                                        20    16      4   17706
                                             40 BANK0     20    16      4
                        _read_AD7147
                       _write_AD7147
 ---------------------------------------------------------------------------------
 (2) _write_AD7147                                        18     8     10    9843
                                             22 BANK0     18     8     10
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (2) _read_AD7147                                         12     4      8    4696
                                             22 BANK0     12     4      8
                            _get_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (1) _read_sensor                                         12     8      4    4363
                                             22 BANK0     12     8      4
                         _sensor_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (2) _sensor_CDC                                           4     0      4    3246
                                              4 BANK0      4     0      4
                            _get_CDC
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     324
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (1) _init_interrupts                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_ID                                               5     3      2    3326
                                             22 BANK0      5     3      2
                            _get_CDC
                        _w16_r16_spi
 ---------------------------------------------------------------------------------
 (3) _w16_r16_spi                                         22    20      2     611
                                              0 BANK0     22    20      2
 ---------------------------------------------------------------------------------
 (1) _blink_LED                                            4     2      2    4679
                                             22 BANK0      4     2      2
                           _delay_ms
                            _get_CDC
                            _w32_spi
 ---------------------------------------------------------------------------------
 (2) _w32_spi                                             22    18      4     944
                                              0 BANK0     22    18      4
 ---------------------------------------------------------------------------------
 (2) _get_CDC                                              4     0      4    2572
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     877
                                              8 BANK0      5     3      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     452
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 14    14      0    2938
                                             34 COMRAM    14    14      0
                          _read_cdc1
                          _read_cdc2
                      i2_read_AD7147
 ---------------------------------------------------------------------------------
 (5) i2_read_AD7147                                       12     4      8    1050
                                             22 COMRAM    12     4      8
                          i2_get_CDC
                      i2_w16_r16_spi
 ---------------------------------------------------------------------------------
 (5) _read_cdc2                                            4     2      2     944
                                             22 COMRAM     4     2      2
                            _r16_spi
                          i2_get_CDC
                      i2_w16_r16_spi
 ---------------------------------------------------------------------------------
 (5) _read_cdc1                                            4     2      2     944
                                             22 COMRAM     4     2      2
                            _r16_spi
                          i2_get_CDC
                      i2_w16_r16_spi
 ---------------------------------------------------------------------------------
 (6) i2_w16_r16_spi                                       22    20      2     285
                                              0 COMRAM    22    20      2
 ---------------------------------------------------------------------------------
 (6) i2_get_CDC                                            4     0      4     356
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (6) _r16_spi                                             14    12      2     115
                                              0 COMRAM    14    12      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _blink_LED
     _delay_ms
       ___awdiv
     _get_CDC
     _w32_spi
   _delay_ms
     ___awdiv
   _get_ID
     _get_CDC
     _w16_r16_spi
   _init_interrupts
   _memset
   _read_AD7147
     _get_CDC
     _w16_r16_spi
   _read_sensor
     _sensor_CDC
       _get_CDC
     _w16_r16_spi
   _setup_AD7147
     _read_AD7147
       _get_CDC
       _w16_r16_spi
     _write_AD7147
       _get_CDC
       _w32_spi
   _setup_mcu
     _init_uart
     _setup_port
   _setup_spi
   _switch_LED
     _delay_ms
       ___awdiv
     _get_CDC
     _w32_spi
   _uart_read_char
   _uart_read_indicator
   _uart_read_unsigned_int
     _uart_read_char
   _uart_write_char
   _uart_write_unsigned_int

 _ISR (ROOT)
   _read_cdc1
     _r16_spi
     i2_get_CDC
     i2_w16_r16_spi
   _read_cdc2
     _r16_spi
     i2_get_CDC
     i2_w16_r16_spi
   i2_read_AD7147
     i2_get_CDC
     i2_w16_r16_spi

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      30       8       18.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     46      95       5       93.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      56       1       91.5%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     11B       6        0.0%
DATA                 0      0     11B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Nov 08 16:24:28 2017

                      _SSPSTATbits 000FC7                                 l38 0CF8  
                               l79 15F0                       ___awdiv@sign 00B1  
                     __CFG_CP0$OFF 000000                                l300 1002  
                              l303 1012                                l306 1022  
                              l309 1032                                l270 1150  
                              l334 169C                                l273 1160  
                              l346 1648                                l267 1140  
                              l276 1170                                l349 1650  
                              l393 13EE                                l385 167C  
                              l386 1672                   i2read_AD7147@cdc 001D  
                ??_init_interrupts 00AC                                _ISR 0008  
                              u870 152A                                u991 00FC  
                              _cdc 0074                                wreg 000FE8  
                       _TXSTA1bits 000FAC                  write_AD7147@index 00C8  
                             ?_ISR 0001                               l2219 0D00  
                             l2331 140C                               l2501 0B92  
                             l2421 0912                               l2343 1434  
                             l2335 1420                               l2511 0BB0  
                             l2353 15B4                               l2281 10CE  
                             l2329 13F8                               l2513 0BB4  
                             l2433 0974                               l2515 0BB8  
                             l2507 0B9A                               l2523 0BD8  
                             l2419 0908                               l2349 15A2  
                             l2277 10AE                               l2509 0BAC  
                             l2453 0A36                               l2437 09A2  
                             l2429 095A                               l2445 09D0  
                             l1807 15DE                               l2519 0BC0  
                             l2447 09EE                               l1833 0E7A  
                             l1921 14BA                               l1905 1542  
                             l2465 0A96                               l2457 0A46  
                             l2491 0B26                               l2475 0AC0  
                             l2483 0AD8                               l1845 0EAE  
                             l1861 0EFE                               l2485 0AEA  
                             l2469 0A9E                               l1847 0EBA  
                             l1839 0E90                               l1919 14A8  
                             l1865 0F12                               l1857 0EF0  
                             l1849 0EC0                               l2497 0B7C  
                             l1883 0C9C                               l1893 0F52  
                             l1877 0C36                               l1897 0F9A  
                             u1000 0CE2                               u1130 1430  
                             u1055 13A0                               u1307 14B0  
                             i2l79 1636                      r16_spi@result 000D  
                 ??_uart_read_char 00AC             _uart_read_unsigned_int 155A  
                             _main 0898                               fsr0h 000FEA  
                             fsr1h 000FE2                               fsr2h 000FDA  
                             fsr0l 000FE9                               indf2 000FDF  
                             fsr1l 000FE1                               fsr2l 000FD9  
                             btemp 0057   __size_of_uart_write_unsigned_int 001E  
                     ?_read_AD7147 00C2                    ??i2_w16_r16_spi 0003  
    uart_read_unsigned_int@message 00B0                               prodh 000FF4  
                             prodl 000FF3                               start 00EE  
                    ??_w16_r16_spi 00AE                      __CFG_IESO$OFF 000000  
                    __CFG_FOSC$HS1 000000                       ___param_bank 000000  
           read_cdc2@sensor_values 0017                    __end_of_r16_spi 151A  
                            ??_ISR 0023                    __end_of_w32_spi 117E  
         __size_of_uart_write_char 000E                              ?_main 0001  
                  __end_of___awdiv 0F1C                    ___awdiv@divisor 00AE  
                            _RC1IF 007CF5              w16_r16_spi@blank_high 00BC  
     read_AD7147@NumberOfRegisters 00C6                              i2l300 12AC  
                            i2l303 12BA                              i2l306 12C8  
                            i2l156 00B2                              i2l309 12D6  
                            i2l291 14E6                              i2l294 14F4  
                  ___awdiv@counter 00B0                              _TRISC 000F94  
                  __end_of_get_CDC 15F6                     __CFG_FCMEN$OFF 000000  
            __size_of_write_AD7147 00D2                       ?_read_sensor 00C2  
                            _state 00F4                              main@i 00F0  
                            main@k 00EE                              pclath 000FFA  
                            tablat 000FF5                              plusw1 000FE3  
                            plusw2 000FDB                              status 000FD8  
           w16_r16_spi@address_low 00B4                     __CFG_MCLRE$OFF 000000  
                  __initialization 1438                 __size_ofi2_get_CDC 0022  
                     __end_of_main 0BF6             i2w16_r16_spi@blank_low 000F  
              __end_of_w16_r16_spi 106A                    switch_LED@state 00C4  
                     _write_AD7147 0BF6                             ??_main 00E8  
                    __activetblptr 000002                   ___awdiv@dividend 00AC  
         uart_read_indicator@count 00AC                        w32_spi@data 00AE  
                           i2l2233 1238                             i2l2243 1268  
                           i2l2251 11BA                             i2l2261 11EA  
                           i2l2361 1326                             i2l2365 1354  
                   __CFG_WDTEN$OFF 000000                             i2l2395 007A  
                           i2l1951 1628                             _RCREG1 000FAE  
                           _SPBRG1 000FAF                     read_AD7147@cdc 00C8  
                           _SSPBUF 000FC9              switch_LED@message_160 00C8  
                           _TXREG1 000FAD                          ??_r16_spi 0003  
                           _TXSTA1 000FAC                   __end_of_delay_ms 14D2  
                        ??_w32_spi 00B0   write_AD7147@RegisterStartAddress 00C2  
                   __CFG_XINST$OFF 000000                          ??___awdiv 00B0  
                   __CFG_STVREN$ON 000000                             _get_ID 1376  
                           _memset 1598                             clear_0 145C  
                           clear_1 1468                             clear_2 1474  
                           _on_off 0072                   ___awdiv@quotient 00B2  
                        ??_get_CDC 00B0         write_AD7147@Register_Value 00CE  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                  ??_uart_write_char 00AC  
                __end_ofi2_get_CDC 163C                       i2get_CDC@cdc 0001  
          w16_r16_spi@address_high 00B6            _uart_write_unsigned_int 163C  
                       __accesstop 0060            __end_of__initialization 147A  
                    ___rparam_used 000001                        _w16_r16_spi 0FC6  
             __size_of_read_AD7147 00AA                    _init_interrupts 15F6  
                   __pcstackCOMRAM 0001                       __pidataBANK0 16BC  
             i2w16_r16_spi@address 0001            i2w16_r16_spi@blank_high 0011  
               __size_of_blink_LED 00C4              _interrupt_values_cdc1 0051  
            _interrupt_values_cdc2 004B                   r16_spi@blank_low 0005  
                     read_AD7147@i 00CC             __size_ofi2_read_AD7147 007A  
          ?_uart_read_unsigned_int 00AC                         __pbssBANK0 0060  
                       __pbssBANK1 0100               __size_of_read_sensor 00D2  
               __size_of_read_cdc1 007E                 __size_of_read_cdc2 0082  
               __size_of_init_uart 0014       __size_of_uart_read_indicator 0056  
                          ?_get_ID 00C2                         _break_loop 007A  
                          ?_memset 00AC                   __CFG_CANMX$PORTB 000000  
               __size_of_setup_mcu 000A  i2read_AD7147@RegisterStartAddress 0019  
  read_AD7147@RegisterStartAddress 00C4                 __size_of_setup_spi 0016  
                        ?_delay_ms 00B4     __end_of_uart_read_unsigned_int 1598  
                    w16_r16_spi@p1 00B0                      w16_r16_spi@p2 00B2  
                    w16_r16_spi@p3 00BE                      w16_r16_spi@p4 00C0  
        ??_uart_write_unsigned_int 00AE            __end_of_init_interrupts 161A  
                __end_of_blink_LED 0E5E              read_AD7147@DataBuffer 00C2  
                          _r16_spi 14D2                            _w32_spi 10F4  
                    i2_read_AD7147 12FC                            __Hparam 0000  
            __end_ofi2_w16_r16_spi 12FC                            __Lparam 0000  
                          ___awdiv 0E5E                    __size_of_get_ID 006C  
         write_AD7147@OutputBuffer 00C6                    sensor_CDC@state 00B2  
                          __pcinit 1438                            _get_CDC 15CC  
                  __size_of_memset 0034                            __ramtop 0F00  
                          __ptext0 0898                            __ptext1 163C  
                          __ptext2 1698                            __ptext3 155A  
                          __ptext4 1670                            __ptext5 13E2  
                          __ptext6 106A                            __ptext7 165A  
                          __ptext8 16B2                            __ptext9 16A6  
                     __size_of_ISR 00E6                     w32_spi@address 00AC  
                __end_of_read_cdc1 127E                  __end_of_read_cdc2 1200  
                __end_of_init_uart 1698                         ??_delay_ms 00B6  
                       get_CDC@cdc 00AC               end_of_initialization 147A  
                    ?_setup_AD7147 00D4                            memset@c 00AE  
                          memset@n 00B0                            memset@p 00B2  
                    __Lmediumconst 0000                     ?i2_read_AD7147 0017  
                __end_of_setup_mcu 16BC                  __end_of_setup_spi 1670  
                          postdec2 000FDD    __end_of_uart_write_unsigned_int 165A  
                          postinc0 000FEE                            postinc2 000FDE  
                       _sensor_CDC 151A            __size_of_uart_read_char 0014  
                  _uart_write_char 1698                         _setup_port 16A6  
                        _TRISBbits 000F93                          r16_spi@p1 0009  
                        r16_spi@p2 000B                     i2read_AD7147@i 0021  
                  write_AD7147@cdc 00CA           i2w16_r16_spi@address_low 0009  
                   ??_setup_AD7147 00D8                         _start_stop 00F2  
                        i2_get_CDC 161A                   ?_init_interrupts 0001  
            read_sensor@cdc_sensor 00CC                       ?_w16_r16_spi 00AC  
                       _switch_LED 106A                          w32_spi@p1 00B2  
                        w32_spi@p2 00B4                          w32_spi@p3 00B6  
                        w32_spi@p4 00B8               w16_r16_spi@blank_low 00BA  
                   __end_of_get_ID 13E2                     __end_of_memset 15CC  
              w32_spi@address_high 00BC                start_initialization 1438  
              _uart_read_indicator 13E2                        __end_of_ISR 00EE  
                switch_LED@message 00C6                uart_write_char@data 00AC  
                    _second_sensor 0049            i2read_AD7147@DataBuffer 0017  
                       ?i2_get_CDC 0001                    ??i2_read_AD7147 001F  
                r16_spi@blank_high 0007                      ??_read_AD7147 00CA  
          __end_of_uart_write_char 16A6               ?_uart_read_indicator 0001  
          setup_AD7147@StageBuffer 00D8                        ?_sensor_CDC 00B0  
                       read_cdc1@i 0019                         read_cdc2@i 0019  
                         ??_get_ID 00C4          i2w16_r16_spi@address_high 000B  
                      __pdataBANK0 00F2                           ??_memset 00B2  
         read_sensor@sensor_values 00C2             setup_AD7147@DataBuffer 00D4  
                      ?_setup_port 0001                        __pbssCOMRAM 0031  
                    __pcstackBANK0 00AC                      ??_read_sensor 00C6  
                __size_of_delay_ms 004A             write_AD7147@Data_Value 00D0  
              i2w16_r16_spi@result 000D                           ?_r16_spi 0001  
            ??_uart_read_indicator 00AC                           ?_w32_spi 00AC  
                      ?_switch_LED 00C2                          _blink_LED 0D9A  
                        __pintcode 0008                          _device_ID 0076  
                   _uart_read_char 1670                __end_of_read_AD7147 0FC6  
                         ?___awdiv 00AC       i2read_AD7147@Register_Values 001F  
             __end_of_setup_AD7147 0898                           ?_get_CDC 00AC  
                    ?_write_AD7147 00C2                           _BAUDCON1 000FA7  
     uart_write_unsigned_int@char1 00AE       uart_write_unsigned_int@char2 00AF  
                        _indicator 007B                   w32_spi@data_high 00C0  
                        _read_cdc1 1200                          _read_cdc2 117E  
                        _init_uart 1684                __size_of_sensor_CDC 0040  
                      ??i2_get_CDC 0005                           _LATCbits 000F8B  
                        delay_ms@j 00B7                          delay_ms@n 00B4  
              __end_of_read_sensor 0D9A      write_AD7147@NumberOfRegisters 00C4  
                        get_ID@cdc 00C2                           _PIE1bits 000F9D  
              __size_of_setup_port 000C                   ?_uart_write_char 0001  
           __end_of_uart_read_char 1684                           _PIR1bits 000F9E  
                       ?_blink_LED 00C2                           _RCONbits 000FD0  
             __size_of_w16_r16_spi 00A4                          _setup_mcu 16B2  
                        _setup_spi 165A                     ??_write_AD7147 00CC  
                  setup_AD7147@cdc 00D6         read_AD7147@Register_Values 00CA  
                     get_CDC@state 00AE                   __CFG_SOSCSEL$DIG 000000  
                        main@index 00EC           ?_uart_write_unsigned_int 00AC  
           __size_ofi2_w16_r16_spi 007E                __size_of_switch_LED 008A  
                       ?_read_cdc1 0017                         ?_read_cdc2 0017  
                       ?_init_uart 0001                        _INTCON2bits 000FF1  
                      _INTCON3bits 000FF0                 w32_spi@address_low 00BA  
                    switch_LED@cdc 00C2                         _CDC_RESULT 0031  
                  i2w16_r16_spi@p1 0005                    i2w16_r16_spi@p2 0007  
                  i2w16_r16_spi@p3 0013                    i2w16_r16_spi@p4 0015  
                      _read_AD7147 0F1C                   __size_of_r16_spi 0048  
   i2read_AD7147@NumberOfRegisters 001B                         _ANCON1bits 000F5C  
                         __Hrparam 0000             read_cdc1@sensor_values 0017  
                  ?_uart_read_char 0001                       get_ID@result 00C5  
                 __size_of_w32_spi 008A                           __Lrparam 0000  
                     blink_LED@cdc 00C2                   __size_of___awdiv 00BE  
                       ?_setup_mcu 0001                         ?_setup_spi 0001  
         ??_uart_read_unsigned_int 00AE                   __size_of_get_CDC 002A  
      uart_read_unsigned_int@part1 00B2        uart_read_unsigned_int@part2 00B3  
                 sensor_CDC@sensor 00B0                      _single_sensor 0078  
                         _delay_ms 1488                      _sensor_values 007C  
             read_sensor@register1 00CA                           __ptext10 1684  
                         __ptext11 00F2                           __ptext20 0D9A  
                         __ptext12 0BF6                           __ptext21 10F4  
                         __ptext13 0F1C                           __ptext30 161A  
                         __ptext22 15CC                           __ptext14 0CC8  
                         __ptext31 14D2                           __ptext23 1488  
                         __ptext15 151A                           __ptext24 0E5E  
                         __ptext16 1598                           __ptext17 15F6  
                         __ptext26 12FC                           __ptext18 1376  
                         __ptext27 117E                           __ptext19 0FC6  
                         __ptext28 1200                           __ptext29 127E  
                      _read_sensor 0CC8                      _avail_sensors 0100  
                    __size_of_main 035E                    w32_spi@data_low 00BE  
                read_sensor@sensor 00C4                        ??_blink_LED 00C4  
                    i2_w16_r16_spi 127E              __size_of_setup_AD7147 07A6  
         __size_of_init_interrupts 0024                       ??_sensor_CDC 00B4  
                         int$flags 0057                      write_AD7147@i 00D2  
               w16_r16_spi@address 00AC                       ??_setup_port 00AC  
                       _INTCONbits 000FF2                           memset@p1 00AC  
                      ??_read_cdc1 0019                        ??_read_cdc2 0019  
                      ??_init_uart 00AC                           intlevel2 0000  
               __end_of_sensor_CDC 155A               __end_of_write_AD7147 0CC8  
                     _setup_AD7147 00F2              __end_ofi2_read_AD7147 1376  
                       _RCSTA1bits 000FAB                     ?i2_w16_r16_spi 0001  
                     ??_switch_LED 00C6                 __end_of_setup_port 16B2  
                      ??_setup_mcu 00AC                        ??_setup_spi 00AC  
               setup_AD7147@F14884 0060                  w16_r16_spi@result 00B8  
  __size_of_uart_read_unsigned_int 003E                     i2get_CDC@state 0003  
                      _num_sensors 0070                        _SSPCON1bits 000FC6  
               __end_of_switch_LED 10F4        __end_of_uart_read_indicator 1438  
                 blink_LED@message 00C4      uart_write_unsigned_int@number 00AC  
